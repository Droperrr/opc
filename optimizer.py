#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è MVP-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º SMA-20.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ë–∞–π–µ—Å–æ–≤—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TP/SL.
"""

import json
import os
import subprocess
import time
from datetime import datetime
import pandas as pd
from skopt import gp_minimize
from skopt.space import Real
from logger import get_logger

logger = get_logger()

# –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ë–∞–π–µ—Å–æ–≤—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
# –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
# 1. atr_risk_multiplier: –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 1.0 –¥–æ 4.0
# 2. reward_ratio: –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 0.5 –¥–æ 4.0
# 3. sma_period: –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 10 –¥–æ 100 (—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π)
from skopt.space import Integer
bayesian_param_space = [
    Real(1.0, 4.0, name='atr_risk_multiplier'),  # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è Stop Loss
    Real(0.5, 4.0, name='reward_ratio'),         # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ Risk/Reward
    Integer(10, 100, name='sma_period')          # –ü–µ—Ä–∏–æ–¥ SMA –¥–ª—è —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–∞
]

def bayesian_objective_function(params):
    """
    –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ë–∞–π–µ—Å–æ–≤—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç -sharpe_ratio.
    
    Args:
        params (list): –°–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ [atr_risk_multiplier, reward_ratio, sma_period]
        
    Returns:
        float: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Sharpe Ratio.
    """
    atr_risk_multiplier, reward_ratio, sma_period = params
    
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
    position_size = 0.1
    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ z-score
    z_score_threshold = 2.0
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
    fixed_trading_params = {
        'atr_risk_multiplier': atr_risk_multiplier,
        'reward_ratio': reward_ratio
    }
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    params_dict = {
        'atr_risk_multiplier': atr_risk_multiplier,
        'reward_ratio': reward_ratio,
        'sma_period': sma_period,
        'position_size': position_size
    }
    
    logger.info(f"OPTIMIZER: Sending params to backtester -> {params_dict}")
    
    print(f"  üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±—ç–∫—Ç–µ—Å—Ç:")
    print(f"    atr_risk_multiplier: {atr_risk_multiplier}")
    print(f"    reward_ratio: {reward_ratio}")
    print(f"    sma_period: {sma_period}")
    print(f"    z_score_threshold: {z_score_threshold}")
    print(f"    position_size: {position_size}")
    print(f"    fixed_trading_params JSON: {json.dumps(fixed_trading_params)}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Walk-Forward –±—ç–∫—Ç–µ—Å—Ç —Å –Ω–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π SMA-20
    cmd = [
        'python3', 'run_walk_forward_backtest.py'
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
    cmd.extend([
        '--fixed_trading_params', json.dumps(fixed_trading_params),
        '--initial_capital', '10000',
        '--position_size', str(position_size),
        '--data_file', 'basis_features_1m.parquet',
        '--asset', 'SOL',
        '--sma_period', str(sma_period),
        '--z_score_threshold', str(z_score_threshold)
    ])
    
    print(f"  üöÄ –ó–∞–ø—É—Å–∫ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(f"    atr_risk_multiplier: {atr_risk_multiplier}")
    print(f"    reward_ratio: {reward_ratio}")
    print(f"    sma_period: {sma_period}")
    print(f"    z_score_threshold: {z_score_threshold}")
    print(f"    position_size: {position_size}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)  # 10 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        
        if result.returncode != 0:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {result.stderr}")
            return 1000.0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ performance_metrics.json
        metrics_file = os.path.join('backtest_results_mvp', 'performance_metrics.json')
        if os.path.exists(metrics_file):
            with open(metrics_file, 'r', encoding='utf-8') as f:
                metrics = json.load(f)
            
            # –ü–æ–ª—É—á–∞–µ–º Sharpe Ratio
            sharpe_ratio = metrics.get('sharpe_ratio', 0)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏—â–µ—Ç –º–∏–Ω–∏–º—É–º
            print(f"    ‚úÖ Sharpe Ratio: {sharpe_ratio:.3f}")
            return -sharpe_ratio
        else:
            print(f"  ‚ùå –§–∞–π–ª {metrics_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 1000.0
            
    except subprocess.TimeoutExpired:
        print(f"  ‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—ç–∫—Ç–µ—Å—Ç–∞")
        return 1000.0
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        return 1000.0

def run_bayesian_optimization(n_calls=50):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ë–∞–π–µ—Å–æ–≤—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é.
    
    Args:
        n_calls (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –ë–∞–π–µ—Å–æ–≤—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SMA-20...")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    result = gp_minimize(
        func=bayesian_objective_function,
        dimensions=bayesian_param_space,
        n_calls=n_calls,
        random_state=42,
        verbose=True
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ===")
    print(f"–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
    print(f"  atr_risk_multiplier: {result.x[0]:.3f}")
    print(f"  reward_ratio: {result.x[1]:.3f}")
    print(f"  sma_period: {result.x[2]:.0f}")
    print(f"–õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Sharpe Ratio): {result.fun:.6f}")
    print(f"–õ—É—á—à–∏–π Sharpe Ratio: {-result.fun:.6f}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = 'bayesian_optimization_results_sma20.json'
    results = {
        'best_params': {
            'atr_risk_multiplier': result.x[0],
            'reward_ratio': result.x[1],
            'sma_period': result.x[2]
        },
        'best_negative_sharpe': result.fun,
        'best_sharpe': -result.fun,
        'all_params': result.x_iters,
        'all_values': result.func_vals,
        'timestamp': datetime.now().isoformat()
    }
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_file}")
    return result

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ SMA-20...")
    print(f"üìÖ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ë–∞–π–µ—Å–æ–≤—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    result = run_bayesian_optimization(n_calls=50)  # 50 –∏—Ç–µ—Ä–∞—Ü–∏–π –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ

if __name__ == "__main__":
    main()