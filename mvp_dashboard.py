#!/usr/bin/env python3
"""
–í–∏–∑—É–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è MVP-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
from logger import get_logger

logger = get_logger()

class MVPCashboard:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
        self.data_file = 'dashboard_data.parquet'
        self.data = None
        
    @st.cache_data(ttl=3600)  # –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 1 —á–∞—Å
    def _load_data_cached(_self, _file_path):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞...")
            data = pd.read_parquet(_file_path)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime
            data['timestamp'] = pd.to_datetime(data['timestamp'])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            data = data.sort_values('timestamp').reset_index(drop=True)
            
            return data
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def load_data(self, force_reload=False):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ï—Å–ª–∏ force_reload=True, –æ—á–∏—â–∞–µ–º –∫—ç—à
            if force_reload:
                st.cache_data.clear()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            self.data = self._load_data_cached(self.data_file)
            
            return self.data is not None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_price_chart(self, start_time, end_time, sma_period=10):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã —Å–ø–æ—Ç–∞ –∏ SMA"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
            filtered_data = self.data[
                (self.data['timestamp'] >= start_time) &
                (self.data['timestamp'] <= end_time)
            ].copy()
            
            if filtered_data.empty:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
            filtered_data[f'SMA_{sma_period}'] = filtered_data['spot_price'].rolling(window=sma_period).mean()
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = go.Figure()
            
            # –õ–∏–Ω–∏—è —Ü–µ–Ω—ã —Å–ø–æ—Ç–∞
            fig.add_trace(go.Scatter(
                x=filtered_data['timestamp'],
                y=filtered_data['spot_price'],
                mode='lines',
                name='Spot Price',
                line=dict(color='blue', width=2)
            ))
            
            # –õ–∏–Ω–∏—è SMA
            fig.add_trace(go.Scatter(
                x=filtered_data['timestamp'],
                y=filtered_data[f'SMA_{sma_period}'],
                mode='lines',
                name=f'SMA {sma_period}',
                line=dict(color='orange', width=1, dash='dash')
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã —Å–¥–µ–ª–æ–∫
            # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ LONG-—Å–¥–µ–ª–∫–∏ (–∑–µ–ª–µ–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–≤–µ—Ä—Ö)
            profitable_long = filtered_data[
                (filtered_data['signal'] == 'LONG') & 
                (filtered_data['pnl'] > 0)
            ]
            if not profitable_long.empty:
                fig.add_trace(go.Scatter(
                    x=profitable_long['timestamp'],
                    y=profitable_long['spot_price'],
                    mode='markers',
                    marker=dict(symbol='triangle-up', size=10, color='green'),
                    name='Profitable LONG'
                ))
            
            # –£–±—ã—Ç–æ—á–Ω—ã–µ LONG-—Å–¥–µ–ª–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–≤–µ—Ä—Ö)
            loss_long = filtered_data[
                (filtered_data['signal'] == 'LONG') & 
                (filtered_data['pnl'] <= 0)
            ]
            if not loss_long.empty:
                fig.add_trace(go.Scatter(
                    x=loss_long['timestamp'],
                    y=loss_long['spot_price'],
                    mode='markers',
                    marker=dict(symbol='triangle-up', size=10, color='red'),
                    name='Loss LONG'
                ))
            
            # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ SHORT-—Å–¥–µ–ª–∫–∏ (–∑–µ–ª–µ–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω–∏–∑)
            profitable_short = filtered_data[
                (filtered_data['signal'] == 'SHORT') & 
                (filtered_data['pnl'] > 0)
            ]
            if not profitable_short.empty:
                fig.add_trace(go.Scatter(
                    x=profitable_short['timestamp'],
                    y=profitable_short['spot_price'],
                    mode='markers',
                    marker=dict(symbol='triangle-down', size=10, color='green'),
                    name='Profitable SHORT'
                ))
            
            # –£–±—ã—Ç–æ—á–Ω—ã–µ SHORT-—Å–¥–µ–ª–∫–∏ (–∫—Ä–∞—Å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω–∏–∑)
            loss_short = filtered_data[
                (filtered_data['signal'] == 'SHORT') & 
                (filtered_data['pnl'] <= 0)
            ]
            if not loss_short.empty:
                fig.add_trace(go.Scatter(
                    x=loss_short['timestamp'],
                    y=loss_short['spot_price'],
                    mode='markers',
                    marker=dict(symbol='triangle-down', size=10, color='red'),
                    name='Loss SHORT'
                ))
            
            fig.update_layout(
                title='–¶–µ–Ω–∞ —Å–ø–æ—Ç–∞ –∏ SMA',
                xaxis_title='–í—Ä–µ–º—è',
                yaxis_title='–¶–µ–Ω–∞',
                hovermode='x unified',
                height=500
            )
            
            # –í–∫–ª—é—á–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            fig.update_xaxes(fixedrange=False)
            fig.update_yaxes(fixedrange=False)
            
            return fig
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã: {e}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã: {e}")
            return None
    
    def create_zscore_chart(self, start_time, end_time):
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ z-score"""
        try:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
            filtered_data = self.data[
                (self.data['timestamp'] >= start_time) & 
                (self.data['timestamp'] <= end_time)
            ].copy()
            
            if filtered_data.empty:
                return None
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = go.Figure()
            
            # –õ–∏–Ω–∏—è z-score
            fig.add_trace(go.Scatter(
                x=filtered_data['timestamp'],
                y=filtered_data['combined_z_score'],
                mode='lines',
                name='Combined Z-Score',
                line=dict(color='purple', width=2)
            ))
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–æ—Ä–æ–≥–æ–≤
            fig.add_hline(y=2.0, line_dash="dash", line_color="red", 
                         annotation_text="–ü–æ—Ä–æ–≥ +2.0")
            fig.add_hline(y=-2.0, line_dash="dash", line_color="green",
                         annotation_text="–ü–æ—Ä–æ–≥ -2.0")
            fig.add_hline(y=0, line_dash="dot", line_color="gray")
            
            fig.update_layout(
                title='Combined Z-Score',
                xaxis_title='–í—Ä–µ–º—è',
                yaxis_title='Z-Score',
                hovermode='x unified',
                height=300
            )
            
            # –í–∫–ª—é—á–∞–µ–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            fig.update_xaxes(fixedrange=False)
            fig.update_yaxes(fixedrange=False)
            
            return fig
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ z-score: {e}")
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ z-score: {e}")
            return None
    
    def run_dashboard(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥"""
        st.set_page_config(
            page_title="MVP Strategy Dashboard",
            page_icon="üìä",
            layout="wide"
        )
        
        st.title("üìä –í–∏–∑—É–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è MVP-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º run_id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        if 'run_id' in self.data.columns and not self.data['run_id'].isna().all():
            run_id = self.data['run_id'].iloc[0]
            st.markdown(f"**Run ID:** `{run_id}`")
        
        st.markdown("–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
            if self.load_data(force_reload=True):
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                st.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not self.load_data():
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö
        min_time = self.data['timestamp'].min()
        max_time = self.data['timestamp'].max()
        
        # –í–∏–¥–∂–µ—Ç —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        st.subheader("üïí –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
        start_time, end_time = st.slider(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:",
            min_value=min_time.to_pydatetime(),
            max_value=max_time.to_pydatetime(),
            value=(min_time.to_pydatetime(), max_time.to_pydatetime()),
            format="YYYY-MM-DD HH:mm"
        )
        
        # –í–∏–¥–∂–µ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ SMA
        st.subheader("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
        sma_period = st.slider("–ü–µ—Ä–∏–æ–¥ SMA", min_value=5, max_value=50, value=20, step=1)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        st.subheader("üìà –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # –ì–ª–∞–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã –∏ SMA
        price_fig = self.create_price_chart(start_time, end_time, sma_period)
        if price_fig:
            st.plotly_chart(price_fig, use_container_width=True)
        
        # –ì—Ä–∞—Ñ–∏–∫ z-score
        zscore_fig = self.create_zscore_chart(start_time, end_time)
        if zscore_fig:
            st.plotly_chart(zscore_fig, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º
        st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–¥–µ–ª–∫–∞–º")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        filtered_data = self.data[
            (self.data['timestamp'] >= start_time) & 
            (self.data['timestamp'] <= end_time)
        ].copy()
        
        if not filtered_data.empty:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_trades = len(filtered_data)
            profitable_trades = len(filtered_data[filtered_data['pnl'] > 0])
            loss_trades = len(filtered_data[filtered_data['pnl'] <= 0])
            win_rate = profitable_trades / total_trades if total_trades > 0 else 0
            total_pnl = filtered_data['pnl'].sum()
            
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                st.metric("–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫", total_trades)
            
            with col2:
                st.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", profitable_trades)
            
            with col3:
                st.metric("–£–±—ã—Ç–æ—á–Ω—ã—Ö", loss_trades)
            
            with col4:
                st.metric("Win Rate", f"{win_rate:.1%}")
            
            with col5:
                st.metric("–û–±—â–∏–π P&L", f"{total_pnl:.2f} USD")
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤
            st.subheader("üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Ç–∏–ø–∞–º —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # LONG —Å–∏–≥–Ω–∞–ª—ã
            long_signals = filtered_data[filtered_data['signal'] == 'LONG']
            if not long_signals.empty:
                long_profitable = len(long_signals[long_signals['pnl'] > 0])
                long_loss = len(long_signals[long_signals['pnl'] <= 0])
                long_win_rate = long_profitable / len(long_signals) if len(long_signals) > 0 else 0
                long_pnl = long_signals['pnl'].sum()
                
                st.write("**LONG —Å–∏–≥–Ω–∞–ª—ã:**")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ", len(long_signals))
                
                with col2:
                    st.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", long_profitable)
                
                with col3:
                    st.metric("Win Rate", f"{long_win_rate:.1%}")
                
                with col4:
                    st.metric("P&L", f"{long_pnl:.2f} USD")
            
            # SHORT —Å–∏–≥–Ω–∞–ª—ã
            short_signals = filtered_data[filtered_data['signal'] == 'SHORT']
            if not short_signals.empty:
                short_profitable = len(short_signals[short_signals['pnl'] > 0])
                short_loss = len(short_signals[short_signals['pnl'] <= 0])
                short_win_rate = short_profitable / len(short_signals) if len(short_signals) > 0 else 0
                short_pnl = short_signals['pnl'].sum()
                
                st.write("**SHORT —Å–∏–≥–Ω–∞–ª—ã:**")
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("–í—Å–µ–≥–æ", len(short_signals))
                
                with col2:
                    st.metric("–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö", short_profitable)
                
                with col3:
                    st.metric("Win Rate", f"{short_win_rate:.1%}")
                
                with col4:
                    st.metric("P&L", f"{short_pnl:.2f} USD")
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫
            st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ —Å–¥–µ–ª–æ–∫")
            display_df = filtered_data[[
                'timestamp', 'signal', 'entry_price', 'exit_price', 'pnl', 'pnl_percent'
            ]].copy()
            display_df['timestamp'] = display_df['timestamp'].dt.strftime('%Y-%m-%d %H:%M')
            display_df['entry_price'] = display_df['entry_price'].round(2)
            display_df['exit_price'] = display_df['exit_price'].round(2)
            display_df['pnl'] = display_df['pnl'].round(2)
            display_df['pnl_percent'] = display_df['pnl_percent'].round(4)
            
            st.dataframe(display_df, use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        dashboard = MVPCashboard()
        dashboard.run_dashboard()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")

if __name__ == "__main__":
    main()