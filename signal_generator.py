import pandas as pd
import sqlite3
import numpy as np
from datetime import datetime, timedelta
from logger import get_logger
import os

logger = get_logger()

class SignalGenerator:
    def __init__(self):
        self.signals = []
        self.db_path = 'data/options_enriched.db'
        
    def load_aggregated_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ IV, Skew, OI"""
        try:
            df = pd.read_csv('iv_aggregates_sample.csv')
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def load_trend_signals(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
        try:
            df = pd.read_csv('trend_signals.csv')
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return pd.DataFrame()
    
    def load_entry_points(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞"""
        try:
            df = pd.read_csv('entry_points.csv')
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞")
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞: {e}")
            return pd.DataFrame()
    
    def combine_data(self, agg_data, trend_data, entry_data):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º"""
        combined_data = []
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        trend_dict = {}
        for _, row in trend_data.iterrows():
            timeframe = row['timeframe']
            if timeframe not in trend_dict:
                trend_dict[timeframe] = {}
            trend_dict[timeframe][row['timestamp']] = row
        
        entry_dict = {}
        for _, row in entry_data.iterrows():
            entry_dict[row['timestamp']] = row
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for _, agg_row in agg_data.iterrows():
            timestamp = agg_row['timestamp']
            timeframe = agg_row['timeframe']
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–Ω–¥
            trend_info = None
            if timeframe in trend_dict:
                # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç—Ä–µ–Ω–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                trend_times = list(trend_dict[timeframe].keys())
                if trend_times:
                    # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —Ç—Ä–µ–Ω–¥ (–Ω–µ –ø–æ–∑–∂–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
                    valid_trends = [t for t in trend_times if t <= timestamp]
                    if valid_trends:
                        nearest_trend_time = max(valid_trends)
                        trend_info = trend_dict[timeframe][nearest_trend_time]
            
            # –ò—â–µ–º —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
            entry_info = entry_dict.get(timestamp)
            
            # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            combined_record = {
                'timestamp': timestamp,
                'timeframe': timeframe,
                'underlying_price': agg_row.get('underlying_price'),
                'iv_mean_all': agg_row.get('iv_mean_all'),
                'iv_call_mean': agg_row.get('iv_call_mean'),
                'iv_put_mean': agg_row.get('iv_put_mean'),
                'skew': agg_row.get('skew'),
                'oi_ratio': agg_row.get('oi_ratio'),
                'skew_percentile': agg_row.get('skew_percentile'),
                'trend_direction': trend_info['direction'] if trend_info is not None else None,
                'trend_confidence': trend_info['confidence'] if trend_info is not None else None,
                'trend_reason': trend_info['reason'] if trend_info is not None else None,
                'entry_direction': entry_info['direction'] if entry_info is not None else None,
                'entry_confidence': entry_info['confidence'] if entry_info is not None else None,
                'entry_reason': entry_info['reason'] if entry_info is not None else None,
                'iv_spike': entry_info['iv_spike'] if entry_info is not None else None
            }
            
            combined_data.append(combined_record)
        
        return pd.DataFrame(combined_data)
    
    def generate_signals(self, combined_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        signals = []
        
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(combined_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        for _, row in combined_data.iterrows():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if pd.isna(row['underlying_price']) or pd.isna(row['iv_mean_all']):
                continue
            
            signal = None
            confidence = 0.0
            reason = []
            
            # 1. –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É (15m –∏ 1h)
            if row['trend_direction']:
                if row['trend_direction'] == 'BUY':
                    signal = 'BUY'
                    confidence += row['trend_confidence'] * 0.4  # 40% –≤–µ—Å–∞
                    reason.append(f"Trend: {row['trend_direction']} (conf: {row['trend_confidence']:.2f})")
                elif row['trend_direction'] == 'SELL':
                    signal = 'SELL'
                    confidence += row['trend_confidence'] * 0.4  # 40% –≤–µ—Å–∞
                    reason.append(f"Trend: {row['trend_direction']} (conf: {row['trend_confidence']:.2f})")
            
            # 2. –§–∏–ª—å—Ç—Ä –ø–æ IV –∏ Skew (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –¥–µ–º–æ)
            if not pd.isna(row['skew']):
                if row['skew'] > 0.01:  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π skew (—Å–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–ª—ã)
                    if signal == 'BUY':
                        confidence += 0.3  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        reason.append(f"Skew bullish: {row['skew']:.4f}")
                    elif signal is None:
                        signal = 'BUY'
                        confidence += 0.3
                        reason.append(f"Skew bullish: {row['skew']:.4f}")
                elif row['skew'] < -0.01:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π skew (—Å–ø—Ä–æ—Å –Ω–∞ –ø—É—Ç—ã)
                    if signal == 'SELL':
                        confidence += 0.3  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                        reason.append(f"Skew bearish: {row['skew']:.4f}")
                    elif signal is None:
                        signal = 'SELL'
                        confidence += 0.3
                        reason.append(f"Skew bearish: {row['skew']:.4f}")
            
            # 3. –§–∏–ª—å—Ç—Ä –ø–æ OI (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
            if not pd.isna(row['oi_ratio']):
                if row['oi_ratio'] > 0.55:  # –ë–æ–ª—å—à–µ –∫–æ–ª–ª–æ–≤
                    if signal == 'BUY':
                        confidence += 0.2
                        reason.append(f"OI call-heavy: {row['oi_ratio']:.2f}")
                    elif signal is None:
                        signal = 'BUY'
                        confidence += 0.2
                        reason.append(f"OI call-heavy: {row['oi_ratio']:.2f}")
                elif row['oi_ratio'] < 0.45:  # –ë–æ–ª—å—à–µ –ø—É—Ç–æ–≤
                    if signal == 'SELL':
                        confidence += 0.2
                        reason.append(f"OI put-heavy: {row['oi_ratio']:.2f}")
                    elif signal is None:
                        signal = 'SELL'
                        confidence += 0.2
                        reason.append(f"OI put-heavy: {row['oi_ratio']:.2f}")
            
            # 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –º–∏–Ω—É—Ç–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É
            if row['entry_direction'] and row['entry_direction'] == signal:
                confidence += row['entry_confidence'] * 0.1  # 10% –≤–µ—Å–∞
                reason.append(f"1m confirmation: {row['entry_direction']}")
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º confidence –¥–æ 0-1
            confidence = min(1.0, max(0.0, confidence))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ confidence >= 0.25 (—Å–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–µ–º–æ)
            if signal and confidence >= 0.25:
                signals.append({
                    'timestamp': row['timestamp'].isoformat(),
                    'signal': signal,
                    'confidence': round(confidence, 3),
                    'reason': ' | '.join(reason),
                    'underlying_price': row['underlying_price'],
                    'timeframe': row['timeframe'],
                    'iv_mean_all': row['iv_mean_all'],
                    'skew': row['skew'],
                    'oi_ratio': row['oi_ratio'],
                    'trend_direction': row['trend_direction'],
                    'trend_confidence': row['trend_confidence'],
                    'entry_direction': row['entry_direction'],
                    'entry_confidence': row['entry_confidence']
                })
        
        return signals
    
    def save_signals(self, signals):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ CSV —Ñ–∞–π–ª"""
        if signals:
            df = pd.DataFrame(signals)
            df.to_csv('signals.csv', index=False)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ signals.csv")
            return df
        else:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return pd.DataFrame()
    
    def generate_statistics(self, signals_df):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–∏–≥–Ω–∞–ª–∞–º"""
        if signals_df.empty:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats = {
            'total_signals': len(signals_df),
            'buy_signals': len(signals_df[signals_df['signal'] == 'BUY']),
            'sell_signals': len(signals_df[signals_df['signal'] == 'SELL']),
            'avg_confidence': signals_df['confidence'].mean(),
            'avg_iv': signals_df['iv_mean_all'].mean(),
            'avg_skew': signals_df['skew'].mean(),
            'avg_oi_ratio': signals_df['oi_ratio'].mean()
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º
        timeframe_stats = signals_df.groupby('timeframe').agg({
            'signal': 'count',
            'confidence': 'mean',
            'iv_mean_all': 'mean',
            'skew': 'mean'
        }).round(3)
        
        logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        logger.info(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {stats['total_signals']}")
        logger.info(f"   BUY: {stats['buy_signals']}, SELL: {stats['sell_signals']}")
        logger.info(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats['avg_confidence']:.3f}")
        logger.info(f"   –°—Ä–µ–¥–Ω—è—è IV: {stats['avg_iv']:.3f}")
        logger.info(f"   –°—Ä–µ–¥–Ω–∏–π Skew: {stats['avg_skew']:.4f}")
        logger.info(f"   –°—Ä–µ–¥–Ω–∏–π OI ratio: {stats['avg_oi_ratio']:.3f}")
        
        logger.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º:")
        for timeframe, data in timeframe_stats.iterrows():
            logger.info(f"   {timeframe}: {data['signal']} —Å–∏–≥–Ω–∞–ª–æ–≤, conf: {data['confidence']:.3f}")
        
        return stats
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        agg_data = self.load_aggregated_data()
        trend_data = self.load_trend_signals()
        entry_data = self.load_entry_points()
        
        if agg_data.empty:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        combined_data = self.combine_data(agg_data, trend_data, entry_data)
        logger.info(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(combined_data)} –∑–∞–ø–∏—Å–µ–π")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = self.generate_signals(combined_data)
        logger.info(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals_df = self.save_signals(signals)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if not signals_df.empty:
            self.generate_statistics(signals_df)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for i, signal in enumerate(signals[:3]):  # –ü–µ—Ä–≤—ã–µ 3 —Å–∏–≥–Ω–∞–ª–∞
                logger.info(f"   {i+1}. [{signal['timestamp']}] {signal['signal']} | "
                           f"Conf: {signal['confidence']:.3f} | "
                           f"Price: {signal['underlying_price']} | "
                           f"Reason: {signal['reason'][:50]}...")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")

if __name__ == "__main__":
    generator = SignalGenerator()
    generator.run()
