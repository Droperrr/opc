#!/usr/bin/env python3
"""
Historical Basis Data Collector for SOL Futures
Collects historical basis data (futures-spot spread) for the 2025 period
"""

import requests
import sqlite3
import pandas as pd
import time
import logging
import argparse
from datetime import datetime, timedelta
import os
from typing import List, Dict, Optional
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('historical_basis_collection.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HistoricalBasisCollector:
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        self.db_path = db_path
        self.base_url = 'https://api.bybit.com'
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
        self.RATE_LIMIT_DELAY = 0.2  # 200ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.MAX_RETRIES = 3
        self.BACKOFF_FACTOR = 2
        
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS historical_basis_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    futures_price REAL,
                    spot_price REAL,
                    basis_abs REAL,
                    basis_rel REAL,
                    funding_rate REAL,
                    open_interest REAL,
                    volume_24h REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(time, symbol)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö basis –¥–∞–Ω–Ω—ã—Ö (–ø–æ –¥–Ω—è–º)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS basis_agg_historical (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    basis_rel REAL,
                    basis_abs REAL,
                    funding_rate REAL,
                    oi_total REAL,
                    volume_total REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(time, timeframe)
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_historical_basis_time ON historical_basis_data(time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_historical_basis_symbol ON historical_basis_data(symbol)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_basis_agg_historical_time ON basis_agg_historical(time)')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_futures_symbols(self, base_coin='SOL', return_all=False):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –¥–ª—è SOL."""
        logger.info(f"üîç –ü–æ–∏—Å–∫ —Ñ—å—é—á–µ—Ä—Å–æ–≤ –¥–ª—è {base_coin}")
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
            params = {'category': 'linear', 'baseCoin': base_coin}
            
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {self.base_url}/v5/market/instruments-info")
            response = self.session.get(f'{self.base_url}/v5/market/instruments-info', params=params, headers=headers, timeout=10)
            
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP {response.status_code}: {response.text}")
                return None
                
            response_data = response.json()
            if 'result' in response_data and 'list' in response_data['result']:
                symbols = [item['symbol'] for item in response_data['result']['list'] if item['status'] == 'Trading']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–æ–≤ –¥–ª—è {base_coin}")
                if symbols:
                    logger.info(f"üéØ –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {symbols[:5]}")
                return symbols if return_all else (symbols[0] if symbols else None)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {response_data}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return None
    
    def get_historical_kline_data(self, symbol: str, interval: str, 
                                 start_time: str, end_time: str, limit: int = 1000) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤"""
        try:
            url = f"{self.base_url}/v5/market/kline"
            
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': interval,
                'start': start_time,
                'end': end_time,
                'limit': limit
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {symbol} {interval} {start_time} - {end_time}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data['retCode'] != 0:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {data['retMsg']}")
                return None
            
            return data['result']['list']
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def get_funding_rate(self, symbol: str, start_time: str, end_time: str) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö funding rate"""
        try:
            url = f"{self.base_url}/v5/market/funding/history"
            
            params = {
                'category': 'linear',
                'symbol': symbol,
                'startTime': start_time,
                'endTime': end_time,
                'limit': 200
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å funding rate: {symbol} {start_time} - {end_time}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data['retCode'] != 0:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {data['retMsg']}")
                return None
            
            return data['result']['list']
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ funding rate: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ funding rate: {e}")
            return None
    
    def get_open_interest(self, symbol: str, start_time: str, end_time: str) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö open interest"""
        try:
            url = f"{self.base_url}/v5/market/open-interest"
            
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': '1d',
                'startTime': start_time,
                'endTime': end_time,
                'limit': 200
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å open interest: {symbol} {start_time} - {end_time}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data['retCode'] != 0:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {data['retMsg']}")
                return None
            
            return data['result']['list']
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ open interest: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ open interest: {e}")
            return None
    
    def collect_historical_basis_data(self, start_date: str, end_date: str, max_symbols: int = 20):
        """–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ SOL"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤
            symbols = self.get_futures_symbols('SOL', return_all=True)
            if not symbols:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ —Ñ—å—é—á–µ—Ä—Å–æ–≤")
                return False
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
            if max_symbols:
                symbols = symbols[:max_symbols]
                logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–±–æ—Ä –¥–æ {max_symbols} —Å–∏–º–≤–æ–ª–æ–≤")
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            total_records = 0
            
            for i, symbol in enumerate(symbols, 1):
                logger.info(f"üìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(symbols)}: {symbol}")
                
                try:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ timestamp
                    start_ts = int(datetime.strptime(start_date, '%Y-%m-%d').timestamp() * 1000)
                    end_ts = int(datetime.strptime(end_date, '%Y-%m-%d').timestamp() * 1000)
                    
                    current_ts = start_ts
                    
                    while current_ts < end_ts:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π timestamp (1 –¥–µ–Ω—å)
                        next_ts = current_ts + (1000 * 24 * 60 * 60 * 1000)  # +1 –¥–µ–Ω—å
                        if next_ts > end_ts:
                            next_ts = end_ts
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å–æ–≤
                        futures_kline_data = self.get_historical_kline_data(
                            symbol, 'D', str(current_ts), str(next_ts)
                        )
                        
                        if futures_kline_data:
                            for candle in futures_kline_data:
                                try:
                                    timestamp = int(candle[0])
                                    time_str = datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')
                                    futures_price = float(candle[4])  # close price
                                    volume_24h = float(candle[5])
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ç–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                                    spot_query = """
                                    SELECT close FROM spot_data 
                                    WHERE time <= ? AND timeframe = '1m'
                                    ORDER BY time DESC LIMIT 1
                                    """
                                    cursor.execute(spot_query, [time_str])
                                    spot_result = cursor.fetchone()
                                    
                                    if not spot_result:
                                        continue
                                    
                                    spot_price = float(spot_result[0])
                                    
                                    # –í—ã—á–∏—Å–ª—è–µ–º basis
                                    basis_abs = futures_price - spot_price
                                    basis_rel = basis_abs / spot_price if spot_price > 0 else 0
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º funding rate –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                                    funding_rate = 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                    try:
                                        funding_data = self.get_funding_rate(symbol, str(timestamp), str(timestamp + 86400000))
                                        if funding_data:
                                            funding_rate = float(funding_data[0]['fundingRate']) if funding_data[0]['fundingRate'] != '0' else 0.0
                                    except:
                                        pass
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º open interest –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                                    open_interest = 0.0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                    try:
                                        oi_data = self.get_open_interest(symbol, str(timestamp), str(timestamp + 86400000))
                                        if oi_data:
                                            open_interest = float(oi_data[0]['openInterest']) if oi_data[0]['openInterest'] != '0' else 0.0
                                    except:
                                        pass
                                    
                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                    cursor.execute('''
                                        INSERT OR REPLACE INTO historical_basis_data 
                                        (time, symbol, futures_price, spot_price, basis_abs, basis_rel, 
                                         funding_rate, open_interest, volume_24h)
                                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                                    ''', (
                                        time_str, symbol, futures_price, spot_price, basis_abs, basis_rel,
                                        funding_rate, open_interest, volume_24h
                                    ))
                                    
                                    total_records += 1
                                    
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                                    continue
                            
                            conn.commit()
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(futures_kline_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
                        
                        # –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
                        current_ts = next_ts
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                        time.sleep(self.RATE_LIMIT_DELAY)
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                    continue
            
            conn.close()
            logger.info(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö: {total_records} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def aggregate_basis_data(self, start_date: str, end_date: str):
        """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ basis –¥–∞–Ω–Ω—ã–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            logger.info(f"üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è basis –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
            
            conn = sqlite3.connect(self.db_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ basis –¥–∞–Ω–Ω—ã–µ
            query = """
            SELECT 
                time,
                basis_rel,
                basis_abs,
                funding_rate,
                open_interest,
                volume_24h
            FROM historical_basis_data 
            WHERE time BETWEEN ? AND ?
            ORDER BY time
            """
            
            df = pd.read_sql_query(query, conn, params=[start_date, end_date])
            
            if df.empty:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
                return False
            
            df['time'] = pd.to_datetime(df['time'])
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            df['date'] = df['time'].dt.date
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            daily_basis = df.groupby('date').agg({
                'basis_rel': ['mean', 'std', 'min', 'max'],
                'basis_abs': ['mean', 'std', 'min', 'max'],
                'funding_rate': 'mean',
                'open_interest': 'sum',
                'volume_24h': 'sum'
            }).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            daily_basis.columns = ['date', 'basis_rel_mean', 'basis_rel_std', 'basis_rel_min', 'basis_rel_max',
                                 'basis_abs_mean', 'basis_abs_std', 'basis_abs_min', 'basis_abs_max',
                                 'funding_rate', 'oi_total', 'volume_total']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor = conn.cursor()
            
            for _, row in daily_basis.iterrows():
                time_str = row['date'].strftime('%Y-%m-%d %H:%M:%S')
                
                cursor.execute('''
                    INSERT OR REPLACE INTO basis_agg_historical 
                    (time, timeframe, basis_rel, basis_abs, funding_rate, oi_total, volume_total)
                    VALUES (?, ?, ?, ?, ?, ?, ?)
                ''', (
                    time_str, '1d', row['basis_rel_mean'], row['basis_abs_mean'], 
                    row['funding_rate'], row['oi_total'], row['volume_total']
                ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(daily_basis)} –¥–Ω–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ basis –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description='–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö SOL —Ñ—å—é—á–µ—Ä—Å–æ–≤')
    parser.add_argument('--start', required=True,
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--end', required=True,
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--max-symbols', type=int, default=20,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞')
    parser.add_argument('--db', default='data/sol_iv.db',
                       help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--aggregate-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫
    collector = HistoricalBasisCollector(args.db)
    
    if args.aggregate_only:
        # –¢–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        success = collector.aggregate_basis_data(args.start, args.end)
    else:
        # –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        success = collector.collect_historical_basis_data(args.start, args.end, args.max_symbols)
        if success:
            success = collector.aggregate_basis_data(args.start, args.end)
    
    if success:
        logger.info("‚úÖ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö basis –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
