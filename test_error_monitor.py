#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –¥–ª—è Error Monitor
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sys
import os
import unittest
import sqlite3
import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from error_monitor import ErrorMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestErrorMonitor(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è Error Monitor"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        import uuid
        self.test_db = f'test_error_monitor_{uuid.uuid4().hex[:8]}.db'
        if os.path.exists(self.test_db):
            os.remove(self.test_db)
        
        self.monitor = ErrorMonitor(self.test_db)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.test_timestamp = datetime.now()
        self.test_predicted = 100.5
        self.test_actual = 101.0
        self.test_volatility = 0.01
        self.test_formula_id = 'F01'
        self.test_confidence = 0.8
        self.test_method = 'simple_moving_average'
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        try:
            if os.path.exists(self.test_db):
                os.remove(self.test_db)
        except PermissionError:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
            pass
    
    def test_database_initialization(self):
        """–¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        with sqlite3.connect(self.test_db) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É error_history
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='error_history'")
            result = cursor.fetchone()
            self.assertIsNotNone(result, "–¢–∞–±–ª–∏—Ü–∞ error_history –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É error_statistics
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='error_statistics'")
            result = cursor.fetchone()
            self.assertIsNotNone(result, "–¢–∞–±–ª–∏—Ü–∞ error_statistics –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
            cursor.execute("SELECT name FROM sqlite_master WHERE type='index'")
            indexes = [row[0] for row in cursor.fetchall()]
            
            expected_indexes = ['idx_error_timestamp', 'idx_error_formula', 'idx_error_method']
            for idx in expected_indexes:
                self.assertIn(idx, indexes, f"–ò–Ω–¥–µ–∫—Å {idx} –Ω–µ —Å–æ–∑–¥–∞–Ω")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ‚Üí PASSED")
    
    def test_error_update(self):
        """–¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        self.monitor.update(
            self.test_timestamp, self.test_predicted, self.test_actual,
            self.test_volatility, self.test_formula_id, self.test_confidence, self.test_method
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        with sqlite3.connect(self.test_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM error_history")
            count = cursor.fetchone()[0]
            self.assertEqual(count, 1, "–û—à–∏–±–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            cursor.execute("SELECT * FROM error_history")
            row = cursor.fetchone()
            
            self.assertIsNotNone(row, "–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            self.assertEqual(row[2], self.test_formula_id, "–ù–µ–≤–µ—Ä–Ω—ã–π formula_id")
            self.assertEqual(row[3], self.test_predicted, "–ù–µ–≤–µ—Ä–Ω–æ–µ predicted")
            self.assertEqual(row[4], self.test_actual, "–ù–µ–≤–µ—Ä–Ω–æ–µ actual")
            self.assertEqual(row[8], self.test_volatility, "–ù–µ–≤–µ—Ä–Ω–∞—è volatility")
            self.assertEqual(row[9], self.test_confidence, "–ù–µ–≤–µ—Ä–Ω–∞—è confidence")
            self.assertEqual(row[10], self.test_method, "–ù–µ–≤–µ—Ä–Ω—ã–π method")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ ‚Üí PASSED")
    
    def test_error_calculation(self):
        """–¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –æ—à–∏–±–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É
        self.monitor.update(
            self.test_timestamp, self.test_predicted, self.test_actual,
            self.test_volatility, self.test_formula_id, self.test_confidence, self.test_method
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –æ—à–∏–±–æ–∫
        with sqlite3.connect(self.test_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT error_absolute, error_relative, error_normalized FROM error_history")
            row = cursor.fetchone()
            
            error_abs, error_rel, error_norm = row
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—É—é –æ—à–∏–±–∫—É
            expected_abs = abs(self.test_predicted - self.test_actual)
            self.assertAlmostEqual(error_abs, expected_abs, places=4)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –æ—à–∏–±–∫—É
            expected_rel = expected_abs / self.test_actual
            self.assertAlmostEqual(error_rel, expected_rel, places=4)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
            expected_norm = expected_abs / self.test_volatility
            self.assertAlmostEqual(error_norm, expected_norm, places=4)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 3: –†–∞—Å—á–µ—Ç –æ—à–∏–±–æ–∫ ‚Üí PASSED")
    
    def test_get_errors_filtering(self):
        """–¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—à–∏–±–æ–∫
        timestamps = [
            datetime.now() - timedelta(hours=i)
            for i in range(5)
        ]
        
        for i, timestamp in enumerate(timestamps):
            self.monitor.update(
                timestamp, 100.0 + i, 100.5 + i, 0.01,
                f'F{i:02d}', 0.8, 'sma'
            )
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–æ—Ä–º—É–ª–µ
        errors_f01 = self.monitor.get_errors(formula_id='F00')
        self.assertEqual(len(errors_f01), 1, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        start_time = datetime.now() - timedelta(hours=3)
        errors_recent = self.monitor.get_errors(start_time=start_time)
        self.assertGreaterEqual(len(errors_recent), 3, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        
        # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –º–µ—Ç–æ–¥—É
        errors_sma = self.monitor.get_errors(method='sma')
        self.assertEqual(len(errors_sma), 5, "–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–µ—Ç–æ–¥—É")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 4: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ ‚Üí PASSED")
    
    def test_error_statistics(self):
        """–¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = [
            (100.0, 100.5, 0.5),   # –û—à–∏–±–∫–∞ 0.5
            (101.0, 101.2, 0.2),   # –û—à–∏–±–∫–∞ 0.2
            (102.0, 101.8, 0.2),   # –û—à–∏–±–∫–∞ 0.2
            (103.0, 103.5, 0.5),   # –û—à–∏–±–∫–∞ 0.5
            (104.0, 104.1, 0.1),   # –û—à–∏–±–∫–∞ 0.1
        ]
        
        for i, (predicted, actual, volatility) in enumerate(test_data):
            timestamp = datetime.now() - timedelta(hours=i)
            self.monitor.update(
                timestamp, predicted, actual, volatility,
                'F01', 0.8, 'sma'
            )
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics = self.monitor.calculate_error_statistics('F01', 'sma', 1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        self.assertIn('total_predictions', statistics)
        self.assertEqual(statistics['total_predictions'], 5)
        
        self.assertIn('mae', statistics)
        expected_mae = (0.5 + 0.2 + 0.2 + 0.5 + 0.1) / 5
        self.assertAlmostEqual(statistics['mae'], expected_mae, places=4)
        
        self.assertIn('max_error', statistics)
        self.assertEqual(statistics['max_error'], 0.5)
        
        self.assertIn('min_error', statistics)
        self.assertAlmostEqual(statistics['min_error'], 0.1, places=4)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫ ‚Üí PASSED")
    
    def test_daily_statistics_update(self):
        """–¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        start_of_day = datetime.combine(today, datetime.min.time())
        
        for i in range(3):
            timestamp = start_of_day + timedelta(hours=i)
            self.monitor.update(
                timestamp, 100.0 + i, 100.5 + i, 0.01,
                'F01', 0.8, 'sma'
            )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.monitor.update_daily_statistics('F01', 'sma')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
        with sqlite3.connect(self.test_db) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM error_statistics")
            count = cursor.fetchone()[0]
            self.assertEqual(count, 1, "–î–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            cursor.execute("SELECT * FROM error_statistics")
            row = cursor.fetchone()
            
            self.assertEqual(row[1], 'F01', "–ù–µ–≤–µ—Ä–Ω—ã–π formula_id –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
            self.assertEqual(row[2], 'sma', "–ù–µ–≤–µ—Ä–Ω—ã–π method –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ")
            self.assertEqual(row[4], 3, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 6: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ‚Üí PASSED")
    
    def test_error_summary(self):
        """–¢–µ—Å—Ç 7: –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º"""
        logger.info("üß™ –¢–µ—Å—Ç 7: –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        formulas = ['F01', 'F02', 'F03']
        methods = ['sma', 'wma', 'ar']
        
        for i in range(9):
            timestamp = datetime.now() - timedelta(hours=i)
            formula = formulas[i % len(formulas)]
            method = methods[i % len(methods)]
            
            self.monitor.update(
                timestamp, 100.0 + i, 100.5 + i, 0.01,
                formula, 0.8, method
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = self.monitor.get_error_summary(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        self.assertIn('total_predictions', summary)
        self.assertEqual(summary['total_predictions'], 9)
        
        self.assertIn('unique_formulas', summary)
        self.assertEqual(summary['unique_formulas'], 3)
        
        self.assertIn('unique_methods', summary)
        self.assertEqual(summary['unique_methods'], 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º
        self.assertIn('formula_statistics', summary)
        formula_stats = summary['formula_statistics']
        self.assertEqual(len(formula_stats), 3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–µ—Ç–æ–¥–∞–º
        self.assertIn('method_statistics', summary)
        method_stats = summary['method_statistics']
        self.assertEqual(len(method_stats), 3)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 7: –°–≤–æ–¥–∫–∞ –ø–æ –æ—à–∏–±–∫–∞–º ‚Üí PASSED")
    
    def test_edge_cases(self):
        """–¢–µ—Å—Ç 8: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 8: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏")
        
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        self.monitor.update(
            datetime.now(), 0.0, 0.0, 0.0, 'F01', 0.0, 'sma'
        )
        
        # –¢–µ—Å—Ç —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        self.monitor.update(
            datetime.now(), 1e6, 1e6 + 100, 0.01, 'F01', 0.8, 'sma'
        )
        
        # –¢–µ—Å—Ç —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        self.monitor.update(
            datetime.now(), -100.0, -99.5, 0.01, 'F01', 0.8, 'sma'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        errors_df = self.monitor.get_errors()
        self.assertEqual(len(errors_df), 3, "–ù–µ –≤—Å–µ –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics = self.monitor.calculate_error_statistics('F01', 'sma', 1)
        self.assertIn('total_predictions', statistics)
        self.assertEqual(statistics['total_predictions'], 3)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 8: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ ‚Üí PASSED")
    
    def test_memory_efficiency(self):
        """–¢–µ—Å—Ç 9: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 9: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö
        for i in range(1000):
            timestamp = datetime.now() - timedelta(minutes=i)
            self.monitor.update(
                timestamp, 100.0 + i * 0.01, 100.5 + i * 0.01, 0.01,
                f'F{i % 10:02d}', 0.8, 'sma'
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        errors_df = self.monitor.get_errors()
        self.assertEqual(len(errors_df), 1000, "–ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–æ–≤
        import time
        start_time = time.time()
        
        statistics = self.monitor.calculate_error_statistics('F00', 'sma', 1)
        
        end_time = time.time()
        query_time = end_time - start_time
        
        # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±—ã—Å—Ç—Ä–æ (–º–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã)
        self.assertLess(query_time, 1.0, f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {query_time:.2f}s")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 9: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ ‚Üí PASSED")
    
    def test_data_integrity(self):
        """–¢–µ—Å—Ç 10: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üß™ –¢–µ—Å—Ç 10: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.monitor.update(
            self.test_timestamp, self.test_predicted, self.test_actual,
            self.test_volatility, self.test_formula_id, self.test_confidence, self.test_method
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect(self.test_db) as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
            cursor.execute("SELECT * FROM error_history")
            row = cursor.fetchone()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ª—è—Ö
            self.assertIsNotNone(row[1], "timestamp –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL")
            self.assertIsNotNone(row[3], "prediction –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL")
            self.assertIsNotNone(row[4], "actual –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL")
            self.assertIsNotNone(row[5], "error_absolute –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL")
            self.assertIsNotNone(row[6], "error_relative –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL")
            self.assertIsNotNone(row[7], "error_normalized –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å NULL")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
            self.assertGreaterEqual(row[5], 0, "error_absolute –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            self.assertGreaterEqual(row[6], 0, "error_relative –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
            self.assertGreaterEqual(row[7], 0, "error_normalized –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 10: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö ‚Üí PASSED")

def run_error_monitor_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Error Monitor"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Error Monitor")
    logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    suite = unittest.TestLoader().loadTestsFromTestCase(TestErrorMonitor)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = result.testsRun
    failed_tests = len(result.failures)
    error_tests = len(result.errors)
    passed_tests = total_tests - failed_tests - error_tests
    
    success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
    
    logger.info("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Error Monitor:")
    logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    logger.info(f"   –û—à–∏–±–æ–∫: {error_tests}")
    logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate >= 90:
        logger.info("üéâ –¢–ï–°–¢–´ ERROR MONITOR –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        logger.error("‚ùå –¢–ï–°–¢–´ ERROR MONITOR –ü–†–û–í–ê–õ–ï–ù–´!")
        return False

if __name__ == "__main__":
    success = run_error_monitor_tests()
    sys.exit(0 if success else 1)
