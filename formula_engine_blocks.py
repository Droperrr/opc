#!/usr/bin/env python3
"""
Formula Engine —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Error-Driven Blocks
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ —Å –¥–≤–∏–∂–∫–æ–º —Ñ–æ—Ä–º—É–ª –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import numpy as np
import pandas as pd
import sqlite3
from typing import Dict, List, Optional, Any, Tuple
from datetime import datetime, timedelta
import logging
import json

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from compatibility import safe_float, safe_mean, safe_std, safe_array, safe_divide, safe_sqrt
from block_analyzer import BlockAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class FormulaEngineBlocks:
    """Formula Engine —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–ª–æ–∫–æ–≤"""
    
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Formula Engine —Å –±–ª–æ–∫–∞–º–∏
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_path = db_path
        self.block_analyzer = BlockAnalyzer(db_path)
        self._init_database()
        self._load_formula_templates()
        logger.info(f"üîß FormulaEngineBlocks –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î: {db_path}")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º—É–ª —Å –±–ª–æ–∫–∞–º–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ—Ä–º—É–ª –ø–æ –±–ª–æ–∫–∞–º
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS formula_block_parameters (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        formula_id TEXT NOT NULL,
                        block_id INTEGER NOT NULL,
                        market_regime TEXT NOT NULL,
                        parameters_json TEXT NOT NULL,
                        performance_score REAL NOT NULL,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(formula_id, block_id)
                    )
                ''')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS parameter_optimization (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        formula_id TEXT NOT NULL,
                        block_type TEXT NOT NULL,
                        market_regime TEXT NOT NULL,
                        optimization_method TEXT NOT NULL,
                        best_parameters_json TEXT NOT NULL,
                        optimization_score REAL NOT NULL,
                        optimization_date DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_formula_block 
                    ON formula_block_parameters(formula_id, block_id)
                ''')
                
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_formula_regime 
                    ON formula_block_parameters(formula_id, market_regime)
                ''')
                
                conn.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã Formula Engine —Å –±–ª–æ–∫–∞–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î Formula Engine: {e}")
            raise
    
    def _load_formula_templates(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã —Ñ–æ—Ä–º—É–ª —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        self.formula_templates = {
            'volatility_focused': {
                'base_parameters': {
                    'iv_weight': 1.0,
                    'skew_weight': 0.5,
                    'basis_weight': -0.3,
                    'threshold': 0.7
                },
                'regime_adjustments': {
                    'trending': {'iv_weight': 1.2, 'threshold': 0.6},
                    'volatile': {'iv_weight': 0.8, 'threshold': 0.9},
                    'stable': {'iv_weight': 1.1, 'threshold': 0.5},
                    'transition': {'iv_weight': 0.9, 'threshold': 0.8}
                }
            },
            'basis_dominant': {
                'base_parameters': {
                    'basis_weight': 1.0,
                    'iv_weight': 0.3,
                    'skew_weight': 0.2,
                    'threshold': 0.5
                },
                'regime_adjustments': {
                    'trending': {'basis_weight': 1.3, 'threshold': 0.4},
                    'volatile': {'basis_weight': 0.7, 'threshold': 0.7},
                    'stable': {'basis_weight': 1.1, 'threshold': 0.3},
                    'transition': {'basis_weight': 0.8, 'threshold': 0.6}
                }
            },
            'balanced': {
                'base_parameters': {
                    'iv_weight': 0.6,
                    'skew_weight': 0.6,
                    'basis_weight': 0.6,
                    'threshold': 0.6
                },
                'regime_adjustments': {
                    'trending': {'threshold': 0.5},
                    'volatile': {'threshold': 0.8},
                    'stable': {'threshold': 0.4},
                    'transition': {'threshold': 0.7}
                }
            }
        }
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.formula_templates)} —à–∞–±–ª–æ–Ω–æ–≤ —Ñ–æ—Ä–º—É–ª")
    
    def get_formula_parameters(self, formula_id: str, block_id: Optional[int] = None,
                              market_regime: Optional[str] = None) -> Dict[str, float]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        
        Args:
            formula_id: ID —Ñ–æ—Ä–º—É–ª—ã
            block_id: ID –±–ª–æ–∫–∞ (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
            market_regime: –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º (–µ—Å–ª–∏ None, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            
        Returns:
            Dict[str, float]: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if formula_id not in self.formula_templates:
                logger.warning(f"–§–æ—Ä–º—É–ª–∞ {formula_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return {'threshold': 0.7}
            
            base_params = self.formula_templates[formula_id]['base_parameters'].copy()
            
            # –ï—Å–ª–∏ –±–ª–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if block_id is None:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}")
                return base_params
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            if market_regime is None:
                market_regime = self.block_analyzer.classify_market_regime(block_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
            saved_params = self._get_saved_parameters(formula_id, block_id)
            if saved_params:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}, –±–ª–æ–∫–∞ {block_id}")
                return saved_params
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            adjusted_params = self._apply_regime_adjustments(formula_id, base_params, market_regime)
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–ª–æ–∫–∞
            optimized_params = self._optimize_parameters_for_block(formula_id, block_id, adjusted_params)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            self._save_parameters(formula_id, block_id, market_regime, optimized_params)
            
            logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª—ã {formula_id} –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è –±–ª–æ–∫–∞ {block_id} (—Ä–µ–∂–∏–º: {market_regime})")
            return optimized_params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ—Ä–º—É–ª—ã {formula_id}: {e}")
            return self.formula_templates.get(formula_id, {}).get('base_parameters', {'threshold': 0.7})
    
    def _get_saved_parameters(self, formula_id: str, block_id: int) -> Optional[Dict[str, float]]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã –∏ –±–ª–æ–∫–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT parameters_json FROM formula_block_parameters
                    WHERE formula_id = ? AND block_id = ?
                ''', (formula_id, block_id))
                
                result = cursor.fetchone()
                if result:
                    return json.loads(result[0])
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return None
    
    def _apply_regime_adjustments(self, formula_id: str, base_params: Dict[str, float], 
                                 market_regime: str) -> Dict[str, float]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            adjusted_params = base_params.copy()
            
            if formula_id in self.formula_templates:
                regime_adjustments = self.formula_templates[formula_id]['regime_adjustments']
                
                if market_regime in regime_adjustments:
                    adjustments = regime_adjustments[market_regime]
                    
                    for param, adjustment in adjustments.items():
                        if param in adjusted_params:
                            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É
                            if isinstance(adjustment, (int, float)):
                                adjusted_params[param] = adjustment
                            else:
                                # –ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
                                adjusted_params[param] *= adjustment
            
            logger.debug(f"–ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ {market_regime}")
            return adjusted_params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ —Ä–µ–∂–∏–º–∞: {e}")
            return base_params
    
    def _optimize_parameters_for_block(self, formula_id: str, block_id: int, 
                                     base_params: Dict[str, float]) -> Dict[str, float]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∞
            block_stats = self.block_analyzer.get_block_statistics(block_id)
            
            if not block_stats:
                logger.warning(f"–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ {block_id}, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return base_params
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –±–ª–æ–∫–∞
            errors_data = self._get_block_errors(block_id)
            
            if len(errors_data) < 10:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–∞ {block_id}")
                return base_params
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ –æ—à–∏–±–æ–∫
            optimized_params = base_params.copy()
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫
            mean_error = block_stats['mean_error']
            std_error = block_stats['std_error']
            
            if std_error > 0:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ—Ä–æ–≥
                stability_factor = min(std_error / mean_error, 2.0) if mean_error > 0 else 1.0
                threshold_adjustment = 1.0 + (stability_factor - 1.0) * 0.3
                
                if 'threshold' in optimized_params:
                    optimized_params['threshold'] *= threshold_adjustment
                    optimized_params['threshold'] = min(max(optimized_params['threshold'], 0.1), 2.0)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤–µ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–∞ –æ—à–∏–±–æ–∫
            error_trend = block_stats.get('error_trend', 0.0)
            
            if abs(error_trend) > 0.05:  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ —Ä–∞—Å—Ç—É—Ç, —É–º–µ–Ω—å—à–∞–µ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
                if error_trend > 0:
                    for param in ['iv_weight', 'skew_weight', 'basis_weight']:
                        if param in optimized_params:
                            optimized_params[param] *= 0.9
                else:
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ —É–º–µ–Ω—å—à–∞—é—Ç—Å—è, –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å
                    for param in ['iv_weight', 'skew_weight', 'basis_weight']:
                        if param in optimized_params:
                            optimized_params[param] *= 1.1
            
            logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –±–ª–æ–∫–∞ {block_id}")
            return optimized_params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±–ª–æ–∫–∞ {block_id}: {e}")
            return base_params
    
    def _get_block_errors(self, block_id: int) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∞
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT start_time, end_time FROM blocks WHERE id = ?
                ''', (block_id,))
                
                result = cursor.fetchone()
                if not result:
                    return pd.DataFrame()
                
                start_time, end_time = result
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏
                query = '''
                    SELECT * FROM error_history 
                    WHERE timestamp >= ? AND timestamp <= ?
                    ORDER BY timestamp
                '''
                
                df = pd.read_sql_query(query, conn, params=[start_time, end_time])
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –±–ª–æ–∫–∞ {block_id}: {e}")
            return pd.DataFrame()
    
    def _save_parameters(self, formula_id: str, block_id: int, market_regime: str, 
                        parameters: Dict[str, float]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è –±–ª–æ–∫–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                performance_score = self._calculate_performance_score(formula_id, block_id, parameters)
                
                cursor.execute('''
                    INSERT OR REPLACE INTO formula_block_parameters
                    (formula_id, block_id, market_regime, parameters_json, performance_score)
                    VALUES (?, ?, ?, ?, ?)
                ''', (formula_id, block_id, market_regime, json.dumps(parameters), performance_score))
                
                conn.commit()
            
            logger.debug(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}, –±–ª–æ–∫–∞ {block_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
    
    def _calculate_performance_score(self, formula_id: str, block_id: int, 
                                    parameters: Dict[str, float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∞
            block_stats = self.block_analyzer.get_block_statistics(block_id)
            
            if not block_stats:
                return 0.5
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            mean_error = block_stats['mean_error']
            std_error = block_stats['std_error']
            confidence = block_stats.get('confidence', 0.5)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
            error_score = max(0.0, 1.0 - mean_error / 2.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
            stability_score = max(0.0, 1.0 - std_error / 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏
            performance_score = (error_score + stability_score + confidence) / 3.0
            
            return min(max(performance_score, 0.0), 1.0)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def optimize_parameters_for_regime(self, formula_id: str, market_regime: str,
                                     optimization_method: str = 'grid_search') -> Dict[str, float]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        
        Args:
            formula_id: ID —Ñ–æ—Ä–º—É–ª—ã
            market_regime: –†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            optimization_method: –ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
        Returns:
            Dict[str, float]: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        """
        try:
            logger.info(f"üîß –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}, —Ä–µ–∂–∏–º {market_regime}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            blocks_df = self.block_analyzer.get_blocks()
            regime_blocks = blocks_df[blocks_df['block_type'].str.contains(market_regime, case=False, na=False)]
            
            if len(regime_blocks) == 0:
                logger.warning(f"–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è —Ä–µ–∂–∏–º–∞ {market_regime}")
                return self.formula_templates.get(formula_id, {}).get('base_parameters', {'threshold': 0.7})
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –±–ª–æ–∫–æ–≤
            best_score = 0.0
            best_parameters = None
            
            for _, block in regime_blocks.iterrows():
                block_id = block['id']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–ª–æ–∫–∞
                params = self.get_formula_parameters(formula_id, block_id, market_regime)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É
                score = self._calculate_performance_score(formula_id, block_id, params)
                
                if score > best_score:
                    best_score = score
                    best_parameters = params
            
            if best_parameters is None:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return self.formula_templates.get(formula_id, {}).get('base_parameters', {'threshold': 0.7})
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self._save_optimization_results(formula_id, market_regime, optimization_method, 
                                          best_parameters, best_score)
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: score = {best_score:.3f}")
            return best_parameters
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            return self.formula_templates.get(formula_id, {}).get('base_parameters', {'threshold': 0.7})
    
    def _save_optimization_results(self, formula_id: str, market_regime: str,
                                  optimization_method: str, parameters: Dict[str, float],
                                  score: float):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT INTO parameter_optimization
                    (formula_id, block_type, market_regime, optimization_method, 
                     best_parameters_json, optimization_score)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (formula_id, market_regime, market_regime, optimization_method,
                      json.dumps(parameters), score))
                
                conn.commit()
            
            logger.debug(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    def get_formula_performance_by_regime(self, formula_id: str) -> Dict[str, Dict[str, float]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º
        
        Args:
            formula_id: ID —Ñ–æ—Ä–º—É–ª—ã
            
        Returns:
            Dict[str, Dict[str, float]]: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–∂–∏–º–∞–º
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT market_regime, AVG(performance_score) as avg_score,
                           COUNT(*) as block_count, MAX(performance_score) as max_score
                    FROM formula_block_parameters
                    WHERE formula_id = ?
                    GROUP BY market_regime
                ''', (formula_id,))
                
                results = cursor.fetchall()
                
                performance_by_regime = {}
                for row in results:
                    regime, avg_score, block_count, max_score = row
                    performance_by_regime[regime] = {
                        'average_score': avg_score,
                        'block_count': block_count,
                        'max_score': max_score
                    }
                
                logger.info(f"‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã {formula_id} –ø–æ–ª—É—á–µ–Ω–∞ –ø–æ {len(performance_by_regime)} —Ä–µ–∂–∏–º–∞–º")
                return performance_by_regime
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã: {e}")
            return {}
    
    def get_current_block_parameters(self, formula_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞
        
        Args:
            formula_id: ID —Ñ–æ—Ä–º—É–ª—ã
            
        Returns:
            Dict[str, Any]: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–∫–µ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
            blocks_df = self.block_analyzer.get_blocks()
            
            if len(blocks_df) == 0:
                logger.warning("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤")
                return {
                    'parameters': self.formula_templates.get(formula_id, {}).get('base_parameters', {'threshold': 0.7}),
                    'block_id': None,
                    'market_regime': 'unknown',
                    'confidence': 0.0
                }
            
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫
            latest_block = blocks_df.iloc[-1]
            block_id = latest_block['id']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            market_regime = self.block_analyzer.classify_market_regime(block_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            parameters = self.get_formula_parameters(formula_id, block_id, market_regime)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞
            analysis = self.block_analyzer.analyze_block(block_id)
            
            result = {
                'parameters': parameters,
                'block_id': block_id,
                'market_regime': market_regime,
                'confidence': analysis.confidence,
                'block_type': latest_block['block_type'],
                'risk_level': analysis.risk_level,
                'recommendations': analysis.recommendations
            }
            
            logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã: —Ä–µ–∂–∏–º = {market_regime}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞: {e}")
            return {
                'parameters': self.formula_templates.get(formula_id, {}).get('base_parameters', {'threshold': 0.7}),
                'block_id': None,
                'market_regime': 'unknown',
                'confidence': 0.0
            }

def test_formula_engine_blocks():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Formula Engine —Å –±–ª–æ–∫–∞–º–∏"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Formula Engine —Å –±–ª–æ–∫–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    import uuid
    test_db = f'test_formula_engine_{uuid.uuid4().hex[:8]}.db'
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        engine = FormulaEngineBlocks(test_db)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –∏ –æ—à–∏–±–∫–∏
        with sqlite3.connect(test_db) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS blocks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    start_time DATETIME NOT NULL,
                    end_time DATETIME NOT NULL,
                    start_index INTEGER NOT NULL,
                    end_index INTEGER NOT NULL,
                    block_type TEXT NOT NULL,
                    confidence REAL NOT NULL,
                    mean_error REAL NOT NULL,
                    std_error REAL NOT NULL,
                    max_error REAL NOT NULL,
                    min_error REAL NOT NULL,
                    error_trend REAL NOT NULL,
                    volatility REAL NOT NULL,
                    prediction_count INTEGER NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS error_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME NOT NULL,
                    formula_id TEXT,
                    prediction REAL NOT NULL,
                    actual REAL NOT NULL,
                    error_absolute REAL NOT NULL,
                    error_relative REAL NOT NULL,
                    error_normalized REAL NOT NULL,
                    volatility REAL,
                    confidence REAL,
                    method TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
            cursor.execute('''
                INSERT INTO blocks 
                (start_time, end_time, start_index, end_index, block_type, confidence,
                 mean_error, std_error, max_error, min_error, error_trend, 
                 volatility, prediction_count)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                datetime.now() - timedelta(hours=2),
                datetime.now() - timedelta(hours=1),
                0, 100, 'low_error_stable', 0.8,
                0.3, 0.1, 0.5, 0.1, 0.02, 0.01, 100
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            for i in range(50):
                timestamp = datetime.now() - timedelta(hours=2, minutes=i)
                cursor.execute('''
                    INSERT INTO error_history 
                    (timestamp, formula_id, prediction, actual, error_absolute, 
                     error_relative, error_normalized, volatility, confidence, method)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    timestamp, 'volatility_focused', 100.0 + i*0.01, 100.1 + i*0.01, 0.1 + i*0.001,
                    0.001, 0.1, 0.01, 0.8, 'sma'
                ))
            
            conn.commit()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = engine.get_formula_parameters('volatility_focused', block_id=1)
        
        if 'threshold' in params:
            logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω—ã: threshold = {params['threshold']}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
            current_params = engine.get_current_block_parameters('volatility_focused')
            
            if 'parameters' in current_params:
                logger.info(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
                optimized_params = engine.optimize_parameters_for_regime('volatility_focused', 'stable')
                
                if 'threshold' in optimized_params:
                    logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: threshold = {optimized_params['threshold']}")
                    return True
                else:
                    logger.error("‚ùå –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                    return False
            else:
                logger.error("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return False
        else:
            logger.error("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Formula Engine: {e}")
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import os
        try:
            if os.path.exists(test_db):
                os.remove(test_db)
        except PermissionError:
            pass

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Formula Engine —Å –±–ª–æ–∫–∞–º–∏...")
    
    success = test_formula_engine_blocks()
    
    if success:
        print("‚úÖ Formula Engine —Å –±–ª–æ–∫–∞–º–∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ Formula Engine —Å –±–ª–æ–∫–∞–º–∏")
