#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö IV –æ–ø—Ü–∏–æ–Ω–æ–≤ SOL
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from logger import get_logger
from database import get_database

logger = get_logger()

class IVSignalGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö IV"""
    
    def __init__(self, db_path='data/sol_iv.db'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.db_path = db_path
        self.init_signals_table()
        
    def init_signals_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É signals –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                create_table_sql = """
                CREATE TABLE IF NOT EXISTS signals (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    signal TEXT NOT NULL,
                    confidence REAL NOT NULL,
                    reason TEXT NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
                """
                cursor.execute(create_table_sql)
                conn.commit()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                cursor.execute("SELECT COUNT(*) FROM signals")
                count = cursor.fetchone()[0]
                logger.info(f"üìä –¢–∞–±–ª–∏—Ü–∞ signals –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {count} –∑–∞–ø–∏—Å–µ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã signals: {e}")
            raise
    
    def get_recent_iv_data(self, hours=2):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ IV –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤
                cutoff_time = datetime.now() - timedelta(hours=hours)
                cutoff_str = cutoff_time.strftime('%Y-%m-%d %H:%M:%S')
                
                query = """
                SELECT time, symbol, markIv, underlyingPrice, delta, gamma, vega, theta
                FROM iv_data 
                WHERE time > ?
                ORDER BY time DESC
                """
                
                df = pd.read_sql_query(query, conn, params=(cutoff_str,))
                
                if df.empty:
                    logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö IV –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
                    return None
                
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π IV –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤")
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö IV: {e}")
            return None
    
    def calculate_iv_changes(self, df):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è IV –∏ —Ü–µ–Ω—ã"""
        if df is None or len(df) < 2:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df['time'] = pd.to_datetime(df['time'])
        df = df.sort_values(['symbol', 'time'])
        
        changes = []
        
        for symbol in df['symbol'].unique():
            symbol_data = df[df['symbol'] == symbol].copy()
            if len(symbol_data) < 2:
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            symbol_data = symbol_data.sort_values('time')
            symbol_data['iv_change'] = symbol_data['markIv'].diff()
            symbol_data['price_change'] = symbol_data['underlyingPrice'].diff()
            symbol_data['time_diff'] = symbol_data['time'].diff().dt.total_seconds() / 60  # –≤ –º–∏–Ω—É—Ç–∞—Ö
            
            # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (NaN –ø–æ—Å–ª–µ diff)
            symbol_data = symbol_data.dropna()
            
            if not symbol_data.empty:
                changes.append(symbol_data)
        
        if changes:
            result_df = pd.concat(changes, ignore_index=True)
            logger.info(f"üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è {len(result_df)} –∑–∞–ø–∏—Å–µ–π")
            return result_df
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return None
    
    def analyze_iv_patterns(self, changes_df):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã IV –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        if changes_df is None or len(changes_df) == 0:
            return []
        
        signals = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        for timestamp in changes_df['time'].unique():
            time_data = changes_df[changes_df['time'] == timestamp]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            avg_iv_change = time_data['iv_change'].mean()
            avg_price_change = time_data['price_change'].mean()
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π
            iv_volatility = time_data['iv_change'].std()
            price_volatility = time_data['price_change'].std()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø—Ü–∏–æ–Ω–æ–≤ (call/put)
            call_options = time_data[time_data['symbol'].str.contains('-C-')]
            put_options = time_data[time_data['symbol'].str.contains('-P-')]
            
            signal = None
            confidence = 0.0
            reason = ""
            
            # –ü—Ä–∞–≤–∏–ª–æ 1: IV —Ä–∞—Å—Ç–µ—Ç, —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç ‚Üí SELL
            if avg_iv_change > 0.005 and avg_price_change < -0.5:
                signal = "SELL"
                confidence = min(abs(avg_iv_change) / max(iv_volatility, 0.001), 1.0)
                if pd.isna(confidence):
                    confidence = 0.5
                reason = f"—Ä–æ—Å—Ç IV ({avg_iv_change:.4f}) –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã ({avg_price_change:.2f})"
            
            # –ü—Ä–∞–≤–∏–ª–æ 2: IV –ø–∞–¥–∞–µ—Ç, —Ü–µ–Ω–∞ —Ä–∞—Å—Ç–µ—Ç ‚Üí BUY
            elif avg_iv_change < -0.005 and avg_price_change > 0.5:
                signal = "BUY"
                confidence = min(abs(avg_iv_change) / max(iv_volatility, 0.001), 1.0)
                if pd.isna(confidence):
                    confidence = 0.5
                reason = f"–ø–∞–¥–µ–Ω–∏–µ IV ({avg_iv_change:.4f}) –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã ({avg_price_change:.2f})"
            
            # –ü—Ä–∞–≤–∏–ª–æ 3: IV —Ä–µ–∑–∫–æ —Ä–∞—Å—Ç–µ—Ç, —Ü–µ–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ ‚Üí VOLATILITY SPIKE
            elif avg_iv_change > 0.02 and abs(avg_price_change) < 0.2:
                signal = "VOLATILITY SPIKE"
                confidence = min(abs(avg_iv_change) / max(iv_volatility, 0.001), 1.0)
                if pd.isna(confidence):
                    confidence = 0.5
                reason = f"—Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç IV ({avg_iv_change:.4f}) –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ü–µ–Ω–µ"
            
            # –ü—Ä–∞–≤–∏–ª–æ 3.5: IV —Ä–∞—Å—Ç–µ—Ç –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã ‚Üí VOLATILITY SPIKE (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω)
            elif avg_iv_change > 0.015 and avg_price_change > 0.3:
                signal = "VOLATILITY SPIKE"
                confidence = min(abs(avg_iv_change) / max(iv_volatility, 0.001), 1.0)
                if pd.isna(confidence):
                    confidence = 0.5
                reason = f"—Ä–æ—Å—Ç IV ({avg_iv_change:.4f}) –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã ({avg_price_change:.2f}) - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
            
            # –ü—Ä–∞–≤–∏–ª–æ 4: IV call –≤—ã—à–µ put ‚Üí BULLISH
            elif len(call_options) > 0 and len(put_options) > 0:
                call_iv_avg = call_options['markIv'].mean()
                put_iv_avg = put_options['markIv'].mean()
                
                if call_iv_avg > put_iv_avg * 1.05:  # Call IV –Ω–∞ 5% –≤—ã—à–µ
                    signal = "BULLISH"
                    confidence = min((call_iv_avg - put_iv_avg) / put_iv_avg, 1.0)
                    if pd.isna(confidence):
                        confidence = 0.5
                    reason = f"IV call ({call_iv_avg:.4f}) –≤—ã—à–µ put ({put_iv_avg:.4f})"
                
                elif put_iv_avg > call_iv_avg * 1.05:  # Put IV –Ω–∞ 5% –≤—ã—à–µ
                    signal = "BEARISH"
                    confidence = min((put_iv_avg - call_iv_avg) / call_iv_avg, 1.0)
                    if pd.isna(confidence):
                        confidence = 0.5
                    reason = f"IV put ({put_iv_avg:.4f}) –≤—ã—à–µ call ({call_iv_avg:.4f})"
            
            if signal:
                signals.append({
                    'time': timestamp,
                    'timeframe': '15m',  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    'signal': signal,
                    'confidence': round(confidence, 2),
                    'reason': reason
                })
                
                # –í—ã–≤–æ–¥–∏–º —Å–∏–≥–Ω–∞–ª –≤ –∫–æ–Ω—Å–æ–ª—å
                time_str = timestamp.strftime('%Y-%m-%d %H:%M')
                print(f"[{time_str}] (15m) Signal: {signal} | Confidence: {confidence:.2f}")
                print(f"–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                print("-" * 50)
        
        return signals
    
    def save_signals(self, signals):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if not signals:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                insert_sql = """
                INSERT INTO signals (time, timeframe, signal, confidence, reason)
                VALUES (?, ?, ?, ?, ?)
                """
                
                values = []
                for signal in signals:
                    values.append((
                        signal['time'].strftime('%Y-%m-%d %H:%M:%S'),
                        signal['timeframe'],
                        signal['signal'],
                        signal['confidence'],
                        signal['reason']
                    ))
                
                cursor.executemany(insert_sql, values)
                conn.commit()
                
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def get_recent_signals(self, limit=10):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                query = """
                SELECT time, timeframe, signal, confidence, reason
                FROM signals 
                ORDER BY time DESC 
                LIMIT ?
                """
                
                df = pd.read_sql_query(query, conn, params=(limit,))
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return pd.DataFrame()
    
    def generate_signals(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ IV
        iv_data = self.get_recent_iv_data(hours=2)
        if iv_data is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ IV")
            return []
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        changes = self.calculate_iv_changes(iv_data)
        if changes is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            return []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = self.analyze_iv_patterns(changes)
        
        if signals:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.save_signals(signals)
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        else:
            logger.info("‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return signals

def run_signal_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤
    generator = IVSignalGenerator()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    signals = generator.generate_signals()
    
    if signals:
        print(f"\nüìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for i, signal in enumerate(signals, 1):
            time_str = signal['time'].strftime('%Y-%m-%d %H:%M')
            print(f"{i}. [{time_str}] {signal['signal']} (Confidence: {signal['confidence']:.2f})")
            print(f"   –ü—Ä–∏—á–∏–Ω–∞: {signal['reason']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –∏–∑ –ë–î
    recent_signals = generator.get_recent_signals(5)
    if not recent_signals.empty:
        print(f"\nüóÑÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã –≤ –ë–î:")
        print(recent_signals.to_string(index=False))
    
    logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    run_signal_demo()
