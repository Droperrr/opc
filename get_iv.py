import requests
import pandas as pd
import time
from datetime import datetime
from dotenv import load_dotenv
import os
import json
from logger import get_logger
from database import get_database

# –ó–∞–≥—Ä—É–∑–∫–∞ API-–∫–ª—é—á–∞ –∏ —Å–µ–∫—Ä–µ—Ç–∞
load_dotenv()
API_KEY = os.getenv('BYBIT_API_KEY')
API_SECRET = os.getenv('BYBIT_API_SECRET')
BASE_URL = 'https://api.bybit.com'  # –û—Å–Ω–æ–≤–Ω–æ–π API URL

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = get_logger()

def get_option_symbols(base_coin='SOL', return_all=False):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–ª—è SOL."""
    logger.info(f"üîç –ü–æ–∏—Å–∫ –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–ª—è {base_coin}")
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json'
        }
        params = {'category': 'option', 'baseCoin': base_coin}
        if API_KEY:
            params['api_key'] = API_KEY
            logger.info("üîë API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
        else:
            logger.info("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_URL}/v5/market/instruments-info")
        response = requests.get(f'{BASE_URL}/v5/market/instruments-info', params=params, headers=headers, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            logger.error(f"‚ùå HTTP {response.status_code}: {response.text}")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not response.text.strip():
            logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return None
            
        response_data = response.json()
        if 'result' in response_data and 'list' in response_data['result']:
            symbols = [item['symbol'] for item in response_data['result']['list'] if item['status'] == 'Trading']
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è {base_coin}")
            if symbols:
                logger.info(f"üéØ –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {symbols[:5]}")
            return symbols if return_all else (symbols[0] if symbols else None)
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {json.dumps(response_data)}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
        return None

def get_historical_iv(symbol='SOL-26SEP25-360-P-USDT', start_date='2024-01-01', end_date='2024-12-31'):
    """–°–æ–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ IV –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –æ–ø—Ü–∏–æ–Ω–∞."""
    
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö IV –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–∏–º–≤–æ–ª
    if not symbol:
        logger.info("üîç –°–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã SOL")
        symbol = get_option_symbols('SOL')
        if not symbol:
            logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è SOL")
            return None
    
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': 'application/json'
        }
        params = {
            'category': 'option',
            'symbol': symbol
        }
        if API_KEY:
            params['api_key'] = API_KEY
            logger.info("üîë API –∫–ª—é—á –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ ticker –¥–∞–Ω–Ω—ã—Ö")
        
        logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {BASE_URL}/v5/market/tickers")
        response = requests.get(f'{BASE_URL}/v5/market/tickers', params=params, headers=headers, timeout=10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            logger.error(f"‚ùå HTTP {response.status_code}: {response.text}")
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not response.text.strip():
            logger.error("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
            return None
        
        response_data = response.json()
        
        if 'result' in response_data and 'list' in response_data['result'] and response_data['result']['list']:
            ticker_data = response_data['result']['list'][0]
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã ticker –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker_data['symbol']}")
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            current_time = datetime.now()
            data = {
                'time': [current_time],
                'symbol': [ticker_data['symbol']],
                'markIv': [float(ticker_data['markIv']) if ticker_data['markIv'] != '0' else None],
                'bid1Iv': [float(ticker_data['bid1Iv']) if ticker_data['bid1Iv'] != '0' else None],
                'ask1Iv': [float(ticker_data['ask1Iv']) if ticker_data['ask1Iv'] != '0' else None],
                'markPrice': [float(ticker_data['markPrice'])],
                'underlyingPrice': [float(ticker_data['underlyingPrice'])],
                'delta': [float(ticker_data['delta'])],
                'gamma': [float(ticker_data['gamma'])],
                'vega': [float(ticker_data['vega'])],
                'theta': [float(ticker_data['theta'])]
            }
            
            df = pd.DataFrame(data)
            filename = 'sol_option_iv_current.csv'
            df.to_csv(filename, index=False)
            logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            logger.info(f"üìä Mark IV: {data['markIv'][0]}, Underlying Price: {data['underlyingPrice'][0]}")
            
            return df
        else:
            logger.error(f"‚ùå –î–∞–Ω–Ω—ã–µ ticker –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {json.dumps(response_data)}")
            return None
    
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IV –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def get_all_sol_options_data(base_coin='SOL', max_symbols=None):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ IV –¥–ª—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ SOL."""
    
    logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö IV –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ {base_coin}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã
    all_symbols = get_option_symbols(base_coin, return_all=True)
    if not all_symbols:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤")
        return None
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if max_symbols:
        all_symbols = all_symbols[:max_symbols]
        logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–±–æ—Ä –¥–æ {max_symbols} —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    logger.info(f"üìä –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {len(all_symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    all_data = []
    successful_count = 0
    failed_count = 0
    
    for i, symbol in enumerate(all_symbols, 1):
        logger.info(f"üìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(all_symbols)}: {symbol}")
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
            params = {
                'category': 'option',
                'symbol': symbol
            }
            if API_KEY:
                params['api_key'] = API_KEY
            
            response = requests.get(f'{BASE_URL}/v5/market/tickers', params=params, headers=headers, timeout=10)
            
            if response.status_code == 200 and response.text.strip():
                response_data = response.json()
                
                if 'result' in response_data and 'list' in response_data['result'] and response_data['result']['list']:
                    ticker_data = response_data['result']['list'][0]
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
                    current_time = datetime.now()
                    data_row = {
                        'time': current_time,
                        'symbol': ticker_data['symbol'],
                        'markIv': float(ticker_data['markIv']) if ticker_data['markIv'] != '0' else None,
                        'bid1Iv': float(ticker_data['bid1Iv']) if ticker_data['bid1Iv'] != '0' else None,
                        'ask1Iv': float(ticker_data['ask1Iv']) if ticker_data['ask1Iv'] != '0' else None,
                        'markPrice': float(ticker_data['markPrice']),
                        'underlyingPrice': float(ticker_data['underlyingPrice']),
                        'delta': float(ticker_data['delta']),
                        'gamma': float(ticker_data['gamma']),
                        'vega': float(ticker_data['vega']),
                        'theta': float(ticker_data['theta'])
                    }
                    
                    all_data.append(data_row)
                    successful_count += 1
                    logger.info(f"‚úÖ {symbol}: Mark IV = {data_row['markIv']:.4f}")
                else:
                    failed_count += 1
                    logger.warning(f"‚ö†Ô∏è {symbol}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ticker")
            else:
                failed_count += 1
                logger.warning(f"‚ö†Ô∏è {symbol}: HTTP {response.status_code}")
                
        except Exception as e:
            failed_count += 1
            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ - {e}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.1)
    
    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –≤—Å–µ—Ö —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if all_data:
        df = pd.DataFrame(all_data)
        filename = 'sol_all_options_iv.csv'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å
        try:
            existing_df = pd.read_csv(filename)
            df = pd.concat([existing_df, df], ignore_index=True)
            logger.info(f"üìù –î–æ–±–∞–≤–ª—è–µ–º {len(all_data)} –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º {len(existing_df)}")
        except FileNotFoundError:
            logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª —Å {len(all_data)} –∑–∞–ø–∏—Å—è–º–∏")
        
        df.to_csv(filename, index=False)
        logger.info(f"üíæ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            db = get_database()
            db.insert_iv_data(all_data)
            logger.info(f"üóÑÔ∏è –î–∞–Ω–Ω—ã–µ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: —É—Å–ø–µ—à–Ω–æ {successful_count}, –Ω–µ—É–¥–∞—á–Ω–æ {failed_count}")
        
        return df
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞")
        return None

def export_iv_data_to_csv(date):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ IV –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ CSV —Ñ–∞–π–ª
    
    Args:
        date (str): –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    from database import export_to_csv
    
    logger.info(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö IV –∑–∞ {date}")
    
    try:
        export_file = export_to_csv(date)
        if export_file:
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω: {export_file}")
            return export_file
        else:
            logger.error(f"‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –¥–∞—Ç—ã {date}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return None

# –¢–µ—Å—Ç
if __name__ == "__main__":
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ get_iv.py")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    iv_df = get_all_sol_options_data(max_symbols=5)
    if iv_df is not None:
        logger.info("‚úÖ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç (–ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫):")
        print(iv_df.head())
        print(f"\nüìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(iv_df)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = get_database()
        total_records = db.get_total_records()
        unique_symbols = db.get_unique_symbols()
        print(f"\nüóÑÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_records}")
        print(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(unique_symbols)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().strftime('%Y-%m-%d')
        export_file = export_iv_data_to_csv(today)
        if export_file:
            print(f"üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ {today}: {export_file}")
        
    else:
        logger.error("‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–±—Ä–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")