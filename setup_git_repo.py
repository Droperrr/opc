#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
"""

import os
import subprocess
import shutil
from pathlib import Path

def run_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
    try:
        result = subprocess.run(command, shell=True, cwd=cwd, 
                              capture_output=True, text=True, check=True)
        print(f"‚úÖ {command}")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {command}")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        if e.stderr:
            print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def setup_git_repository():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è OPC –ø—Ä–æ–µ–∫—Ç–∞...")
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    if not run_command("git init -b main"):
        return False
    
    # 2. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    remote_url = "git@github.com:Droperrr/opc.git"
    if not run_command(f"git remote add origin {remote_url}"):
        print("‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    run_command("git status")
    
    print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    return True

def copy_optimized_files():
    """–ö–æ–ø–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ–µ–∫—Ç"""
    
    print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    files_to_copy = {
        '.gitignore_optimized': '.gitignore',
        'PROJECT_MANIFEST_OPTIMIZED.md': 'PROJECT_MANIFEST.md',
        'requirements_optimized.txt': 'requirements.txt',
        'README_OPTIMIZED.md': 'README.md'
    }
    
    for source, destination in files_to_copy.items():
        if os.path.exists(source):
            shutil.copy2(source, destination)
            print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {source} ‚Üí {destination}")
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {source}")
    
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã!")

def add_core_files():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ –≤ Git"""
    
    print("üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ Git...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã
    core_files = [
        # –Ø–¥—Ä–æ —Å–∏—Å—Ç–µ–º—ã
        'main_pipeline.py',
        'prediction_layer.py', 
        'error_monitor.py',
        'block_detector.py',
        'block_analyzer.py',
        'formula_engine.py',
        'block_reporting.py',
        
        # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        'database.py',
        'get_iv.py',
        'futures_collector.py',
        'enrich_options.py',
        'historical_iv_collector.py',
        'historical_basis_collector.py',
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
        'signal_generator.py',
        'signal_generator_v2.py',
        'signal_generator_v3.py',
        'trend_signals.py',
        'signals.py',
        'entry_generator.py',
        
        # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
        'backtest_engine.py',
        'backtest_signals.py',
        'advanced_backtest_system.py',
        
        # –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        'scheduler.py',
        'logger.py',
        'compatibility.py',
        'ui_dashboard.py',
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        'test_main_pipeline.py',
        'test_block_components.py',
        'test_compatibility.py',
        'test_error_monitor.py',
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        'requirements.txt',
        'README.md',
        '.gitignore',
        'PROJECT_MANIFEST.md'
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã
    existing_files = []
    for file in core_files:
        if os.path.exists(file):
            existing_files.append(file)
        else:
            print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file}")
    
    if existing_files:
        files_str = " ".join(existing_files)
        if run_command(f"git add {files_str}"):
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(existing_files)} —Ñ–∞–π–ª–æ–≤ –≤ Git")
        else:
            return False
    
    return True

def commit_and_push():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"""
    
    print("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    commit_message = "Initial commit: Optimized OPC trading system"
    if not run_command(f'git commit -m "{commit_message}"'):
        print("‚ö†Ô∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    if not run_command("git push -u origin main"):
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        return False
    
    print("‚úÖ –ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π!")
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    
    print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è OPC –ø—Ä–æ–µ–∫—Ç–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists('main_pipeline.py'):
        print("‚ùå –û—à–∏–±–∫–∞: main_pipeline.py –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.")
        return False
    
    try:
        # 1. –ö–æ–ø–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        copy_optimized_files()
        
        # 2. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if not setup_git_repository():
            return False
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        if not add_core_files():
            return False
        
        # 4. –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if not commit_and_push():
            return False
        
        print("\nüéâ –£–°–ü–ï–•! –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç OPC —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã")
        print("‚úÖ –°–æ–∑–¥–∞–Ω –∫–æ–º–º–∏—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ GitHub")
        
        print("\nüîó –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:")
        print("https://github.com/Droperrr/opc")
        
        print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞ GitHub")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã: pytest test_main_pipeline.py")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    if success:
        print("\n‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!")
