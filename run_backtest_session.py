#!/usr/bin/env python3
"""
–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –±—ç–∫—Ç–µ—Å—Ç–∞
"""

import os
import sys
import json
import subprocess
from datetime import datetime
import pandas as pd
from logger import get_logger

logger = get_logger()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—É—Å–∫–∞
    run_id = f"run_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: {run_id}")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    session_results_dir = os.path.join('backtest_results', run_id)
    os.makedirs(session_results_dir, exist_ok=True)
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {session_results_dir}")
    
    try:
        # –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
        print("\n" + "=" * 60)
        print("–®–ê–ì 1: –ó–ê–ü–£–°–ö –û–ü–¢–ò–ú–ò–ó–ê–¢–û–†–ê")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer_cmd = [
            'python3', 'optimizer.py'
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(optimizer_cmd)}")
        optimizer_result = subprocess.run(
            optimizer_cmd, 
            capture_output=True, 
            text=True, 
            timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        )
        
        if optimizer_result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞:")
            print(f"STDOUT: {optimizer_result.stdout}")
            print(f"STDERR: {optimizer_result.stderr}")
            return 1
        
        print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"STDOUT: {optimizer_result.stdout}")
        
        # –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if not os.path.exists('bayesian_optimization_results_sma20.json'):
            print("‚ùå –§–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 1
            
        with open('bayesian_optimization_results_sma20.json', 'r', encoding='utf-8') as f:
            opt_results = json.load(f)
        
        best_params = opt_results['best_params']
        print(f"üìä –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
        
        # –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å –ª—É—á—à–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("\n" + "=" * 60)
        print("–®–ê–ì 2: –ó–ê–ü–£–°–ö –§–ò–ù–ê–õ–¨–ù–û–ì–û –ë–≠–ö–¢–ï–°–¢–ê")
        print("=" * 60)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
        fixed_trading_params = {
            'atr_risk_multiplier': best_params['atr_risk_multiplier'],
            'reward_ratio': best_params['reward_ratio']
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
        backtest_cmd = [
            'python3', 'run_walk_forward_backtest.py',
            '--fixed_trading_params', json.dumps(fixed_trading_params),
            '--initial_capital', '10000',
            '--position_size', '0.1',
            '--data_file', 'basis_features_1m.parquet',
            '--asset', 'SOL',
            '--sma_period', str(int(best_params['sma_period'])),
            '--z_score_threshold', '2.0',
            '--results_dir', session_results_dir  # –ü–µ—Ä–µ–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(backtest_cmd)}")
        backtest_result = subprocess.run(
            backtest_cmd, 
            capture_output=True, 
            text=True, 
            timeout=3600  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        )
        
        if backtest_result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞:")
            print(f"STDOUT: {backtest_result.stdout}")
            print(f"STDERR: {backtest_result.stderr}")
            return 1
        
        print("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"STDOUT: {backtest_result.stdout}")
        
        # –®–∞–≥ 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        print("\n" + "=" * 60)
        print("–®–ê–ì 3: –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –î–õ–Ø –î–ê–®–ë–û–†–î–ê")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
        prepare_cmd = [
            'python3', 'prepare_dashboard_data.py',
            '--results_dir', session_results_dir,  # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            '--run_id', run_id  # –ü–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–ø—É—Å–∫–∞
        ]
        
        print(f"üîß –ö–æ–º–∞–Ω–¥–∞: {' '.join(prepare_cmd)}")
        prepare_result = subprocess.run(
            prepare_cmd, 
            capture_output=True, 
            text=True, 
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        )
        
        if prepare_result.returncode != 0:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞:")
            print(f"STDOUT: {prepare_result.stdout}")
            print(f"STDERR: {prepare_result.stderr}")
            return 1
        
        print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        print(f"STDOUT: {prepare_result.stdout}")
        
        # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("–®–ê–ì 4: –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        
        # –ß–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
        metrics_file = os.path.join(session_results_dir, 'performance_metrics.json')
        if os.path.exists(metrics_file):
            with open(metrics_file, 'r', encoding='utf-8') as f:
                metrics = json.load(f)
            
            print(f"üìà –§–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
            print(f"   Sharpe Ratio: {metrics.get('sharpe_ratio', 0):.3f}")
            print(f"   Win Rate: {metrics.get('win_rate', 0):.2%}")
            print(f"   Total P&L: {metrics.get('total_pnl', 0):.2f} USD")
            print(f"   Max Drawdown: {metrics.get('max_drawdown', 0):.2%}")
        else:
            print(f"‚ùå –§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω: {metrics_file}")
        
        print(f"\n‚úÖ –°–µ—Å—Å–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ {run_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {session_results_dir}")
        
        return 0
        
    except subprocess.TimeoutExpired as e:
        print(f"‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return 1
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–µ: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())