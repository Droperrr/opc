#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π Prediction Layer –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Error-Driven Adaptive Blocks
–†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
"""

import numpy as np
import pandas as pd
from typing import List, Union, Optional, Dict, Any
from datetime import datetime, timedelta
import logging

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from compatibility import safe_float, safe_mean, safe_std, safe_array, safe_divide

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class PredictionLayer:
    """–ë–∞–∑–æ–≤—ã–π —Å–ª–æ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤"""
    
    def __init__(self, window_size: int = 5):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        self.window_size = window_size
        self.methods = {
            'simple_moving_average': self._simple_moving_average,
            'weighted_moving_average': self._weighted_moving_average,
            'autoregressive': self._autoregressive,
            'exponential_smoothing': self._exponential_smoothing
        }
        logger.info(f"üîÆ PredictionLayer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ–∫–Ω–æ–º {window_size}")
    
    def predict_next_price(self, prices: Union[List, np.ndarray, pd.Series], 
                          method: str = 'simple_moving_average') -> float:
        """
        –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–ª–µ–¥—É—é—â–µ–π —Ü–µ–Ω—ã
        
        Args:
            prices: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
            method: –ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            float: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞
        """
        try:
            if prices is None or len(prices) == 0:
                logger.warning("–ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ —Ü–µ–Ω –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è")
                return 0.0
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∞—Å—Å–∏–≤
            safe_prices = safe_array(prices)
            
            if len(safe_prices) < self.window_size:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–∫–Ω–∞ {self.window_size}")
                return safe_mean(safe_prices)
            
            # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            if method not in self.methods:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ {method}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è simple_moving_average")
                method = 'simple_moving_average'
            
            prediction = self.methods[method](safe_prices)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            if np.isnan(prediction) or np.isinf(prediction):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –º–µ—Ç–æ–¥–æ–º {method}")
                return safe_mean(safe_prices[-self.window_size:])
            
            logger.debug(f"–ü—Ä–æ–≥–Ω–æ–∑ –º–µ—Ç–æ–¥–æ–º {method}: {prediction}")
            return float(prediction)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return 0.0
    
    def _simple_moving_average(self, prices: np.ndarray) -> float:
        """–ü—Ä–æ—Å—Ç–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ"""
        recent_prices = prices[-self.window_size:]
        return safe_mean(recent_prices)
    
    def _weighted_moving_average(self, prices: np.ndarray) -> float:
        """–í–∑–≤–µ—à–µ–Ω–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ"""
        recent_prices = prices[-self.window_size:]
        
        # –í–µ—Å–∞: –±–æ–ª–µ–µ —Å–≤–µ–∂–∏–µ —Ü–µ–Ω—ã –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π –≤–µ—Å
        weights = np.arange(1, len(recent_prices) + 1, dtype=np.float32)
        weights = weights / weights.sum()
        
        weighted_sum = 0.0
        for i, price in enumerate(recent_prices):
            weighted_sum += safe_float(price) * weights[i]
        
        return weighted_sum
    
    def _autoregressive(self, prices: np.ndarray) -> float:
        """–ü—Ä–æ—Å—Ç–µ–π—à–∏–π –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑"""
        if len(prices) < 2:
            return safe_mean(prices)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —ç–∫—Å—Ç—Ä–∞–ø–æ–ª—è—Ü–∏—è
        recent_prices = prices[-self.window_size:]
        
        if len(recent_prices) < 2:
            return safe_mean(recent_prices)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–Ω–¥
        x = np.arange(len(recent_prices), dtype=np.float32)
        y = recent_prices.astype(np.float32)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        n = len(x)
        sum_x = np.sum(x)
        sum_y = np.sum(y)
        sum_xy = np.sum(x * y)
        sum_x2 = np.sum(x * x)
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        denominator = n * sum_x2 - sum_x * sum_x
        if denominator == 0:
            return safe_mean(recent_prices)
        
        slope = (n * sum_xy - sum_x * sum_y) / denominator
        intercept = (sum_y - slope * sum_x) / n
        
        # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
        next_x = len(recent_prices)
        prediction = slope * next_x + intercept
        
        return float(prediction)
    
    def _exponential_smoothing(self, prices: np.ndarray, alpha: float = 0.3) -> float:
        """–≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ"""
        if len(prices) == 0:
            return 0.0
        
        # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        smoothed = safe_float(prices[0])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
        for price in prices[1:]:
            smoothed = alpha * safe_float(price) + (1 - alpha) * smoothed
        
        return float(smoothed)
    
    def predict_multiple_steps(self, prices: Union[List, np.ndarray, pd.Series], 
                              steps: int = 5, method: str = 'simple_moving_average') -> List[float]:
        """
        –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä–µ–¥
        
        Args:
            prices: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
            steps: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∞
            method: –ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            List[float]: –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        """
        try:
            predictions = []
            current_prices = safe_array(prices)
            
            for step in range(steps):
                prediction = self.predict_next_price(current_prices, method)
                predictions.append(prediction)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                current_prices = np.append(current_prices, prediction)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {steps} —à–∞–≥–æ–≤ –º–µ—Ç–æ–¥–æ–º {method}")
            return predictions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return [0.0] * steps
    
    def calculate_prediction_confidence(self, prices: Union[List, np.ndarray, pd.Series], 
                                      method: str = 'simple_moving_average') -> float:
        """
        –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            prices: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã
            method: –ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            float: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0.0 –¥–æ 1.0
        """
        try:
            safe_prices = safe_array(prices)
            
            if len(safe_prices) < self.window_size:
                return 0.0
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            recent_prices = safe_prices[-self.window_size:]
            volatility = safe_std(recent_prices)
            mean_price = safe_mean(recent_prices)
            
            if mean_price == 0:
                return 0.0
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ (–æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª–µ–Ω —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏)
            cv = safe_divide(volatility, mean_price)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ CV, —Ç–µ–º –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)
            confidence = max(0.0, min(1.0, 1.0 - cv))
            
            logger.debug(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ: {confidence:.3f}")
            return confidence
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.0
    
    def get_method_performance(self, prices: Union[List, np.ndarray, pd.Series], 
                              actual_prices: Union[List, np.ndarray, pd.Series]) -> Dict[str, float]:
        """
        –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            prices: –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            actual_prices: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            
        Returns:
            Dict[str, float]: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        """
        try:
            safe_prices = safe_array(prices)
            safe_actual = safe_array(actual_prices)
            
            if len(safe_prices) != len(safe_actual):
                logger.warning("–†–∞–∑–Ω–∞—è –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–æ–≤ —Ü–µ–Ω")
                return {}
            
            performance = {}
            
            for method_name in self.methods.keys():
                # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —Ç–æ—á–∫—É
                predictions = []
                
                for i in range(self.window_size, len(safe_prices)):
                    historical = safe_prices[:i]
                    prediction = self.predict_next_price(historical, method_name)
                    predictions.append(prediction)
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                actual_values = safe_actual[self.window_size:]
                
                if len(predictions) == len(actual_values):
                    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    mae = safe_mean([abs(p - a) for p, a in zip(predictions, actual_values)])
                    mse = safe_mean([(p - a) ** 2 for p, a in zip(predictions, actual_values)])
                    rmse = safe_sqrt(mse)
                    
                    performance[method_name] = {
                        'mae': mae,
                        'mse': mse,
                        'rmse': rmse
                    }
            
            logger.info(f"–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return performance
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {}

def create_sample_predictions():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üîÆ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    np.random.seed(42)
    base_price = 100.0
    trend = 0.1
    noise = 0.05
    
    prices = []
    for i in range(50):
        price = base_price + trend * i + np.random.normal(0, noise * base_price)
        prices.append(price)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    predictor = PredictionLayer(window_size=10)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    methods = ['simple_moving_average', 'weighted_moving_average', 'autoregressive', 'exponential_smoothing']
    
    results = {}
    for method in methods:
        prediction = predictor.predict_next_price(prices, method)
        confidence = predictor.calculate_prediction_confidence(prices, method)
        
        results[method] = {
            'prediction': prediction,
            'confidence': confidence
        }
        
        logger.info(f"–ú–µ—Ç–æ–¥ {method}: –ø—Ä–æ–≥–Ω–æ–∑={prediction:.2f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence:.3f}")
    
    return results

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üîÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prediction Layer...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
    results = create_sample_predictions()
    
    print("‚úÖ Prediction Layer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –º–µ—Ç–æ–¥–æ–≤: {len(results)}")

