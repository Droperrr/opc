#!/usr/bin/env python3
"""
–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ "–∑–æ–ª–æ—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞" –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ S-03
–°–æ–∑–¥–∞–µ—Ç 20 –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —É—á–∞—Å—Ç–∫–æ–≤ —Å —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
"""

import pandas as pd
import numpy as np
import json
import os
from datetime import datetime, timedelta
from logger import get_logger
import sqlite3

logger = get_logger()

class ExperimentDataPreparator:
    def __init__(self):
        self.data_dir = 'data/experiment_sets'
        self.db_path = 'data/sol_iv.db'
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(self.data_dir, exist_ok=True)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        self.market_conditions = {
            'bull_run': 6,      # –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç
            'bear_drop': 6,     # –†–µ–∑–∫–∏–π —Å–ø–∞–¥  
            'flat_false_break': 6,  # –§–ª—ç—Ç —Å –ª–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–æ—è–º–∏
            'high_volatility': 8    # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        }
        
    def load_historical_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ IV
            iv_query = """
            SELECT time, underlyingPrice as spot_price, markIv as iv, 
                   (bid1Iv + ask1Iv)/2 as iv_mid
            FROM iv_data 
            WHERE underlyingPrice IS NOT NULL 
            ORDER BY time
            """
            iv_df = pd.read_sql_query(iv_query, conn, parse_dates=['time'])
            
            # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            if len(iv_df) < 100:
                logger.warning("‚ö†Ô∏è –ú–∞–ª–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞—é —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ")
                iv_df = self.generate_synthetic_data()
            
            conn.close()
            return iv_df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return self.generate_synthetic_data()
    
    def generate_synthetic_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤"""
        logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ –Ω–∞ 30 –¥–Ω–µ–π —Å —á–∞—Å–æ–≤—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        start_date = datetime(2025, 8, 1)
        end_date = datetime(2025, 9, 1)
        timestamps = pd.date_range(start_date, end_date, freq='H')
        
        data = []
        base_price = 200.0
        base_iv = 0.8
        
        for i, ts in enumerate(timestamps):
            # –ë–∞–∑–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
            trend = np.sin(i / 24) * 0.02  # –î–Ω–µ–≤–Ω–æ–π —Ü–∏–∫–ª
            noise = np.random.normal(0, 0.01)
            price_change = trend + noise
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
            base_price = base_price * (1 + price_change)
            
            # IV –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã
            iv_change = abs(price_change) * 2 + np.random.normal(0, 0.05)
            current_iv = max(0.3, min(1.5, base_iv + iv_change))
            
            # Skew (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É call –∏ put IV)
            skew = np.random.normal(0, 0.1)
            
            # Basis (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É —Ñ—å—é—á–µ—Ä—Å–æ–º –∏ —Å–ø–æ—Ç–æ–º)
            basis_rel = np.random.normal(0, 0.002)
            
            # OI (Open Interest) - —Å–∏–º—É–ª–∏—Ä—É–µ–º
            oi_call = np.random.uniform(1000, 5000)
            oi_put = np.random.uniform(1000, 5000)
            
            data.append({
                'time': ts,
                'spot_price': base_price,
                'iv': current_iv,
                'iv_mid': current_iv,
                'skew': skew,
                'basis_rel': basis_rel,
                'oi_call': oi_call,
                'oi_put': oi_put
            })
        
        return pd.DataFrame(data)
    
    def create_market_segments(self, df):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏"""
        segments = []
        
        # 1. –ë—ã—á—å–∏ —Ç—Ä–µ–Ω–¥—ã (6 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
        for i in range(6):
            start_idx = i * 24  # –ö–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç = 24 —á–∞—Å–∞
            end_idx = start_idx + 24
            
            if end_idx < len(df):
                segment_data = df.iloc[start_idx:end_idx].copy()
                
                # –°–æ–∑–¥–∞–µ–º –±—ã—á–∏–π —Ç—Ä–µ–Ω–¥
                segment_data['spot_price'] = segment_data['spot_price'] * (1 + np.linspace(0, 0.15, len(segment_data)))
                segment_data['iv'] = segment_data['iv'] * (1 + np.linspace(0, 0.2, len(segment_data)))
                
                segments.append({
                    'name': f'bull_run_{i+1:02d}',
                    'type': 'bull_run',
                    'data': segment_data,
                    'metadata': {
                        'market_condition': '–†–µ–∑–∫–∏–π —Ä–æ—Å—Ç',
                        'volatility': '–°—Ä–µ–¥–Ω—è—è',
                        'trend_strength': '–°–∏–ª—å–Ω–∞—è',
                        'key_events': '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                        'duration_hours': 24
                    }
                })
        
        # 2. –ú–µ–¥–≤–µ–∂—å–∏ —Ç—Ä–µ–Ω–¥—ã (6 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
        for i in range(6):
            start_idx = (i + 6) * 24
            end_idx = start_idx + 24
            
            if end_idx < len(df):
                segment_data = df.iloc[start_idx:end_idx].copy()
                
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥
                segment_data['spot_price'] = segment_data['spot_price'] * (1 - np.linspace(0, 0.12, len(segment_data)))
                segment_data['iv'] = segment_data['iv'] * (1 + np.linspace(0, 0.25, len(segment_data)))
                
                segments.append({
                    'name': f'bear_drop_{i+1:02d}',
                    'type': 'bear_drop',
                    'data': segment_data,
                    'metadata': {
                        'market_condition': '–†–µ–∑–∫–∏–π —Å–ø–∞–¥',
                        'volatility': '–í—ã—Å–æ–∫–∞—è',
                        'trend_strength': '–°–∏–ª—å–Ω–∞—è',
                        'key_events': '–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                        'duration_hours': 24
                    }
                })
        
        # 3. –§–ª—ç—Ç —Å –ª–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–æ—è–º–∏ (6 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
        for i in range(6):
            start_idx = (i + 12) * 24
            end_idx = start_idx + 24
            
            if end_idx < len(df):
                segment_data = df.iloc[start_idx:end_idx].copy()
                
                # –°–æ–∑–¥–∞–µ–º —Ñ–ª—ç—Ç —Å –ª–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–æ—è–º–∏
                base_price = segment_data['spot_price'].iloc[0]
                segment_data['spot_price'] = base_price + np.sin(np.linspace(0, 4*np.pi, len(segment_data))) * 5
                segment_data['iv'] = segment_data['iv'] * (1 + np.random.normal(0, 0.1, len(segment_data)))
                
                segments.append({
                    'name': f'flat_false_break_{i+1:02d}',
                    'type': 'flat_false_break',
                    'data': segment_data,
                    'metadata': {
                        'market_condition': '–§–ª—ç—Ç —Å –ª–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–æ—è–º–∏',
                        'volatility': '–ù–∏–∑–∫–∞—è',
                        'trend_strength': '–°–ª–∞–±–∞—è',
                        'key_events': '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
                        'duration_hours': 24
                    }
                })
        
        # 4. –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (8 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
        for i in range(8):
            start_idx = (i + 18) * 24
            end_idx = start_idx + 24
            
            if end_idx < len(df):
                segment_data = df.iloc[start_idx:end_idx].copy()
                
                # –°–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                segment_data['spot_price'] = segment_data['spot_price'] * (1 + np.random.normal(0, 0.03, len(segment_data)))
                segment_data['iv'] = segment_data['iv'] * (1 + np.random.uniform(0.3, 0.8, len(segment_data)))
                
                segments.append({
                    'name': f'high_volatility_{i+1:02d}',
                    'type': 'high_volatility',
                    'data': segment_data,
                    'metadata': {
                        'market_condition': '–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å',
                        'volatility': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è',
                        'trend_strength': '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è',
                        'key_events': '–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏',
                        'duration_hours': 24
                    }
                })
        
        return segments
    
    def save_segments(self, segments):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–≥–º–µ–Ω—Ç—ã –≤ —Ñ–∞–π–ª—ã"""
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤...")
        
        for segment in segments:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç–∞
            csv_path = os.path.join(self.data_dir, f"{segment['name']}.csv")
            segment['data'].to_csv(csv_path, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            metadata_path = os.path.join(self.data_dir, f"{segment['name']}_metadata.json")
            with open(metadata_path, 'w', encoding='utf-8') as f:
                json.dump(segment['metadata'], f, indent=2, ensure_ascii=False, default=str)
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–µ–≥–º–µ–Ω—Ç: {segment['name']}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info("üöÄ –ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            df = self.load_historical_data()
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            segments = self.create_market_segments(df)
            logger.info(f"üìà –°–æ–∑–¥–∞–Ω–æ {len(segments)} —Ä—ã–Ω–æ—á–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            self.save_segments(segments)
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
            self.create_summary_report(segments)
            
            logger.info("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def create_summary_report(self, segments):
        """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º"""
        report_path = os.path.join(self.data_dir, 'segments_summary.md')
        
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write("# üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–º —Å–µ–≥–º–µ–Ω—Ç–∞–º\n\n")
            f.write(f"**–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"**–í—Å–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤:** {len(segments)}\n\n")
            
            f.write("## üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n\n")
            f.write("| –¢–∏–ø | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –û–ø–∏—Å–∞–Ω–∏–µ |\n")
            f.write("|-----|------------|----------|\n")
            f.write("| bull_run | 6 | –†–µ–∑–∫–∏–π —Ä–æ—Å—Ç —Ü–µ–Ω—ã |\n")
            f.write("| bear_drop | 6 | –†–µ–∑–∫–∏–π —Å–ø–∞–¥ —Ü–µ–Ω—ã |\n")
            f.write("| flat_false_break | 6 | –§–ª—ç—Ç —Å –ª–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–æ—è–º–∏ |\n")
            f.write("| high_volatility | 8 | –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å |\n\n")
            
            f.write("## üìã –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–æ–≤\n\n")
            for segment in segments:
                f.write(f"### {segment['name']}\n")
                f.write(f"- **–¢–∏–ø:** {segment['metadata']['market_condition']}\n")
                f.write(f"- **–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å:** {segment['metadata']['volatility']}\n")
                f.write(f"- **–°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞:** {segment['metadata']['trend_strength']}\n")
                f.write(f"- **–ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è:** {segment['metadata']['key_events']}\n")
                f.write(f"- **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {segment['metadata']['duration_hours']} —á–∞—Å–æ–≤\n\n")
        
        logger.info(f"üìÑ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

if __name__ == "__main__":
    preparator = ExperimentDataPreparator()
    preparator.run()
