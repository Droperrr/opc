#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ v1.0 - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 25.08.2025 - 03.09.2025
"""

import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime, timedelta
from logger import get_logger
import json
import os
from typing import Dict, List, Tuple, Optional

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ basis_signal_generator –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
from basis_signal_generator import calculate_thresholds, generate_signals_from_data

logger = get_logger()

class AdvancedBacktestSystem:
    def __init__(self, data_file='basis_features_1m.parquet', signals_file='candle_signals.csv',
                 z_score_threshold=2.0, low_vol_params=None, mid_vol_params=None, high_vol_params=None,
                 initial_capital=10000, position_size=0.1, fixed_trading_params=None, results_dir=None, asset='SOL',
                 signal_generator_module='basis_signal_generator', sma_period=20, run_id=None):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        if signal_generator_module == 'basis_signal_generator':
            from basis_signal_generator import calculate_thresholds, generate_signals_from_data
        elif signal_generator_module == 'mean_reversion_signal_generator':
            from mean_reversion_signal_generator import calculate_thresholds, generate_signals_from_data
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            from basis_signal_generator import calculate_thresholds, generate_signals_from_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
        self.calculate_thresholds = calculate_thresholds
        self.generate_signals_from_data = generate_signals_from_data
        logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –±—ç–∫—Ç–µ—Å—Ç:")
        logger.info(f"  initial_capital: {initial_capital}")
        logger.info(f"  position_size: {position_size}")
        logger.info(f"  fixed_trading_params: {fixed_trading_params}")
        logger.info(f"  asset: {asset}")
        
        self.asset = asset
        self.run_id = run_id
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ fixed_trading_params –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        if fixed_trading_params:
            atr_risk_multiplier = fixed_trading_params.get('atr_risk_multiplier', 'Not specified')
            reward_ratio = fixed_trading_params.get('reward_ratio', 'Not specified')
            logger.info(f"BACKTESTER: Received params -> risk_multiplier={atr_risk_multiplier}, reward_ratio={reward_ratio}, position_size={position_size}")
        
        self.data_file = data_file
        self.signals_file = signals_file
        self.results_dir = results_dir or 'backtest_results'
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.z_score_threshold = z_score_threshold
        self.sma_period = sma_period
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        self.low_vol_params = low_vol_params or {'atr_risk_multiplier': 1.5, 'reward_ratio': 3.0}
        self.mid_vol_params = mid_vol_params or {'atr_risk_multiplier': 2.0, 'reward_ratio': 2.0}
        self.high_vol_params = high_vol_params or {'atr_risk_multiplier': 3.0, 'reward_ratio': 1.5}
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã, –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–æ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö)
        self.fixed_trading_params = fixed_trading_params
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä–æ–≥–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (–±—É–¥—É—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –≤ run_walk_forward_backtest)
        self.volatility_thresholds = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ (–±—É–¥—É—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å–¥–µ–ª–∫–∏)
        self.trading_params = {
            'initial_capital': initial_capital,      # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –≤ USD
            'position_size': position_size,          # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞
            'max_positions': 5,                      # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            'commission': 0.001,                     # 0.1% –∫–æ–º–∏—Å—Å–∏—è
            'slippage': 0.0005                       # 0.05% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        self.risk_params = {
            'max_daily_loss': 0.05,       # –ú–∞–∫—Å–∏–º—É–º 5% –ø–æ—Ç–µ—Ä—å –≤ –¥–µ–Ω—å
            'max_drawdown': 0.20,         # –ú–∞–∫—Å–∏–º—É–º 20% –ø—Ä–æ—Å–∞–¥–∫–∏
            'correlation_threshold': 0.7,  # –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
            'volatility_filter': True,     # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            'session_filter': True        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Walk-Forward
        self.walk_forward_params = {
            'train_window_size_days': 21,  # –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –æ–∫–Ω–∞ –≤ –¥–Ω—è—Ö
            'test_window_size_days': 7,    # –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –≤ –¥–Ω—è—Ö
            'step_size_days': 7            # –®–∞–≥ —Å–¥–≤–∏–≥–∞ –æ–∫–æ–Ω –≤ –¥–Ω—è—Ö
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_metrics = {}
        self.trades_history = []
        self.equity_curve = []
        self.walk_forward_results = []  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã Walk-Forward
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs(self.results_dir, exist_ok=True)
    
    def load_signals_data(self, signals_file=None) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            file_to_load = signals_file if signals_file else self.signals_file
            
            if os.path.exists(file_to_load):
                df = pd.read_csv(file_to_load)
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {file_to_load}")
            else:
                logger.error(f"‚ùå –§–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤ {file_to_load} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return pd.DataFrame()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df = df.sort_values('timestamp').reset_index(drop=True)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return pd.DataFrame()
    
    def load_features_data(self, data_file=None) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            file_to_load = data_file if data_file else self.data_file
            
            if os.path.exists(file_to_load):
                df = pd.read_parquet(file_to_load)
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ {file_to_load}")
            else:
                logger.error(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö {file_to_load} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return pd.DataFrame()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
            df['time'] = pd.to_datetime(df['time'])
            df = df.sort_values('time').reset_index(drop=True)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–º—É –∞–∫—Ç–∏–≤—É
            if 'asset' in df.columns:
                loaded_asset = df['asset'].iloc[0]
                logger.info(f"BACKTESTER: Successfully loaded data for asset: {loaded_asset}. Verifying against target asset: {self.asset}")
                if loaded_asset != self.asset:
                    logger.critical(f"CRITICAL MISMATCH: Backtester was asked to test '{self.asset}' but loaded data for '{loaded_asset}'!")
                    raise ValueError(f"Asset mismatch: expected {self.asset}, got {loaded_asset}")
            else:
                logger.warning("WARNING: 'asset' column not found in data. Skipping asset verification.")
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {e}")
            return pd.DataFrame()
    
    
    def calculate_position_size(self, capital: float, price: float, trend_agreement_weight: float = 1.0) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ SOL —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–∞"""
        position_value = capital * self.trading_params['position_size'] * trend_agreement_weight
        return position_value / price
    
    def apply_risk_management(self, signal: Dict, current_positions: List[Dict]) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
            if len(current_positions) >= self.trading_params['max_positions']:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            for position in current_positions:
                if position['signal'] == signal['signal']:
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                    time_diff = abs((signal['timestamp'] - position['timestamp']).total_seconds() / 3600)
                    if time_diff < 2:  # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª—ã –±–ª–∏–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if self.risk_params['volatility_filter']:
                iv = signal.get('iv', 0)  # –ï—Å–ª–∏ –ø–æ–ª–µ 'iv' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0
                if iv > 1.5:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
            if self.risk_params['session_filter']:
                session = signal['session']
                hour = signal['timestamp'].hour
                
                # –ò–∑–±–µ–≥–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
                if session == 'asian' and (hour < 2 or hour > 6):
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏: {e}")
            return False
    
    def determine_volatility_mode(self, historical_volatility: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–æ—Ä–æ–≥–æ–≤"""
        if self.volatility_thresholds is None:
            return 'mid'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –ø–æ—Ä–æ–≥–∏ –Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã
            
        low_threshold = self.volatility_thresholds['low']
        high_threshold = self.volatility_thresholds['high']
        
        if historical_volatility < low_threshold:
            return 'low'
        elif historical_volatility > high_threshold:
            return 'high'
        else:
            return 'mid'
    
    def get_trading_params_for_mode(self, mode: str) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        if self.fixed_trading_params is not None:
            logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {self.fixed_trading_params}")
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º stop_loss –∏ take_profit –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            base_stop_loss = 0.05
            atr_risk_multiplier = self.fixed_trading_params.get('atr_risk_multiplier', 2.0)
            reward_ratio = self.fixed_trading_params.get('reward_ratio', 3.0)
            
            stop_loss = base_stop_loss * (atr_risk_multiplier / 2.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0
            take_profit = stop_loss * reward_ratio
            
            return {
                'stop_loss': stop_loss,
                'take_profit': take_profit,
                'atr_risk_multiplier': atr_risk_multiplier,
                'reward_ratio': reward_ratio
            }
        
        # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        logger.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ {mode}")
        if mode == 'low':
            params = self.low_vol_params
        elif mode == 'high':
            params = self.high_vol_params
        else:  # mid
            params = self.mid_vol_params
            
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º stop_loss –∏ take_profit –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–∂–∏–º–∞
        base_stop_loss = 0.05
        atr_risk_multiplier = params.get('atr_risk_multiplier', 2.0)
        reward_ratio = params.get('reward_ratio', 3.0)
        
        stop_loss = base_stop_loss * (atr_risk_multiplier / 2.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2.0
        take_profit = stop_loss * reward_ratio
        
        return {
            'stop_loss': stop_loss,
            'take_profit': take_profit,
            'atr_risk_multiplier': atr_risk_multiplier,
            'reward_ratio': reward_ratio
        }
    
    def execute_trade(self, signal: Dict, capital: float, historical_volatility: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            price = signal['underlying_price']
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å–æ–≤–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.0, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω)
            trend_agreement_weight = signal.get('trend_agreement_weight', 1.0)
            position_size_sol = self.calculate_position_size(capital, price, trend_agreement_weight)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            vol_mode = self.determine_volatility_mode(historical_volatility)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
            mode_params = self.get_trading_params_for_mode(vol_mode)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            execution_price = price * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
            
            trade = {
                'timestamp': signal['timestamp'],
                'signal': signal['signal'],
                'confidence': signal['confidence'],
                'entry_price': execution_price,
                'position_size_sol': position_size_sol,
                'position_value_usd': position_size_sol * execution_price,
                'session': signal['session'],
                'timeframe': signal['timeframe'],
                'reason': signal['reason'],
                'status': 'open',
                'exit_price': None,
                'exit_timestamp': None,
                'pnl': None,
                'pnl_percent': None,
                'volatility_mode': vol_mode,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
                'mode_params': mode_params    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞
            }
            
            return trade
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return {}
    
    def check_exit_conditions(self, trade: Dict, current_price: float, current_timestamp: datetime) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = trade['entry_price']
        signal_type = trade['signal']
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–¥–µ–ª–∫–∏ (–æ–Ω–∏ —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏)
        mode_params = trade.get('mode_params', {})
        stop_loss = mode_params.get('stop_loss', 0.05)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        take_profit = mode_params.get('take_profit', 0.15)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π P&L
        if signal_type == 'LONG':
            pnl_percent = (current_price - entry_price) / entry_price
        else:  # SHORT
            pnl_percent = (entry_price - current_price) / entry_price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        if pnl_percent <= -stop_loss:
            return True, 'stop_loss'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if pnl_percent >= take_profit:
            return True, 'take_profit'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 4 —á–∞—Å–∞)
        time_in_position = (current_timestamp - trade['timestamp']).total_seconds() / 3600
        if time_in_position >= 4:
            return True, 'time_exit'
        
        return False, ''
    
    def run_backtest(self) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            signals_df = self.load_signals_data()
            if signals_df.empty:
                return {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            capital = self.trading_params['initial_capital']
            open_positions = []
            closed_trades = []
            equity_curve = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º
            for idx, signal in signals_df.iterrows():
                signal_dict = signal.to_dict()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–∏–≥–Ω–∞–ª–∞
                signal_type = signal_dict.get('signal')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
                open_price = signal_dict.get('open_price')
                close_price = signal_dict.get('close_price')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                # –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
                if open_price is not None and close_price is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    positions_to_remove = []
                    for i, position in enumerate(open_positions):
                        should_exit, exit_reason = self.check_exit_conditions(position, open_price, signal_dict['timestamp'])
                        
                        if should_exit:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
                            # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                            # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª—é—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                            exit_price = open_price * (1 - self.trading_params['commission'] - self.trading_params['slippage']) if position['signal'] == 'LONG' else open_price * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                            if position['signal'] == 'LONG':
                                pnl = (exit_price - position['entry_price']) * position['position_size_sol']
                            else:
                                pnl = (position['entry_price'] - exit_price) * position['position_size_sol']
                            
                            pnl_percent = pnl / position['position_value_usd']
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            position.update({
                                'exit_price': exit_price,
                                'exit_timestamp': signal_dict['timestamp'],
                                'pnl': pnl,
                                'pnl_percent': pnl_percent,
                                'status': 'closed',
                                'exit_reason': exit_reason
                            })
                            
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
                            closed_trades.append(position)
                            positions_to_remove.append(i)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
                            capital += pnl
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Ç–µ—Ä—å
                            if capital < self.trading_params['initial_capital'] * (1 - self.risk_params['max_drawdown']):
                                logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {capital:.2f} USD")
                                break
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
                    for i in reversed(positions_to_remove):
                        open_positions.pop(i)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ (–µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–∞)
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    positions_to_remove = []
                    for i, position in enumerate(open_positions):
                        should_exit, exit_reason = self.check_exit_conditions(position, close_price, signal_dict['timestamp'])
                        
                        if should_exit:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è
                            # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                            # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ü–µ–Ω–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–ª—é—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                            exit_price = close_price * (1 - self.trading_params['commission'] - self.trading_params['slippage']) if position['signal'] == 'LONG' else close_price * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                            if position['signal'] == 'LONG':
                                pnl = (exit_price - position['entry_price']) * position['position_size_sol']
                            else:
                                pnl = (position['entry_price'] - exit_price) * position['position_size_sol']
                            
                            pnl_percent = pnl / position['position_value_usd']
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            position.update({
                                'exit_price': exit_price,
                                'exit_timestamp': signal_dict['timestamp'],
                                'pnl': pnl,
                                'pnl_percent': pnl_percent,
                                'status': 'closed',
                                'exit_reason': exit_reason
                            })
                            
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
                            closed_trades.append(position)
                            positions_to_remove.append(i)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
                            capital += pnl
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Ç–µ—Ä—å
                            if capital < self.trading_params['initial_capital'] * (1 - self.risk_params['max_drawdown']):
                                logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {capital:.2f} USD")
                                break
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ –Ω–∞—Ä—É—à–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã)
                    for i in reversed(positions_to_remove):
                        open_positions.pop(i)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
                if signal_type in ['CLOSE_LONG', 'CLOSE_SHORT']:
                    # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é
                    position_to_remove_index = None
                    for i, position in enumerate(open_positions):
                        if (signal_type == 'CLOSE_LONG' and position['signal'] == 'LONG') or \
                           (signal_type == 'CLOSE_SHORT' and position['signal'] == 'SHORT'):
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–π —Å–≤–µ—á–∏
                            # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                            # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ü–µ–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–ª—é—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                            open_price = signal_dict.get('open_price', position['entry_price'])
                            exit_price = open_price * (1 - self.trading_params['commission'] - self.trading_params['slippage']) if position['signal'] == 'LONG' else open_price * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                            if position['signal'] == 'LONG':
                                pnl = (exit_price - position['entry_price']) * position['position_size_sol']
                            else:
                                pnl = (position['entry_price'] - exit_price) * position['position_size_sol']
                            
                            pnl_percent = pnl / position['position_value_usd']
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            position.update({
                                'exit_price': exit_price,
                                'exit_timestamp': signal_dict['timestamp'],
                                'pnl': pnl,
                                'pnl_percent': pnl_percent,
                                'status': 'closed',
                                'exit_reason': 'signal_close'
                            })
                            
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
                            closed_trades.append(position)
                            position_to_remove_index = i
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
                            capital += pnl
                            break  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –∑–∞ —Ä–∞–∑
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–∫—Ä—ã—Ç—É—é –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                    if position_to_remove_index is not None:
                        open_positions.pop(position_to_remove_index)
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
                    if not self.apply_risk_management(signal_dict, open_positions):
                        continue
                    
                    # –î–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ historical_volatility –≤ execute_trade, –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –∏–∑ features_data
                    # –ü–æ—Å–∫–æ–ª—å–∫—É signals_df –∏ full_data (–∏–∑ run_walk_forward_backtest) –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏,
                    # –º—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ full_data –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–∏–≥–Ω–∞–ª–∞.
                    # –û–¥–Ω–∞–∫–æ –≤ run_backtest —É –Ω–∞—Å –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ full_data.
                    # –í run_walk_forward_backtest –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º run_backtest –º—ã –º–æ–∂–µ–º –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
                    # –ù–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ signals_df —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è historical_volatility.
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤ signal_dict –ø–æ–ª–µ historical_volatility. –ï—Å–ª–∏ –Ω–µ—Ç, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
                    historical_volatility = signal_dict.get('historical_volatility_24h', 0.0)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                    trade = self.execute_trade(signal_dict, capital, historical_volatility)
                    if not trade:
                        continue
                    
                    open_positions.append(trade)
                    
                    # –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è "look-ahead bias" –º—ã –Ω–µ —Å–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã,
                    # –∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
                    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –≤—ã—Ö–æ–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å
                    # –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏ –∫–∞–ø–∏—Ç–∞–ª
                if capital <= 0:
                    logger.error(f"‚ùå –î–µ–ø–æ–∑–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {signal_dict['timestamp']}")
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
                    for position in open_positions:
                        # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                        # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ –ø–ª—é—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                        exit_price = position['entry_price'] * (1 - self.trading_params['commission'] - self.trading_params['slippage']) if position['signal'] == 'LONG' else position['entry_price'] * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                        if position['signal'] == 'LONG':
                            pnl = (exit_price - position['entry_price']) * position['position_size_sol']
                        else:
                            pnl = (position['entry_price'] - exit_price) * position['position_size_sol']
                        
                        pnl_percent = pnl / position['position_value_usd']
                        
                        position.update({
                            'exit_price': exit_price,
                            'exit_timestamp': signal_dict['timestamp'],
                            'pnl': pnl,
                            'pnl_percent': pnl_percent,
                            'status': 'closed',
                            'exit_reason': 'margin_call'
                        })
                        closed_trades.append(position)
                    open_positions.clear()
                    break  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É equity curve
                equity_curve.append({
                    'timestamp': signal_dict['timestamp'],
                    'capital': capital,
                    'open_positions': len(open_positions)
                })
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if idx % 100 == 0:
                    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(signals_df)} —Å–∏–≥–Ω–∞–ª–æ–≤, –∫–∞–ø–∏—Ç–∞–ª: {capital:.2f} USD")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è
            for position in open_positions:
                # –î–ª—è LONG –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø—Ä–æ–¥–∞–µ–º –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ –º–∏–Ω—É—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                # –î–ª—è SHORT –ø–æ–∑–∏—Ü–∏–∏ –º—ã –ø–æ–∫—É–ø–∞–µ–º –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞ –ø–ª—é—Å –∫–æ–º–∏—Å—Å–∏—è –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
                exit_price = position['entry_price'] * (1 - self.trading_params['commission'] - self.trading_params['slippage']) if position['signal'] == 'LONG' else position['entry_price'] * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                if position['signal'] == 'LONG':
                    pnl = (exit_price - position['entry_price']) * position['position_size_sol']
                else:
                    pnl = (position['entry_price'] - exit_price) * position['position_size_sol']
                
                pnl_percent = pnl / position['position_value_usd']
                
                position.update({
                    'exit_price': exit_price,
                    'exit_timestamp': signals_df.iloc[-1]['timestamp'],
                    'pnl': pnl,
                    'pnl_percent': pnl_percent,
                    'status': 'closed',
                    'exit_reason': 'end_of_period'
                })
                closed_trades.append(position)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.trades_history = closed_trades
            self.equity_curve = equity_curve
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.calculate_performance_metrics(closed_trades, equity_curve)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_backtest_results(closed_trades, equity_curve)
            
            logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return self.performance_metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ: {e}")
            return {}
    
    def calculate_performance_metrics(self, trades: List[Dict], equity_curve: List[Dict]) -> None:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not trades:
                return
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_trades = len(trades)
            winning_trades = len([t for t in trades if t['pnl'] > 0])
            losing_trades = len([t for t in trades if t['pnl'] < 0])
            
            win_rate = winning_trades / total_trades if total_trades > 0 else 0
            
            # P&L –º–µ—Ç—Ä–∏–∫–∏
            total_pnl = sum(t['pnl'] for t in trades)
            avg_pnl = total_pnl / total_trades if total_trades > 0 else 0
            
            winning_pnl = sum(t['pnl'] for t in trades if t['pnl'] > 0)
            losing_pnl = sum(t['pnl'] for t in trades if t['pnl'] < 0)
            
            avg_win = winning_pnl / winning_trades if winning_trades > 0 else 0
            avg_loss = losing_pnl / losing_trades if losing_trades > 0 else 0
            
            profit_factor = abs(winning_pnl / losing_pnl) if losing_pnl != 0 else float('inf')
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
            initial_capital = self.trading_params['initial_capital']
            final_capital = initial_capital + total_pnl
            
            total_return = (final_capital - initial_capital) / initial_capital
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
            if equity_curve:
                capitals = [e['capital'] for e in equity_curve]
                peak = initial_capital
                max_drawdown = 0
                
                for capital in capitals:
                    if capital > peak:
                        peak = capital
                    drawdown = (peak - capital) / peak
                    max_drawdown = max(max_drawdown, drawdown)
            else:
                max_drawdown = 0
            
            # Sharpe Ratio (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç)
            sharpe_ratio = 0
            annualized_return = 0
            calmar_ratio = 0
            
            if equity_curve and len(equity_curve) > 1:
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
                returns = []
                for i in range(1, len(equity_curve)):
                    prev_capital = equity_curve[i-1]['capital']
                    curr_capital = equity_curve[i]['capital']
                    if prev_capital > 0:
                        ret = (curr_capital - prev_capital) / prev_capital
                        returns.append(ret)
                    else:
                        returns.append(0)
                
                if returns:
                    # –î–ª—è –º–∏–Ω—É—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: 365 * 24 * 60 –ø–µ—Ä–∏–æ–¥–æ–≤ –≤ –≥–æ–¥—É
                    periods_per_year = 365 * 24 * 60
                    
                    # –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–µ—Ä–∏–æ–¥
                    avg_return = np.mean(returns)
                    std_return = np.std(returns)
                    
                    # –ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                    annualized_return = ((1 + avg_return) ** periods_per_year) - 1
                    
                    # Sharpe Ratio
                    if std_return != 0:
                        sharpe_ratio = (avg_return / std_return) * np.sqrt(periods_per_year)
                    
                    # Calmar Ratio
                    if max_drawdown != 0:
                        calmar_ratio = annualized_return / abs(max_drawdown)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º
            session_stats = {}
            for trade in trades:
                session = trade['session']
                if session not in session_stats:
                    session_stats[session] = {'trades': 0, 'pnl': 0, 'wins': 0}
                
                session_stats[session]['trades'] += 1
                session_stats[session]['pnl'] += trade['pnl']
                if trade['pnl'] > 0:
                    session_stats[session]['wins'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.performance_metrics = {
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'losing_trades': losing_trades,
                'win_rate': win_rate,
                'total_pnl': total_pnl,
                'avg_pnl': avg_pnl,
                'avg_win': avg_win,
                'avg_loss': avg_loss,
                'profit_factor': profit_factor,
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'sharpe_ratio': sharpe_ratio,
                'annualized_return': annualized_return,
                'calmar_ratio': calmar_ratio,
                'initial_capital': initial_capital,
                'final_capital': final_capital,
                'session_stats': session_stats,
                'run_id': self.run_id
            }
            
            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:")
            logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            logger.info(f"   –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.2%}")
            logger.info(f"   –û–±—â–∏–π P&L: {total_pnl:.2f} USD")
            logger.info(f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2%}")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {sharpe_ratio:.3f}")
            logger.info(f"   Calmar Ratio: {calmar_ratio:.3f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def save_backtest_results(self, trades: List[Dict], equity_curve: List[Dict]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫–∏
            trades_df = pd.DataFrame(trades)
            trades_file = os.path.join(self.results_dir, 'backtest_trades.csv')
            trades_df.to_csv(trades_file, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º equity curve
            equity_df = pd.DataFrame(equity_curve)
            equity_file = os.path.join(self.results_dir, 'equity_curve.csv')
            equity_df.to_csv(equity_file, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_file = os.path.join(self.results_dir, 'performance_metrics.json')
            with open(metrics_file, 'w', encoding='utf-8') as f:
                json.dump(self.performance_metrics, f, indent=2, ensure_ascii=False, default=str)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            self.generate_backtest_report()
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_dir}/")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def generate_backtest_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É"""
        try:
            report_file = os.path.join(self.results_dir, 'backtest_report.md')
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("# üìä –û—Ç—á—ë—Ç –ø–æ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É v1.0\n\n")
                f.write("## üéØ –¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞\n")
                f.write("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n")
                
                f.write("## üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n")
                f.write("| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|---------|----------|\n")
                f.write(f"| –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ | {self.performance_metrics['total_trades']} |\n")
                f.write(f"| –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ | {self.performance_metrics['winning_trades']} |\n")
                f.write(f"| –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ | {self.performance_metrics['losing_trades']} |\n")
                f.write(f"| –í–∏–Ω—Ä–µ–π—Ç | {self.performance_metrics['win_rate']:.2%} |\n")
                f.write(f"| –û–±—â–∏–π P&L | {self.performance_metrics['total_pnl']:.2f} USD |\n")
                f.write(f"| –°—Ä–µ–¥–Ω–∏–π P&L | {self.performance_metrics['avg_pnl']:.2f} USD |\n")
                f.write(f"| –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å | {self.performance_metrics['total_return']:.2%} |\n")
                f.write(f"| –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ | {self.performance_metrics['max_drawdown']:.2%} |\n")
                f.write(f"| –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ | {self.performance_metrics['sharpe_ratio']:.3f} |\n")
                f.write(f"| Profit Factor | {self.performance_metrics['profit_factor']:.2f} |\n\n")
                
                f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º\n\n")
                f.write("| –°–µ—Å—Å–∏—è | –°–¥–µ–ª–æ–∫ | P&L | –í–∏–Ω—Ä–µ–π—Ç |\n")
                f.write("|--------|--------|-----|---------|\n")
                for session, stats in self.performance_metrics['session_stats'].items():
                    win_rate = stats['wins'] / stats['trades'] if stats['trades'] > 0 else 0
                    f.write(f"| {session} | {stats['trades']} | {stats['pnl']:.2f} USD | {win_rate:.2%} |\n")
                
                f.write("\n## üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n")
                f.write("| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|----------|----------|\n")
                for param, value in self.trading_params.items():
                    f.write(f"| {param} | {value} |\n")
                
                f.write("\n## üõ°Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏\n\n")
                f.write("| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|----------|----------|\n")
                for param, value in self.risk_params.items():
                    f.write(f"| {param} | {value} |\n")
                
                f.write("\n## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
                
                if self.performance_metrics['win_rate'] > 0.6:
                    f.write("‚úÖ **–í—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç** - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤\n")
                elif self.performance_metrics['win_rate'] > 0.5:
                    f.write("‚ö†Ô∏è **–°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
                else:
                    f.write("‚ùå **–ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n")
                
                if self.performance_metrics['profit_factor'] > 1.5:
                    f.write("‚úÖ **–í—ã—Å–æ–∫–∏–π Profit Factor** - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ —É–±—ã—Ç–∫–∞–º\n")
                elif self.performance_metrics['profit_factor'] > 1.0:
                    f.write("‚ö†Ô∏è **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π Profit Factor** - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞\n")
                else:
                    f.write("‚ùå **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Profit Factor** - —Å–∏—Å—Ç–µ–º–∞ —É–±—ã—Ç–æ—á–Ω–∞\n")
                
                if self.performance_metrics['max_drawdown'] < 0.1:
                    f.write("‚úÖ **–ù–∏–∑–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞** - —Ö–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏\n")
                elif self.performance_metrics['max_drawdown'] < 0.2:
                    f.write("‚ö†Ô∏è **–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å–∞–¥–∫–∞** - –ø—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞\n")
                else:
                    f.write("‚ùå **–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞** - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ risk management\n")
                
                f.write("\n## üèÜ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n")
                f.write("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏. ")
                f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.\n\n")
                
                f.write(f"*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n")
            
            logger.info(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    
    def run_walk_forward_backtest(self, limit_days=None) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Walk-Forward –±—ç–∫—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            full_data = self.load_features_data()
            if full_data.empty:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞")
                return
            
            # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –ª–∏–º–∏—Ç –¥–Ω–µ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            if limit_days:
                start_date = full_data['time'].max() - pd.Timedelta(days=limit_days)
                full_data = full_data[full_data['time'] >= start_date]
                logger.info(f"üìâ –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {limit_days} –¥–Ω–µ–π")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            full_data = full_data.sort_values('time').reset_index(drop=True)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–æ–Ω
            train_window_size_days = self.walk_forward_params['train_window_size_days']
            test_window_size_days = self.walk_forward_params['test_window_size_days']
            step_size_days = self.walk_forward_params['step_size_days']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã
            start_date = full_data['time'].min()
            end_date = full_data['time'].max()
            
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {start_date} - {end_date}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            all_trades = []
            all_equity_curves = []
            walk_forward_results = []
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Walk-Forward
            current_date = start_date
            
            while current_date + pd.Timedelta(days=train_window_size_days + test_window_size_days) <= end_date:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—É—á–∞—é—â–µ–≥–æ –æ–∫–Ω–∞
                train_start = current_date
                train_end = current_date + pd.Timedelta(days=train_window_size_days)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –æ–∫–Ω–∞
                test_start = train_end
                test_end = train_end + pd.Timedelta(days=test_window_size_days)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –∏ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                train_data = full_data[(full_data['time'] >= train_start) & (full_data['time'] < train_end)]
                test_data = full_data[(full_data['time'] >= test_start) & (full_data['time'] < test_end)]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–∞ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø—É—Å—Ç—ã
                if not train_data.empty and not test_data.empty:
                    logger.info(f"üîÑ Processing Train: {train_start} - {train_end}, Test: {test_start} - {test_end}")
                    logger.info(f"   üìä Train data: {len(train_data)} records, Test data: {len(test_data)} records")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–º —Å—Ä–µ–∑–µ
                    thresholds = self.calculate_thresholds(train_data, z_score_threshold=self.z_score_threshold)
                    logger.info(f"   üìä –ü–æ—Ä–æ–≥–∏: –Ω–∏–∂–Ω–∏–π = {thresholds['lower_threshold']:.4f}, –≤–µ—Ä—Ö–Ω–∏–π = {thresholds['upper_threshold']:.4f}")
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ (33-–π –∏ 66-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏)
                    if 'historical_volatility_24h' in train_data.columns:
                        vol_data = train_data['historical_volatility_24h'].dropna()
                        if len(vol_data) > 0:
                            low_vol_threshold = np.percentile(vol_data, 33)
                            high_vol_threshold = np.percentile(vol_data, 66)
                            self.volatility_thresholds = {
                                'low': low_vol_threshold,
                                'high': high_vol_threshold
                            }
                            logger.info(f"   üìä –ü–æ—Ä–æ–≥–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: low = {low_vol_threshold:.6f}, high = {high_vol_threshold:.6f}")
                        else:
                            logger.warning("   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ä–æ–≥–æ–≤ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
                            self.volatility_thresholds = None
                    else:
                        logger.warning("   ‚ö†Ô∏è –í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ historical_volatility_24h")
                        self.volatility_thresholds = None
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–º —Å—Ä–µ–∑–µ
                    test_signals_df = self.generate_signals_from_data(test_data, thresholds, z_score_threshold=self.z_score_threshold, sma_period=self.sma_period)
                    logger.info(f"   üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(test_signals_df)}")
                    
                    if not test_signals_df.empty:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                        original_signals_file = self.signals_file
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞
                        temp_signals_file = f"temp_signals_{test_start.strftime('%Y%m%d')}_{test_end.strftime('%Y%m%d')}.csv"
                        test_signals_df.to_csv(temp_signals_file, index=False)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤
                        self.signals_file = temp_signals_file
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        window_results = self.run_backtest()
                        
                        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤
                        self.signals_file = original_signals_file
                        
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        if os.path.exists(temp_signals_file):
                            os.remove(temp_signals_file)
                            
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –æ–∫–Ω–∞
                        if window_results:
                            walk_forward_results.append({
                                'train_period': (train_start, train_end),
                                'test_period': (test_start, test_end),
                                'thresholds': thresholds,
                                'signals_count': len(test_signals_df),
                                'metrics': window_results
                            })
                            # –î–æ–±–∞–≤–ª—è–µ–º —Å–¥–µ–ª–∫–∏ –∏ –∫—Ä–∏–≤—É—é —ç–∫–≤–∏—Ç–∏ –≤ –æ–±—â–∏–µ —Å–ø–∏—Å–∫–∏
                            all_trades.extend(self.trades_history)
                            all_equity_curves.extend(self.equity_curve)
                
                # –°–¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ
                current_date += pd.Timedelta(days=step_size_days)
            
            logger.info("‚úÖ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Walk-Forward
            self.walk_forward_results = walk_forward_results
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.aggregate_walk_forward_results(walk_forward_results)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–µ: {e}")
    
    def aggregate_walk_forward_results(self, results: List[Dict]) -> None:
        """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            logger.info("üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Walk-Forward...")
            logger.info(f"   –í—Å–µ–≥–æ –æ–∫–æ–Ω: {len(results)}")
            
            if not results:
                logger.warning("   –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
                return
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ–∫–æ–Ω
            all_metrics = []
            all_sharpe_ratios = []
            all_returns = []
            all_drawdowns = []
            
            # –î–ª—è "—Å—à–∏–≤–∞–Ω–∏—è" –∫—Ä–∏–≤—ã—Ö —ç–∫–≤–∏—Ç–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å equity_curve –∏–∑ –≤—Å–µ—Ö –æ–∫–æ–Ω
            # –∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –∫—Ä–∏–≤–æ–π
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏ –∏–∑ –≤—Å–µ—Ö –æ–∫–æ–Ω
            all_trades = []
            for result in results:
                # –£ –∫–∞–∂–¥–æ–≥–æ –æ–∫–Ω–∞ –µ—Å—Ç—å —Å–≤–æ–∏ –º–µ—Ç—Ä–∏–∫–∏, –Ω–æ –º—ã —Ö–æ—Ç–∏–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                # –ü–æ—ç—Ç–æ–º—É —Å–æ–±–µ—Ä–µ–º –≤—Å–µ —Å–¥–µ–ª–∫–∏
                pass  # –°–¥–µ–ª–∫–∏ —É–∂–µ —Å–æ–±—Ä–∞–Ω—ã –≤ run_walk_forward_backtest
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∫—Ä–∏–≤—É—é —ç–∫–≤–∏—Ç–∏
            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
            self.calculate_performance_metrics(self.trades_history, self.equity_curve)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            self.generate_backtest_report()
            
            # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –æ–∫–Ω–∞–º
            logger.info("   üìä –°–≤–æ–¥–∫–∞ –ø–æ –æ–∫–Ω–∞–º:")
            for i, result in enumerate(results):
                train_period = result['train_period']
                test_period = result['test_period']
                signals_count = result['signals_count']
                metrics = result['metrics']
                
                logger.info(f"   –û–∫–Ω–æ {i+1}: Train {train_period[0].strftime('%Y-%m-%d')} - {train_period[1].strftime('%Y-%m-%d')}, "
                           f"Test {test_period[0].strftime('%Y-%m-%d')} - {test_period[1].strftime('%Y-%m-%d')}")
                logger.info(f"     –°–∏–≥–Ω–∞–ª–æ–≤: {signals_count}, Sharpe: {metrics.get('sharpe_ratio', 0):.3f}, "
                           f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {metrics.get('total_return', 0):.2%}, –ü—Ä–æ—Å–∞–¥–∫–∞: {metrics.get('max_drawdown', 0):.2%}")
            
            logger.info("‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def run(self, walk_forward=False, limit_days=None):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            if walk_forward:
                logger.info("üöÄ –ó–∞–ø—É—Å–∫ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
                self.run_walk_forward_backtest(limit_days=limit_days)
            else:
                logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
                results = self.run_backtest()
                
                if results:
                    logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_dir}/")
                else:
                    logger.error("‚ùå –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Advanced Backtest System')
    parser.add_argument('--walk_forward', action='store_true', help='Run Walk-Forward backtest')
    parser.add_argument('--limit_days', type=int, default=None, help='Limit the number of days for backtest')
    parser.add_argument('--z_score_threshold', type=float, default=2.0, help='Z-Score threshold for signal generation')
    parser.add_argument('--low_vol_params', type=str, default=None, help='JSON string with low volatility parameters (atr_risk_multiplier, reward_ratio)')
    parser.add_argument('--mid_vol_params', type=str, default=None, help='JSON string with mid volatility parameters (atr_risk_multiplier, reward_ratio)')
    parser.add_argument('--high_vol_params', type=str, default=None, help='JSON string with high volatility parameters (atr_risk_multiplier, reward_ratio)')
    parser.add_argument('--initial_capital', type=float, default=10000, help='Initial capital for backtest')
    parser.add_argument('--signals_file', type=str, default='candle_signals.csv', help='Path to signals file')
    parser.add_argument('--position_size', type=float, default=0.1, help='Position size as fraction of capital (default: 0.1)')
    parser.add_argument('--fixed_trading_params', type=str, default=None, help='JSON string with fixed trading parameters (atr_risk_multiplier, reward_ratio)')
    parser.add_argument('--results_dir', type=str, default=None, help='Directory for backtest results')
    parser.add_argument('--data_file', type=str, default='basis_features_1m.parquet', help='Path to features data file')
    parser.add_argument('--asset', type=str, default='SOL', help='Asset to backtest (SOL or BTC)')
    parser.add_argument('--signal_generator_module', type=str, default='basis_signal_generator', help='Signal generator module to use')
    
    args = parser.parse_args()
    
    # –ü–∞—Ä—Å–∏–º JSON-—Å—Ç—Ä–æ–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
    import json
    low_vol_params = None
    mid_vol_params = None
    high_vol_params = None
    fixed_trading_params = None
    
    if args.low_vol_params:
        try:
            low_vol_params = json.loads(args.low_vol_params)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ low_vol_params: {e}")
            low_vol_params = None
    
    if args.mid_vol_params:
        try:
            mid_vol_params = json.loads(args.mid_vol_params)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ mid_vol_params: {e}")
            mid_vol_params = None
            
    if args.high_vol_params:
        try:
            high_vol_params = json.loads(args.high_vol_params)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ high_vol_params: {e}")
            high_vol_params = None
            
    if args.fixed_trading_params:
        try:
            fixed_trading_params = json.loads(args.fixed_trading_params)
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ fixed_trading_params: {e}")
            fixed_trading_params = None
    
    backtest = AdvancedBacktestSystem(
        z_score_threshold=args.z_score_threshold,
        low_vol_params=low_vol_params,
        mid_vol_params=mid_vol_params,
        high_vol_params=high_vol_params,
        initial_capital=args.initial_capital,
        position_size=args.position_size,
        fixed_trading_params=fixed_trading_params,
        signals_file=args.signals_file,
        results_dir=args.results_dir,
        data_file=args.data_file,
        asset=args.asset,
        signal_generator_module=args.signal_generator_module
    )
    backtest.run(walk_forward=args.walk_forward, limit_days=args.limit_days)
