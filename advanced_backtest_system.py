#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ v1.0 - –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 25.08.2025 - 03.09.2025
"""

import pandas as pd
import numpy as np
import sqlite3
from datetime import datetime, timedelta
from logger import get_logger
import json
import os
from typing import Dict, List, Tuple, Optional

logger = get_logger()

class AdvancedBacktestSystem:
    def __init__(self):
        self.db_path = 'data/options_enriched.db'
        self.signals_file = 'signals_optimized_extended.csv'
        self.results_dir = 'backtest_results'
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.trading_params = {
            'initial_capital': 10000,      # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª –≤ USD
            'position_size': 0.1,         # 10% –æ—Ç –∫–∞–ø–∏—Ç–∞–ª–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
            'max_positions': 5,           # –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
            'stop_loss': 0.05,            # 5% —Å—Ç–æ–ø-–ª–æ—Å—Å
            'take_profit': 0.15,          # 15% —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
            'commission': 0.001,          # 0.1% –∫–æ–º–∏—Å—Å–∏—è
            'slippage': 0.0005            # 0.05% –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        }
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
        self.risk_params = {
            'max_daily_loss': 0.05,       # –ú–∞–∫—Å–∏–º—É–º 5% –ø–æ—Ç–µ—Ä—å –≤ –¥–µ–Ω—å
            'max_drawdown': 0.20,         # –ú–∞–∫—Å–∏–º—É–º 20% –ø—Ä–æ—Å–∞–¥–∫–∏
            'correlation_threshold': 0.7,  # –ü–æ—Ä–æ–≥ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏
            'volatility_filter': True,     # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            'session_filter': True        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.performance_metrics = {}
        self.trades_history = []
        self.equity_curve = []
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        os.makedirs(self.results_dir, exist_ok=True)
    
    def load_signals_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            if os.path.exists(self.signals_file):
                df = pd.read_csv(self.signals_file)
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–∏–≥–Ω–∞–ª–æ–≤ –∏–∑ {self.signals_file}")
            else:
                logger.error(f"‚ùå –§–∞–π–ª —Å–∏–≥–Ω–∞–ª–æ–≤ {self.signals_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return pd.DataFrame()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp
            df['timestamp'] = pd.to_datetime(df['timestamp'])
            df = df.sort_values('timestamp').reset_index(drop=True)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
            return pd.DataFrame()
    
    def simulate_price_movement(self, signal: Dict, duration_hours: int = 24) -> List[Dict]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        base_price = signal['underlying_price']
        signal_type = signal['signal']
        confidence = signal['confidence']
        iv = signal['iv']
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
        volatility = iv * 0.8  # –ò—Å–ø–æ–ª—å–∑—É–µ–º IV –∫–∞–∫ –±–∞–∑—É –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        trend_strength = confidence * 0.6  # –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (–∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç)
        time_points = []
        for i in range(duration_hours * 4):  # 4 —Ç–æ—á–∫–∏ –≤ —á–∞—Å
            time_points.append(i * 0.25)
        
        price_movements = []
        current_price = base_price
        
        for t in time_points:
            # –ë–∞–∑–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
            if signal_type == 'LONG':
                trend_component = trend_strength * t * 0.01  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
            else:
                trend_component = -trend_strength * t * 0.01  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥
            
            # –°–ª—É—á–∞–π–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è (–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å)
            random_component = np.random.normal(0, volatility * 0.01)
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
            price_change = trend_component + random_component
            current_price = current_price * (1 + price_change)
            
            price_movements.append({
                'timestamp': signal['timestamp'] + timedelta(hours=t),
                'price': current_price,
                'change': price_change,
                'cumulative_change': (current_price - base_price) / base_price
            })
        
        return price_movements
    
    def calculate_position_size(self, capital: float, price: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ SOL"""
        position_value = capital * self.trading_params['position_size']
        return position_value / price
    
    def apply_risk_management(self, signal: Dict, current_positions: List[Dict]) -> bool:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–∑–∏—Ü–∏–π
            if len(current_positions) >= self.trading_params['max_positions']:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
            for position in current_positions:
                if position['signal'] == signal['signal']:
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–æ–∑–∏—Ü–∏—è –≤ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
                    time_diff = abs((signal['timestamp'] - position['timestamp']).total_seconds() / 3600)
                    if time_diff < 2:  # –ï—Å–ª–∏ —Å–∏–≥–Ω–∞–ª—ã –±–ª–∏–∑–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                        return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if self.risk_params['volatility_filter']:
                if signal['iv'] > 1.5:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                    return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
            if self.risk_params['session_filter']:
                session = signal['session']
                hour = signal['timestamp'].hour
                
                # –ò–∑–±–µ–≥–∞–µ–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
                if session == 'asian' and (hour < 2 or hour > 6):
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞–º–∏: {e}")
            return False
    
    def execute_trade(self, signal: Dict, capital: float) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        try:
            price = signal['underlying_price']
            position_size_sol = self.calculate_position_size(capital, price)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∏—Å—Å–∏—é –∏ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
            execution_price = price * (1 + self.trading_params['commission'] + self.trading_params['slippage'])
            
            trade = {
                'timestamp': signal['timestamp'],
                'signal': signal['signal'],
                'confidence': signal['confidence'],
                'entry_price': execution_price,
                'position_size_sol': position_size_sol,
                'position_value_usd': position_size_sol * execution_price,
                'session': signal['session'],
                'timeframe': signal['timeframe'],
                'reason': signal['reason'],
                'status': 'open',
                'exit_price': None,
                'exit_timestamp': None,
                'pnl': None,
                'pnl_percent': None
            }
            
            return trade
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏: {e}")
            return {}
    
    def check_exit_conditions(self, trade: Dict, current_price: float) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏"""
        entry_price = trade['entry_price']
        signal_type = trade['signal']
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π P&L
        if signal_type == 'LONG':
            pnl_percent = (current_price - entry_price) / entry_price
        else:  # SHORT
            pnl_percent = (entry_price - current_price) / entry_price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å
        if pnl_percent <= -self.trading_params['stop_loss']:
            return True, 'stop_loss'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        if pnl_percent >= self.trading_params['take_profit']:
            return True, 'take_profit'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –≤ –ø–æ–∑–∏—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞)
        time_in_position = (datetime.now() - trade['timestamp']).total_seconds() / 3600
        if time_in_position >= 24:
            return True, 'time_exit'
        
        return False, ''
    
    def run_backtest(self) -> Dict:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            signals_df = self.load_signals_data()
            if signals_df.empty:
                return {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            capital = self.trading_params['initial_capital']
            open_positions = []
            closed_trades = []
            equity_curve = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–∏–≥–Ω–∞–ª–∞–º
            for idx, signal in signals_df.iterrows():
                signal_dict = signal.to_dict()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
                if not self.apply_risk_management(signal_dict, open_positions):
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–¥–µ–ª–∫—É
                trade = self.execute_trade(signal_dict, capital)
                if not trade:
                    continue
                
                open_positions.append(trade)
                
                # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                price_movements = self.simulate_price_movement(signal_dict)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—ã—Ö–æ–¥–∞
                for price_data in price_movements:
                    current_price = price_data['price']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
                    for i, position in enumerate(open_positions[:]):
                        should_exit, exit_reason = self.check_exit_conditions(position, current_price)
                        
                        if should_exit:
                            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                            exit_price = current_price * (1 - self.trading_params['commission'] - self.trading_params['slippage'])
                            
                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º P&L
                            if position['signal'] == 'LONG':
                                pnl = (exit_price - position['entry_price']) * position['position_size_sol']
                            else:
                                pnl = (position['entry_price'] - exit_price) * position['position_size_sol']
                            
                            pnl_percent = pnl / position['position_value_usd']
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                            position.update({
                                'exit_price': exit_price,
                                'exit_timestamp': price_data['timestamp'],
                                'pnl': pnl,
                                'pnl_percent': pnl_percent,
                                'status': 'closed',
                                'exit_reason': exit_reason
                            })
                            
                            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏
                            closed_trades.append(position)
                            open_positions.pop(i)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª
                            capital += pnl
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–æ—Ç–µ—Ä—å
                            if capital < self.trading_params['initial_capital'] * (1 - self.risk_params['max_drawdown']):
                                logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø—Ä–æ—Å–∞–¥–∫–∏: {capital:.2f} USD")
                                break
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É equity curve
                equity_curve.append({
                    'timestamp': signal_dict['timestamp'],
                    'capital': capital,
                    'open_positions': len(open_positions)
                })
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                if idx % 100 == 0:
                    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{len(signals_df)} —Å–∏–≥–Ω–∞–ª–æ–≤, –∫–∞–ø–∏—Ç–∞–ª: {capital:.2f} USD")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–∑–∏—Ü–∏–∏
            for position in open_positions:
                position.update({
                    'exit_price': position['entry_price'],  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞
                    'exit_timestamp': signals_df.iloc[-1]['timestamp'],
                    'pnl': 0,
                    'pnl_percent': 0,
                    'status': 'closed',
                    'exit_reason': 'end_of_period'
                })
                closed_trades.append(position)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.trades_history = closed_trades
            self.equity_curve = equity_curve
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.calculate_performance_metrics(closed_trades, equity_curve)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.save_backtest_results(closed_trades, equity_curve)
            
            logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return self.performance_metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–µ: {e}")
            return {}
    
    def calculate_performance_metrics(self, trades: List[Dict], equity_curve: List[Dict]) -> None:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            if not trades:
                return
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            total_trades = len(trades)
            winning_trades = len([t for t in trades if t['pnl'] > 0])
            losing_trades = len([t for t in trades if t['pnl'] < 0])
            
            win_rate = winning_trades / total_trades if total_trades > 0 else 0
            
            # P&L –º–µ—Ç—Ä–∏–∫–∏
            total_pnl = sum(t['pnl'] for t in trades)
            avg_pnl = total_pnl / total_trades if total_trades > 0 else 0
            
            winning_pnl = sum(t['pnl'] for t in trades if t['pnl'] > 0)
            losing_pnl = sum(t['pnl'] for t in trades if t['pnl'] < 0)
            
            avg_win = winning_pnl / winning_trades if winning_trades > 0 else 0
            avg_loss = losing_pnl / losing_trades if losing_trades > 0 else 0
            
            profit_factor = abs(winning_pnl / losing_pnl) if losing_pnl != 0 else float('inf')
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
            initial_capital = self.trading_params['initial_capital']
            final_capital = initial_capital + total_pnl
            
            total_return = (final_capital - initial_capital) / initial_capital
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å–∞–¥–∫—É
            if equity_curve:
                capitals = [e['capital'] for e in equity_curve]
                peak = initial_capital
                max_drawdown = 0
                
                for capital in capitals:
                    if capital > peak:
                        peak = capital
                    drawdown = (peak - capital) / peak
                    max_drawdown = max(max_drawdown, drawdown)
            else:
                max_drawdown = 0
            
            # Sharpe Ratio (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            if equity_curve and len(equity_curve) > 1:
                returns = []
                for i in range(1, len(equity_curve)):
                    prev_capital = equity_curve[i-1]['capital']
                    curr_capital = equity_curve[i]['capital']
                    ret = (curr_capital - prev_capital) / prev_capital
                    returns.append(ret)
                
                if returns:
                    avg_return = np.mean(returns)
                    std_return = np.std(returns)
                    sharpe_ratio = avg_return / std_return if std_return != 0 else 0
                else:
                    sharpe_ratio = 0
            else:
                sharpe_ratio = 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Å—Å–∏—è–º
            session_stats = {}
            for trade in trades:
                session = trade['session']
                if session not in session_stats:
                    session_stats[session] = {'trades': 0, 'pnl': 0, 'wins': 0}
                
                session_stats[session]['trades'] += 1
                session_stats[session]['pnl'] += trade['pnl']
                if trade['pnl'] > 0:
                    session_stats[session]['wins'] += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            self.performance_metrics = {
                'total_trades': total_trades,
                'winning_trades': winning_trades,
                'losing_trades': losing_trades,
                'win_rate': win_rate,
                'total_pnl': total_pnl,
                'avg_pnl': avg_pnl,
                'avg_win': avg_win,
                'avg_loss': avg_loss,
                'profit_factor': profit_factor,
                'total_return': total_return,
                'max_drawdown': max_drawdown,
                'sharpe_ratio': sharpe_ratio,
                'initial_capital': initial_capital,
                'final_capital': final_capital,
                'session_stats': session_stats
            }
            
            logger.info(f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã:")
            logger.info(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {total_trades}")
            logger.info(f"   –í–∏–Ω—Ä–µ–π—Ç: {win_rate:.2%}")
            logger.info(f"   –û–±—â–∏–π P&L: {total_pnl:.2f} USD")
            logger.info(f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:.2%}")
            logger.info(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2%}")
            logger.info(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: {sharpe_ratio:.3f}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def save_backtest_results(self, trades: List[Dict], equity_curve: List[Dict]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–¥–µ–ª–∫–∏
            trades_df = pd.DataFrame(trades)
            trades_file = os.path.join(self.results_dir, 'backtest_trades.csv')
            trades_df.to_csv(trades_file, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º equity curve
            equity_df = pd.DataFrame(equity_curve)
            equity_file = os.path.join(self.results_dir, 'equity_curve.csv')
            equity_df.to_csv(equity_file, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics_file = os.path.join(self.results_dir, 'performance_metrics.json')
            with open(metrics_file, 'w', encoding='utf-8') as f:
                json.dump(self.performance_metrics, f, indent=2, ensure_ascii=False, default=str)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            self.generate_backtest_report()
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_dir}/")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    def generate_backtest_report(self) -> None:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫—Ç–µ—Å—Ç—É"""
        try:
            report_file = os.path.join(self.results_dir, 'backtest_report.md')
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("# üìä –û—Ç—á—ë—Ç –ø–æ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º—É –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥—É v1.0\n\n")
                f.write("## üéØ –¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞\n")
                f.write("–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.\n\n")
                
                f.write("## üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n\n")
                f.write("| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|---------|----------|\n")
                f.write(f"| –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ | {self.performance_metrics['total_trades']} |\n")
                f.write(f"| –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ | {self.performance_metrics['winning_trades']} |\n")
                f.write(f"| –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ | {self.performance_metrics['losing_trades']} |\n")
                f.write(f"| –í–∏–Ω—Ä–µ–π—Ç | {self.performance_metrics['win_rate']:.2%} |\n")
                f.write(f"| –û–±—â–∏–π P&L | {self.performance_metrics['total_pnl']:.2f} USD |\n")
                f.write(f"| –°—Ä–µ–¥–Ω–∏–π P&L | {self.performance_metrics['avg_pnl']:.2f} USD |\n")
                f.write(f"| –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å | {self.performance_metrics['total_return']:.2%} |\n")
                f.write(f"| –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ | {self.performance_metrics['max_drawdown']:.2%} |\n")
                f.write(f"| –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞ | {self.performance_metrics['sharpe_ratio']:.3f} |\n")
                f.write(f"| Profit Factor | {self.performance_metrics['profit_factor']:.2f} |\n\n")
                
                f.write("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º\n\n")
                f.write("| –°–µ—Å—Å–∏—è | –°–¥–µ–ª–æ–∫ | P&L | –í–∏–Ω—Ä–µ–π—Ç |\n")
                f.write("|--------|--------|-----|---------|\n")
                for session, stats in self.performance_metrics['session_stats'].items():
                    win_rate = stats['wins'] / stats['trades'] if stats['trades'] > 0 else 0
                    f.write(f"| {session} | {stats['trades']} | {stats['pnl']:.2f} USD | {win_rate:.2%} |\n")
                
                f.write("\n## üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏\n\n")
                f.write("| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|----------|----------|\n")
                for param, value in self.trading_params.items():
                    f.write(f"| {param} | {value} |\n")
                
                f.write("\n## üõ°Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏\n\n")
                f.write("| –ü–∞—Ä–∞–º–µ—Ç—Ä | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|----------|----------|\n")
                for param, value in self.risk_params.items():
                    f.write(f"| {param} | {value} |\n")
                
                f.write("\n## üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n")
                
                if self.performance_metrics['win_rate'] > 0.6:
                    f.write("‚úÖ **–í—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç** - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à—É—é —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤\n")
                elif self.performance_metrics['win_rate'] > 0.5:
                    f.write("‚ö†Ô∏è **–°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç** - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n")
                else:
                    f.write("‚ùå **–ù–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç** - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n")
                
                if self.performance_metrics['profit_factor'] > 1.5:
                    f.write("‚úÖ **–í—ã—Å–æ–∫–∏–π Profit Factor** - —Ö–æ—Ä–æ—à–µ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –∫ —É–±—ã—Ç–∫–∞–º\n")
                elif self.performance_metrics['profit_factor'] > 1.0:
                    f.write("‚ö†Ô∏è **–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π Profit Factor** - —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞\n")
                else:
                    f.write("‚ùå **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π Profit Factor** - —Å–∏—Å—Ç–µ–º–∞ —É–±—ã—Ç–æ—á–Ω–∞\n")
                
                if self.performance_metrics['max_drawdown'] < 0.1:
                    f.write("‚úÖ **–ù–∏–∑–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞** - —Ö–æ—Ä–æ—à–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏\n")
                elif self.performance_metrics['max_drawdown'] < 0.2:
                    f.write("‚ö†Ô∏è **–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ—Å–∞–¥–∫–∞** - –ø—Ä–∏–µ–º–ª–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞\n")
                else:
                    f.write("‚ùå **–í—ã—Å–æ–∫–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞** - —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ risk management\n")
                
                f.write("\n## üèÜ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n\n")
                f.write("–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—à–ª–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏. ")
                f.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.\n\n")
                
                f.write(f"*–û—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n")
            
            logger.info(f"üìÑ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∏–≥–Ω–∞–ª–æ–≤...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
            results = self.run_backtest()
            
            if results:
                logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.results_dir}/")
            else:
                logger.error("‚ùå –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ—Ç–æ–¥–µ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")

if __name__ == "__main__":
    backtest = AdvancedBacktestSystem()
    backtest.run()
