#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–∞ MVP-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import sys
import os
import pandas as pd
import json
from advanced_backtest_system import AdvancedBacktestSystem

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∞"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Run Walk-Forward Backtest for MVP Strategy')
    parser.add_argument('--fixed_trading_params', type=str, default=None, help='JSON string with fixed trading parameters (atr_risk_multiplier, reward_ratio)')
    parser.add_argument('--initial_capital', type=float, default=10000, help='Initial capital for backtest')
    parser.add_argument('--position_size', type=float, default=0.1, help='Position size as fraction of capital (default: 0.1)')
    parser.add_argument('--data_file', type=str, default='basis_features_1m.parquet', help='Path to features data file')
    parser.add_argument('--asset', type=str, default='SOL', help='Asset to backtest (SOL or BTC)')
    parser.add_argument('--limit_days', type=int, default=None, help='Limit the number of days for backtest (default: None - all data)')
    parser.add_argument('--sma_period', type=int, default=20, help='SMA period for trend filter')
    parser.add_argument('--z_score_threshold', type=float, default=2.0, help='Z-Score threshold for signal generation')
    parser.add_argument('--results_dir', type=str, default='backtest_results_mvp', help='Directory for backtest results')
    parser.add_argument('--run_id', type=str, default=None, help='Run ID for this backtest session')
    
    args = parser.parse_args()
    
    # –ü–∞—Ä—Å–∏–º JSON-—Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞
    fixed_trading_params = None
    if args.fixed_trading_params:
        try:
            fixed_trading_params = json.loads(args.fixed_trading_params)
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ fixed_trading_params: {e}")
            return 1
    
    print("=" * 60)
    print("–ó–ê–ü–£–°–ö WALK-FORWARD –ë–≠–ö–¢–ï–°–¢–ê –ù–ê MVP-–°–¢–†–ê–¢–ï–ì–ò–ò")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
        required_files = [args.data_file]
        for file in required_files:
            if not os.path.exists(file):
                print(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return 1
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö...")
        df = pd.read_parquet(args.data_file)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üìÖ –ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö: {df['time'].min()} - {df['time'].max()}")
        print(f"üìä –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—ç–∫—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
        backtest = AdvancedBacktestSystem(
            data_file=args.data_file,
            signals_file='basis_signals.csv',  # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–æ–≤
            z_score_threshold=args.z_score_threshold,
            initial_capital=args.initial_capital,
            position_size=args.position_size,
            fixed_trading_params=fixed_trading_params,
            results_dir=args.results_dir,
            asset=args.asset,
            sma_period=args.sma_period,
            run_id=args.run_id
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Walk-Forward –±—ç–∫—Ç–µ—Å—Ç
        print("\nüöÄ –ó–∞–ø—É—Å–∫ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∞...")
        backtest.run(walk_forward=True, limit_days=args.limit_days)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = 'backtest_results_mvp'
        if os.path.exists(results_dir):
            print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {results_dir}/")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            expected_files = [
                'backtest_report.md',
                'backtest_trades.csv',
                'equity_curve.csv',
                'performance_metrics.json'
            ]
            
            for file in expected_files:
                file_path = os.path.join(results_dir, file)
                if os.path.exists(file_path):
                    print(f"  üìÑ {file}")
                else:
                    print(f"  ‚ùå {file} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
        else:
            print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ {results_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return 1
            
        print("\n" + "=" * 60)
        print("WALK-FORWARD –ë–≠–ö–¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")
        print("=" * 60)
        
        return 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())