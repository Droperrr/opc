#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö IV –∏–∑ —Ç–∞–±–ª–∏—Ü—ã iv_data –≤ —Ç–∞–±–ª–∏—Ü—É iv_agg
"""

import sqlite3
import pandas as pd
from datetime import datetime, timedelta
import argparse

def aggregate_iv_data(symbol='BTCUSDT', dataset_tag='training_2023'):
    """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö IV –ø–æ —Ä–∞–∑–Ω—ã–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ symbol –∏ dataset_tag"""
    print(f"–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö IV –∏–∑ —Ç–∞–±–ª–∏—Ü—ã iv_data –≤ —Ç–∞–±–ª–∏—Ü—É iv_agg –¥–ª—è {symbol} ({dataset_tag})...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('server_opc.db')
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã iv_data —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
        df = pd.read_sql_query("""
            SELECT 
                time, 
                markIv, 
                underlyingPrice,
                symbol,
                dataset_tag
            FROM iv_data 
            WHERE symbol = ? AND dataset_tag = ?
            ORDER BY time
        """, conn, params=(symbol, dataset_tag), parse_dates=['time'])
        
        if df.empty:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
            return
        
        print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã iv_data")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ datetime
        df['time'] = pd.to_datetime(df['time'])
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        timeframes = ['1m', '15m', '1h']
        aggregated_data = []
        
        for timeframe in timeframes:
            print(f"üîÑ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–ª—è —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞
            if timeframe == '1m':
                freq = '1min'
            elif timeframe == '15m':
                freq = '15min'
            elif timeframe == '1h':
                freq = '1h'
            else:
                continue
            
            # –†–µ—Å–µ–º–ø–ª–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
            df_resampled = df.set_index('time').resample(freq).agg({
                'markIv': 'mean',
                'underlyingPrice': 'last'
            }).dropna()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            for timestamp, row in df_resampled.iterrows():
                aggregated_data.append({
                    'time': timestamp,
                    'timeframe': timeframe,
                    'spot_price': row['underlyingPrice'],
                    'iv_30d': row['markIv'],
                    'skew_30d': 0.0,  # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∂–µ
                    'basis_rel': 0.0,  # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∂–µ
                    'oi_total': 0.0,   # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–∑–∂–µ
                    'symbol': symbol,
                    'dataset_tag': dataset_tag
                })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        agg_df = pd.DataFrame(aggregated_data)
        
        if not agg_df.empty:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É iv_agg
            agg_df.to_sql('iv_agg', conn, if_exists='replace', index=False)
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(aggregated_data)} –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É iv_agg")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö IV –¥–ª—è —Å–∏—Å—Ç–µ–º—ã OPC')
    parser.add_argument('--symbol', default='BTCUSDT',
                       help='–°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT, SOLUSDT)')
    parser.add_argument('--tag', default='training_2023',
                       help='–¢–µ–≥ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, training_2023, live_2025)')
    
    args = parser.parse_args()
    
    print(f"–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö IV –¥–ª—è —Å–∏—Å—Ç–µ–º—ã OPC - {args.symbol} ({args.tag})")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
    aggregate_iv_data(args.symbol, args.tag)
    
    print("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()