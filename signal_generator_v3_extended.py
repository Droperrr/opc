#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ v3.0 Extended - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å 7-–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: 25.08.2025 - 03.09.2025
"""

import pandas as pd
import sqlite3
import numpy as np
import requests
import time
from datetime import datetime, timedelta
from logger import get_logger
import os
import json

logger = get_logger()

class OptimizedSignalGeneratorExtended:
    def __init__(self):
        self.signals = []
        self.db_path = 'data/options_enriched.db'
        self.analysis_period = {
            'start': '2025-08-25',
            'end': '2025-09-03',
            'description': '–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–≤–µ–¥–µ–Ω –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å 25.08.2025 –ø–æ 03.09.2025'
        }
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ (—É–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        self.weights = {
            'trend': 0.30,      # –°–Ω–∏–∂–µ–Ω –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏
            'skew': 0.35,       # –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä
            'oi': 0.25,         # –ü–æ–≤—ã—à–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            'volume': 0.10      # –°–æ—Ö—Ä–∞–Ω–µ–Ω
        }
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ (–±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
        self.base_thresholds = {
            'min_oi_ratio': 0.01,    # –ú–∏–Ω–∏–º—É–º 1% –æ—Ç —Å—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω–æ–≥–æ
            'min_volume_sol': 0.1,   # –°–ù–ò–ñ–ï–ù: –º–∏–Ω–∏–º—É–º 0.1 SOL –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è
            'confidence_threshold': 0.25,  # –°–ù–ò–ñ–ï–ù: –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ—Ä–æ–≥
            'skew_threshold': 0.01    # –°–ù–ò–ñ–ï–ù: –±–æ–ª–µ–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Å –≤–µ—Å–∞–º–∏ (UTC)
        self.sessions = {
            'asian': {'start': 0, 'end': 8, 'weight': 1.0},      # 00:00-08:00 UTC
            'european': {'start': 8, 'end': 16, 'weight': 1.15}, # 08:00-16:00 UTC (+15%)
            'american': {'start': 16, 'end': 24, 'weight': 1.2}   # 16:00-24:00 UTC (+20%)
        }
        
        # –°–µ–∑–æ–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ Solana
        self.seasonal_factors = {
            'token_unlock_risk': 1.1,    # +10% –∫ confidence –ø—Ä–∏ —Ä–∏—Å–∫–µ –∞–Ω–ª–æ–∫–∞
            'high_volatility': 0.9,      # -10% –∫ –ø–æ—Ä–æ–≥–∞–º –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            'weekend_effect': 0.8        # -20% –∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≤—ã—Ö–æ–¥–Ω—ã–µ
        }
    
    def get_session(self, timestamp):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–µ—Å–∞–º–∏"""
        hour = timestamp.hour
        for session, times in self.sessions.items():
            if times['start'] <= hour < times['end']:
                return session, times['weight']
        return 'american', self.sessions['american']['weight']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def get_dynamic_skew_threshold(self, current_iv):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ skew –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π IV"""
        base_threshold = self.base_thresholds['skew_threshold']
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ —Ç–µ–∫—É—â—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        # –ü—Ä–∏ IV > 80% —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª—å—à–µ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if current_iv > 0.8:
            return base_threshold * 0.7  # -30% –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        elif current_iv > 0.6:
            return base_threshold * 0.85  # -15% –ø—Ä–∏ —Å—Ä–µ–¥–Ω–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        else:
            return base_threshold
    
    def get_dynamic_confidence_threshold(self, session_weight, is_weekend=False):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ confidence —Å —É—á–µ—Ç–æ–º —Å–µ—Å—Å–∏–∏ –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        base_threshold = self.base_thresholds['confidence_threshold']
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
        session_adjustment = 1.0 / session_weight  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–ª—è –±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º
        weekend_adjustment = self.seasonal_factors['weekend_effect'] if is_weekend else 1.0
        
        return base_threshold * session_adjustment * weekend_adjustment
    
    def check_token_unlock_risk(self, timestamp):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω –∞–Ω–ª–æ–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ = –ø—è—Ç–Ω–∏—Ü–∞ –∏ —á–∞—Å = 16-20 UTC
        # (—Ç–∏–ø–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∞–Ω–ª–æ–∫–æ–≤)
        if timestamp.weekday() == 4 and 16 <= timestamp.hour <= 20:
            return True
        return False
    
    def fetch_binance_oi_data(self, symbol='SOLUSDT'):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ OI —Å Binance Futures API"""
        try:
            url = "https://fapi.binance.com/fapi/v1/openInterest"
            params = {'symbol': symbol}
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
            
            response = requests.get(url, params=params, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ OI —Å Binance: {data.get('openInterest', 0)}")
                return float(data.get('openInterest', 0))
            else:
                logger.warning(f"‚ö†Ô∏è Binance API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")
            return None
    
    def fetch_jupiter_perps_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Jupiter Perps (fallback)"""
        try:
            url = "https://price.jup.ag/v4/price?ids=SOL"
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
            
            response = requests.get(url, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                volume = data.get('data', {}).get('SOL', {}).get('volume24h', 0)
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å Jupiter: –æ–±—ä–µ–º {volume}")
                return volume
            else:
                logger.warning(f"‚ö†Ô∏è Jupiter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Jupiter: {e}")
            return None
    
    def simulate_oi_data(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ OI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        base_oi = 1000000
        growth_factor = 1.8471
        adjusted_oi = base_oi * growth_factor
        call_ratio = 0.6
        put_ratio = 0.4
        return {
            'source': 'simulation_market_data',
            'oi_call': adjusted_oi * call_ratio,
            'oi_put': adjusted_oi * put_ratio,
            'total_oi': adjusted_oi
        }
    
    def get_real_oi_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OI —Å fallback-–º–µ—Ö–∞–Ω–∏–∑–º–æ–º"""
        binance_oi = self.fetch_binance_oi_data()
        if binance_oi and binance_oi > 0:
            return {
                'source': 'binance_futures',
                'oi_call': binance_oi * 0.6,
                'oi_put': binance_oi * 0.4,
                'total_oi': binance_oi
            }
        
        jupiter_volume = self.fetch_jupiter_perps_data()
        if jupiter_volume and jupiter_volume > 0:
            estimated_oi = jupiter_volume * 0.1
            return {
                'source': 'jupiter_perps',
                'oi_call': estimated_oi * 0.55,
                'oi_put': estimated_oi * 0.45,
                'total_oi': estimated_oi
            }
        
        logger.warning("‚ö†Ô∏è –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é OI")
        return self.simulate_oi_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if os.path.exists('iv_aggregates_extended.csv'):
                self.iv_data = pd.read_csv('iv_aggregates_extended.csv', parse_dates=['timestamp'])
                logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.iv_data)} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª iv_aggregates_extended.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.iv_data = pd.DataFrame()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            if os.path.exists('trend_signals_extended.csv'):
                self.trend_data = pd.read_csv('trend_signals_extended.csv', parse_dates=['timestamp'])
                logger.info(f"üìà –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.trend_data)} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª trend_signals_extended.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.trend_data = pd.DataFrame()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞
            if os.path.exists('entry_points_extended.csv'):
                self.entry_data = pd.read_csv('entry_points_extended.csv', parse_dates=['timestamp'])
                logger.info(f"üéØ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.entry_data)} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞")
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª entry_points_extended.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.entry_data = pd.DataFrame()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.iv_data = pd.DataFrame()
            self.trend_data = pd.DataFrame()
            self.entry_data = pd.DataFrame()
    
    def combine_data(self):
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –º–µ—Ç–∫–∞–º"""
        try:
            if self.iv_data.empty:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
                return pd.DataFrame()
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π DataFrame –∏–∑ IV –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            combined = self.iv_data.copy()
            # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ underlying_price –∏–ª–∏ iv_mean_all
            combined = combined.dropna(subset=['underlying_price', 'iv_mean_all'])
            
            if combined.empty:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
                return pd.DataFrame()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã (–±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
            if not self.trend_data.empty:
                combined['trend_direction'] = None
                combined['trend_confidence'] = 0.0
                
                for idx, row in combined.iterrows():
                    timestamp = row['timestamp']
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ç—Ä–µ–Ω–¥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
                    time_diff = abs(self.trend_data['timestamp'] - timestamp)
                    if not time_diff.empty:
                        nearest_idx = time_diff.idxmin()
                        if time_diff[nearest_idx] <= pd.Timedelta(hours=1):  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö —á–∞—Å–∞
                            combined.at[idx, 'trend_direction'] = self.trend_data.at[nearest_idx, 'direction']
                            combined.at[idx, 'trend_confidence'] = self.trend_data.at[nearest_idx, 'confidence']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ (–±–ª–∏–∂–∞–π—à–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
            if not self.entry_data.empty:
                combined['entry_direction'] = None
                combined['entry_confidence'] = 0.0
                
                for idx, row in combined.iterrows():
                    timestamp = row['timestamp']
                    # –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞
                    time_diff = abs(self.entry_data['timestamp'] - timestamp)
                    if not time_diff.empty:
                        nearest_idx = time_diff.idxmin()
                        if time_diff[nearest_idx] <= pd.Timedelta(minutes=5):  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 5 –º–∏–Ω—É—Ç
                            combined.at[idx, 'entry_direction'] = self.entry_data.at[nearest_idx, 'direction']
                            combined.at[idx, 'entry_confidence'] = self.entry_data.at[nearest_idx, 'confidence']
            
            logger.info(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(combined)} –∑–∞–ø–∏—Å–µ–π")
            return combined
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def enhance_data_with_real_oi(self, combined_data):
        """–û–±–æ–≥–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ OI –∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            logger.info("üîÑ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ OI...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ OI
            oi_data = self.get_real_oi_data()
            
            # –î–æ–±–∞–≤–ª—è–µ–º OI –¥–∞–Ω–Ω—ã–µ –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º
            combined_data['oi_call'] = oi_data['oi_call']
            combined_data['oi_put'] = oi_data['oi_put']
            combined_data['oi_ratio'] = oi_data['oi_call'] / (oi_data['oi_call'] + oi_data['oi_put'])
            combined_data['oi_source'] = oi_data['source']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            combined_data['session'] = combined_data['timestamp'].apply(
                lambda x: self.get_session(x)[0]
            )
            combined_data['session_weight'] = combined_data['timestamp'].apply(
                lambda x: self.get_session(x)[1]
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—Ö–æ–¥–Ω—ã—Ö
            combined_data['is_weekend'] = combined_data['timestamp'].apply(
                lambda x: x.weekday() >= 5
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∏—Å–∫–µ —Ç–æ–∫–µ–Ω –∞–Ω–ª–æ–∫–∞
            combined_data['token_unlock_risk'] = combined_data['timestamp'].apply(
                lambda x: self.check_token_unlock_risk(x)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
            combined_data['analysis_period'] = f"{self.analysis_period['start']} - {self.analysis_period['end']}"
            
            logger.info(f"üìä –û–±–æ–≥–∞—â–µ–Ω–æ {len(combined_data)} –∑–∞–ø–∏—Å–µ–π —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ OI")
            return combined_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return combined_data
    
    def generate_optimized_signals(self, combined_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –ø–æ—Ä–æ–≥–∞–º–∏"""
        signals = []
        logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(combined_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        for _, row in combined_data.iterrows():
            if pd.isna(row['underlying_price']) or pd.isna(row['iv_mean_all']):
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
            dynamic_skew_threshold = self.get_dynamic_skew_threshold(row['iv_mean_all'])
            dynamic_confidence_threshold = self.get_dynamic_confidence_threshold(
                row['session_weight'], 
                row['is_weekend']
            )
            
            signal = None
            confidence = 0.0
            reason = []
            
            # 1. –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–µ–Ω–¥—É (15m –∏ 1h) - —Å–Ω–∏–∂–µ–Ω–Ω—ã–π –≤–µ—Å
            if row['trend_direction']:
                if row['trend_direction'] == 'BUY':
                    signal = 'LONG'
                    confidence += row['trend_confidence'] * self.weights['trend']
                    reason.append(f"Trend: {row['trend_direction']} (conf: {row['trend_confidence']:.2f})")
                elif row['trend_direction'] == 'SELL':
                    signal = 'SHORT'
                    confidence += row['trend_confidence'] * self.weights['trend']
                    reason.append(f"Trend: {row['trend_direction']} (conf: {row['trend_confidence']:.2f})")
            
            # 2. –§–∏–ª—å—Ç—Ä –ø–æ IV –∏ Skew (–±–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
            if not pd.isna(row['skew']):
                skew_threshold = dynamic_skew_threshold
                if row['skew'] > skew_threshold:  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π skew (—Å–ø—Ä–æ—Å –Ω–∞ –∫–æ–ª–ª—ã)
                    if signal == 'LONG':
                        confidence += self.weights['skew']
                        reason.append(f"Skew bullish: {row['skew']:.4f}")
                    elif signal is None:
                        signal = 'LONG'
                        confidence += self.weights['skew']
                        reason.append(f"Skew bullish: {row['skew']:.4f}")
                elif row['skew'] < -skew_threshold:  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π skew (—Å–ø—Ä–æ—Å –Ω–∞ –ø—É—Ç—ã)
                    if signal == 'SHORT':
                        confidence += self.weights['skew']
                        reason.append(f"Skew bearish: {row['skew']:.4f}")
                    elif signal is None:
                        signal = 'SHORT'
                        confidence += self.weights['skew']
                        reason.append(f"Skew bearish: {row['skew']:.4f}")
            
            # 3. –§–∏–ª—å—Ç—Ä –ø–æ OI (–ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –≤–µ—Å)
            if not pd.isna(row['oi_ratio']):
                if row['oi_ratio'] > 0.52:  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥
                    if signal == 'LONG':
                        confidence += self.weights['oi']
                        reason.append(f"OI call-heavy: {row['oi_ratio']:.2f}")
                    elif signal is None:
                        signal = 'LONG'
                        confidence += self.weights['oi']
                        reason.append(f"OI call-heavy: {row['oi_ratio']:.2f}")
                elif row['oi_ratio'] < 0.48:  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥
                    if signal == 'SHORT':
                        confidence += self.weights['oi']
                        reason.append(f"OI put-heavy: {row['oi_ratio']:.2f}")
                    elif signal is None:
                        signal = 'SHORT'
                        confidence += self.weights['oi']
                        reason.append(f"OI put-heavy: {row['oi_ratio']:.2f}")
            
            # 4. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ –º–∏–Ω—É—Ç–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É (—Å–Ω–∏–∂–µ–Ω–Ω—ã–π –≤–µ—Å)
            if row['entry_direction'] and row['entry_direction'] == signal:
                confidence += row['entry_confidence'] * self.weights['volume']
                reason.append(f"1m confirmation: {row['entry_direction']}")
            
            # 5. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            confidence *= row['session_weight']
            
            # 6. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º
            if row['is_weekend']:
                confidence *= self.seasonal_factors['weekend_effect']
                reason.append("Weekend session")
            
            # 7. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–∏—Å–∫—É —Ç–æ–∫–µ–Ω –∞–Ω–ª–æ–∫–∞
            if row['token_unlock_risk']:
                confidence *= self.seasonal_factors['token_unlock_risk']
                reason.append("Token unlock risk")
            
            confidence = min(1.0, max(0.0, confidence))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ confidence >= –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–æ–≥–∞
            if signal and confidence >= dynamic_confidence_threshold:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–º–µ
                volume_info = f"Volume: {row.get('oi_call', 0)/1000000:.2f}M SOL"
                reason.append(volume_info)
                
                signals.append({
                    'timestamp': row['timestamp'].isoformat(),
                    'symbol': 'SOL',
                    'strike': row['underlying_price'],
                    'expiry': '2025-09-26',  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–∞—Ç–∞
                    'signal': signal,
                    'direction': signal,
                    'confidence': round(confidence, 3),
                    'reason': ' | '.join(reason),
                    'underlying_price': row['underlying_price'],
                    'timeframe': row['timeframe'],
                    'iv': row['iv_mean_all'],
                    'skew': row['skew'],
                    'oi_call': row['oi_call'],
                    'oi_put': row['oi_put'],
                    'oi_ratio': row['oi_ratio'],
                    'oi_source': row['oi_source'],
                    'trend_15m': row.get('trend_direction', ''),
                    'trend_1h': row.get('trend_direction', ''),
                    'session': row['session'],
                    'analysis_period': row['analysis_period'],
                    'session_weight': row['session_weight'],
                    'is_weekend': row['is_weekend'],
                    'token_unlock_risk': row['token_unlock_risk']
                })
        
        return signals
    
    def save_optimized_signals(self, signals):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –≤ CSV"""
        try:
            if signals:
                df = pd.DataFrame(signals)
                df.to_csv('signals_optimized_extended.csv', index=False)
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(signals)} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ signals_optimized_extended.csv")
            else:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def generate_optimized_statistics(self, signals):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            if not signals:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                return
            
            df = pd.DataFrame(signals)
            
            # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_signals = len(signals)
            avg_confidence = df['confidence'].mean()
            avg_iv = df['iv'].mean()
            avg_skew = df['skew'].mean()
            avg_oi_ratio = df['oi_ratio'].mean()
            
            logger.info(f"üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            logger.info(f"   –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {total_signals}")
            logger.info(f"   –°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {avg_confidence:.3f}")
            logger.info(f"   –°—Ä–µ–¥–Ω—è—è IV: {avg_iv:.3f}")
            logger.info(f"   –°—Ä–µ–¥–Ω–∏–π Skew: {avg_skew:.4f}")
            logger.info(f"   –°—Ä–µ–¥–Ω–∏–π OI ratio: {avg_oi_ratio:.3f}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º
            session_stats = df.groupby('session').agg({
                'confidence': ['count', 'mean'],
                'signal': 'count'
            }).round(3)
            
            logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–µ—Å—Å–∏—è–º:")
            for session in session_stats.index:
                count = session_stats.loc[session, ('confidence', 'count')]
                conf = session_stats.loc[session, ('confidence', 'mean')]
                logger.info(f"   {session}: {count:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤, conf: {conf:.3f}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º
            timeframe_stats = df.groupby('timeframe').agg({
                'confidence': ['count', 'mean'],
                'signal': 'count'
            }).round(3)
            
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ñ—Ä–µ–π–º–∞–º:")
            for timeframe in timeframe_stats.index:
                count = timeframe_stats.loc[timeframe, ('confidence', 'count')]
                conf = timeframe_stats.loc[timeframe, ('confidence', 'mean')]
                logger.info(f"   {timeframe}: {count:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤, conf: {conf:.3f}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
            df['weekday'] = pd.to_datetime(df['timestamp']).dt.day_name()
            weekday_stats = df.groupby('weekday').agg({
                'confidence': ['count', 'mean'],
                'signal': 'count'
            }).round(3)
            
            logger.info(f"üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏:")
            for day in weekday_stats.index:
                count = weekday_stats.loc[day, ('confidence', 'count')]
                conf = weekday_stats.loc[day, ('confidence', 'mean')]
                logger.info(f"   {day}: {count:.0f} —Å–∏–≥–Ω–∞–ª–æ–≤, conf: {conf:.3f}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ LONG/SHORT
            signal_dist = df['signal'].value_counts()
            logger.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for signal, count in signal_dist.items():
                logger.info(f"   {signal}: {count} —Å–∏–≥–Ω–∞–ª–æ–≤")
            
            # –ü—Ä–∏–º–µ—Ä—ã —Å–∏–≥–Ω–∞–ª–æ–≤
            logger.info(f"üìã –ü—Ä–∏–º–µ—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
            for i, signal in enumerate(signals[:3]):
                logger.info(f"   {i+1}. [{signal['timestamp']}] {signal['signal']} | Conf: {signal['confidence']:.3f} | "
                          f"Price: {signal['underlying_price']} | Session: {signal['session']} | "
                          f"OI Source: {signal['oi_source']} | Reason: {signal['reason'][:50]}...")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ v3.0 Extended...")
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞: {self.analysis_period['description']}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.load_data()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            combined_data = self.combine_data()
            if combined_data.empty:
                logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ OI
            enhanced_data = self.enhance_data_with_real_oi(combined_data)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            signals = self.generate_optimized_signals(enhanced_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª—ã
            self.save_optimized_signals(signals)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.generate_optimized_statistics(signals)
            
            logger.info("‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ Extended –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

if __name__ == "__main__":
    generator = OptimizedSignalGeneratorExtended()
    generator.run()
