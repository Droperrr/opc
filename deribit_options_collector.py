#!/usr/bin/env python3
"""
–°–±–æ—Ä—â–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å –ø—É–±–ª–∏—á–Ω–æ–≥–æ API Deribit
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π
"""

import requests
import sqlite3
import pandas as pd
import logging
import argparse
from datetime import datetime, timedelta
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('deribit_data_collection.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DeribitOptionsCollector:
    def __init__(self, db_path: str = 'server_opc.db'):
        self.db_path = db_path
        self.base_url = 'https://www.deribit.com/api/v2'
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Content-Type': 'application/json'
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
        self.RATE_LIMIT_DELAY = 0.1  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–µ–π –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Deribit"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π –æ–ø—Ü–∏–æ–Ω–æ–≤ Deribit
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS deribit_options_kline (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp INTEGER NOT NULL,
                    instrument_name TEXT NOT NULL,
                    open REAL NOT NULL,
                    high REAL NOT NULL,
                    low REAL NOT NULL,
                    close REAL NOT NULL,
                    volume REAL NOT NULL,
                    cost REAL NOT NULL,
                    ticks INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(timestamp, instrument_name)
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_deribit_timestamp ON deribit_options_kline(timestamp)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_deribit_instrument ON deribit_options_kline(instrument_name)')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Deribit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_instruments(self, currency: str = 'BTC', kind: str = 'option'):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å Deribit API
        
        Args:
            currency: –í–∞–ª—é—Ç–∞ (BTC, ETH, SOL –∏ —Ç.–¥.)
            kind: –¢–∏–ø –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (option, future, spot)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        """
        try:
            url = f"{self.base_url}/public/get_instruments"
            
            params = {
                'currency': currency,
                'kind': kind
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {currency} {kind}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if 'result' in data and data['result']:
                instruments = data['result']
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(instruments)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return instruments
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {data}")
                return []
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []
    
    def get_tradingview_chart_data(self, instrument_name: str, start_timestamp: int, 
                                 end_timestamp: int, resolution: str = '1D'):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π —Å Deribit API
        
        Args:
            instrument_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            start_timestamp: –ù–∞—á–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
            end_timestamp: –ö–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
            resolution: –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å–≤–µ—á–µ–π (1, 3, 5, 10, 15, 30, 60, 120, 180, 360, 720, 1D)
            
        Returns:
            dict: –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
        """
        try:
            url = f"{self.base_url}/public/get_tradingview_chart_data"
            
            params = {
                'instrument_name': instrument_name,
                'start_timestamp': start_timestamp,
                'end_timestamp': end_timestamp,
                'resolution': resolution
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å —Å–≤–µ—á–µ–π: {instrument_name} {resolution} {start_timestamp} - {end_timestamp}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if 'result' in data and data['result']:
                result = data['result']
                if 'status' in result and result['status'] == 'ok':
                    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è {instrument_name}")
                    return result
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π: {result}")
                    return None
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ—á–µ–π: {data}")
                return None
                
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–µ—á–µ–π: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–≤–µ—á–µ–π: {e}")
            return None
    
    def save_kline_data(self, instrument_name: str, chart_data: dict):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            instrument_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            chart_data: –î–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            ticks = chart_data.get('ticks', [])
            opens = chart_data.get('open', [])
            highs = chart_data.get('high', [])
            lows = chart_data.get('low', [])
            closes = chart_data.get('close', [])
            volumes = chart_data.get('volume', [])
            costs = chart_data.get('cost', [])
            
            saved_count = 0
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é —Å–≤–µ—á—É
            for i in range(len(ticks)):
                try:
                    cursor.execute('''
                        INSERT OR REPLACE INTO deribit_options_kline 
                        (timestamp, instrument_name, open, high, low, close, volume, cost, ticks)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        ticks[i],
                        instrument_name,
                        opens[i] if i < len(opens) else 0,
                        highs[i] if i < len(highs) else 0,
                        lows[i] if i < len(lows) else 0,
                        closes[i] if i < len(closes) else 0,
                        volumes[i] if i < len(volumes) else 0,
                        costs[i] if i < len(costs) else 0,
                        ticks[i]
                    ))
                    
                    saved_count += 1
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏ {i}: {e}")
                    continue
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} —Å–≤–µ—á–µ–π –¥–ª—è {instrument_name}")
            return saved_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–µ–π: {e}")
            return 0
    
    def collect_data_for_instrument(self, instrument_name: str, start_date: str, end_date: str):
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            instrument_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ timestamp
            start_dt = datetime.strptime(start_date, '%Y-%m-%d')
            end_dt = datetime.strptime(end_date, '%Y-%m-%d')
            
            start_timestamp = int(start_dt.timestamp() * 1000)
            end_timestamp = int(end_dt.timestamp() * 1000)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ—á–∏
            chart_data = self.get_tradingview_chart_data(
                instrument_name, start_timestamp, end_timestamp, '1D'
            )
            
            if chart_data:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                saved_count = self.save_kline_data(instrument_name, chart_data)
                return saved_count > 0
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π –¥–ª—è {instrument_name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {instrument_name}: {e}")
            return False
    
    def collect_sample_data(self, currency: str = 'BTC', start_date: str = '2023-01-01',
                          end_date: str = '2023-01-01'):
        """
        –°–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω –∏–ª–∏ —Ñ—å—é—á–µ—Ä—Å)
        
        Args:
            currency: –í–∞–ª—é—Ç–∞ (BTC, ETH –∏ —Ç.–¥.)
            start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
            end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
            
        Returns:
            bool: –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {currency}")
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ–ø—Ü–∏–æ–Ω—ã, –ø–æ—Ç–æ–º —Ñ—å—é—á–µ—Ä—Å—ã)
            instruments = self.get_instruments(currency, 'option')
            instrument_kind = 'option'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤, –µ—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–æ–±—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã
            if instruments:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞
                active_instruments = [inst for inst in instruments if inst.get('is_active', False)]
                if active_instruments:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–ø—Ü–∏–æ–Ω–∞
                    test_instrument = active_instruments[0]
                    test_name = test_instrument.get('instrument_name')
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∞—Ç—ã
                    test_start = int(datetime.strptime('2025-09-01', '%Y-%m-%d').timestamp() * 1000)
                    test_end = int(datetime.strptime('2025-09-01', '%Y-%m-%d').timestamp() * 1000)
                    test_data = self.get_tradingview_chart_data(test_name, test_start, test_end, '1D')
                    if not test_data or test_data.get('status') != 'ok':
                        logger.info(" –î–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã")
                        instruments = self.get_instruments(currency, 'future')
                        instrument_kind = 'future'
                else:
                    logger.info(" –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤, –ø—Ä–æ–±—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã")
                    instruments = self.get_instruments(currency, 'future')
                    instrument_kind = 'future'
            else:
                logger.info(" –æ–ø—Ü–∏–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º —Ñ—å—é—á–µ—Ä—Å—ã")
                instruments = self.get_instruments(currency, 'future')
                instrument_kind = 'future'
            
            if not instruments:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –±–ª–∏–∂–∞–π—à–µ–π –¥–∞—Ç–æ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            selected_instrument = None
            active_instruments = [inst for inst in instruments if inst.get('is_active', False)]
            
            if active_instruments:
                # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏ –æ–ø—Ü–∏–æ–Ω–æ–≤ —Ä–∞–∑–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
                if instrument_kind == 'future':
                    # –î–ª—è —Ñ—å—é—á–µ—Ä—Å–æ–≤ –∏—â–µ–º BTC-PERPETUAL –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
                    perpetual = next((inst for inst in active_instruments if inst.get('instrument_name') == f'{currency}-PERPETUAL'), None)
                    if perpetual:
                        selected_instrument = perpetual
                        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω PERPETUAL —Ñ—å—é—á–µ—Ä—Å: {selected_instrument.get('instrument_name')}")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç PERPETUAL, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
                        selected_instrument = active_instruments[0]
                        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω —Ñ—å—é—á–µ—Ä—Å: {selected_instrument.get('instrument_name')}")
                else:
                    # –î–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –∏–º–µ–Ω–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                        def extract_expiry_date(instrument):
                            name = instrument.get('instrument_name', '')
                            # –ò—â–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ DDMMMYY
                            import re
                            match = re.search(r'(\d{1,2}[A-Z]{3}\d{2})', name)
                            if match:
                                date_str = match.group(1)
                                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
                                try:
                                    # –ü—Ä–∏–º–µ—Ä: 12SEP25 -> 12 SEP 2025
                                    months = {
                                        'JAN': '01', 'FEB': '02', 'MAR': '03', 'APR': '04',
                                        'MAY': '05', 'JUN': '06', 'JUL': '07', 'AUG': '08',
                                        'SEP': '09', 'OCT': '10', 'NOV': '11', 'DEC': '12'
                                    }
                                    day = date_str[:2]
                                    month_abbr = date_str[2:5]
                                    year = '20' + date_str[5:]
                                    
                                    if month_abbr in months:
                                        month = months[month_abbr]
                                        date_formatted = f"{year}-{month}-{day}"
                                        return datetime.strptime(date_formatted, '%Y-%m-%d')
                                except Exception as e:
                                    logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–∑ {date_str}: {e}")
                                    pass
                            return datetime.max  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
                        active_instruments.sort(key=extract_expiry_date)
                        selected_instrument = active_instruments[0]
                        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω –æ–ø—Ü–∏–æ–Ω —Å –±–ª–∏–∂–∞–π—à–µ–π —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–µ–π: {selected_instrument.get('instrument_name')}")
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –æ–ø—Ü–∏–æ–Ω–æ–≤ –ø–æ –¥–∞—Ç–µ: {e}")
                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π
                        selected_instrument = active_instruments[0]
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è
                if instruments:
                    selected_instrument = instruments[0]
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∏–∑ —Å–ø–∏—Å–∫–∞")
            
            if not selected_instrument:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
                return False
            
            instrument_name = selected_instrument.get('instrument_name')
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞: {instrument_name} ({instrument_kind})")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            success = self.collect_data_for_instrument(instrument_name, start_date, end_date)
            
            if success:
                logger.info(f"üéâ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {instrument_name} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {instrument_name} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description='–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤ —Å Deribit')
    parser.add_argument('--currency', default='BTC', help='–í–∞–ª—é—Ç–∞ (BTC, ETH –∏ —Ç.–¥.)')
    parser.add_argument('--start', default='2023-01-01', help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--end', default='2023-01-01', help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--db', default='server_opc.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫
    collector = DeribitOptionsCollector(args.db)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    success = collector.collect_sample_data(args.currency, args.start, args.end)
    
    if success:
        logger.info("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()