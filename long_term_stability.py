#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psutil
import os
import logging
import time
import gc
from typing import Dict, List, Any, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def measure_memory_usage():
    """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    try:
        process = psutil.Process(os.getpid())
        memory_usage = process.memory_info().rss / 1024**3
        return memory_usage
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        return 0.0

def test_memory_stability(duration_minutes: int = 5):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"\nüíæ –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–ê–ú–Ø–¢–ò ({duration_minutes} –º–∏–Ω—É—Ç)")
    print("-" * 60)
    
    try:
        from error_monitor import ErrorMonitor
        from block_detector import BlockDetector
        from prediction_layer import PredictionLayer
        from formula_engine import FormulaEngine
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        monitor = ErrorMonitor()
        detector = BlockDetector()
        predictor = PredictionLayer()
        engine = FormulaEngine()
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
        initial_memory = measure_memory_usage()
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {initial_memory:.3f} GB")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        base_price = 200.0
        prices = [base_price]
        
        memory_samples = []
        start_time = time.time()
        
        iteration = 0
        while time.time() - start_time < duration_minutes * 60:
            iteration += 1
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            new_price = prices[-1] * (1 + np.random.normal(0, 0.01))
            prices.append(max(new_price, 1.0))
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω
            if len(prices) > 1000:
                prices = prices[-1000:]
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Error Monitor
            predicted = prices[-1] * (1 + np.random.normal(0, 0.05))
            actual = prices[-1]
            volatility = np.random.uniform(0.01, 0.1)
            
            monitor.update(datetime.now(), predicted, actual, volatility)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prediction Layer
            if len(prices) >= 10:
                result = predictor.predict_next_price(prices[-10:], method='simple_moving_average')
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Formula Engine
            test_df = pd.DataFrame({
                'spot_price': prices[-20:],
                'high': [p * 1.01 for p in prices[-20:]],
                'low': [p * 0.99 for p in prices[-20:]]
            })
            
            if len(test_df) >= 14:
                atr = engine.calculate_atr(test_df)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Detector –∫–∞–∂–¥—ã–µ 100 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if iteration % 100 == 0:
                test_data = pd.DataFrame({
                    'timestamp': [datetime.now() - timedelta(minutes=i) for i in range(100, 0, -1)],
                    'error_absolute': [abs(p - np.mean(prices[-100:])) for p in prices[-100:]],
                    'volatility': [volatility] * 100
                })
                
                blocks = detector.detect_block_boundaries(test_data, threshold=1.0, window=50)
            
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            if iteration % 30 == 0:
                current_memory = measure_memory_usage()
                memory_samples.append(current_memory)
                print(f"‚è±Ô∏è –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: –ø–∞–º—è—Ç—å {current_memory:.3f} GB")
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            time.sleep(0.1)
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏
        final_memory = measure_memory_usage()
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å: {final_memory:.3f} GB")
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏
        if memory_samples:
            max_memory = max(memory_samples)
            min_memory = min(memory_samples)
            avg_memory = sum(memory_samples) / len(memory_samples)
            memory_growth = final_memory - initial_memory
            
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏:")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_memory:.3f} GB")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min_memory:.3f} GB")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_memory:.3f} GB")
            print(f"   –†–æ—Å—Ç: {memory_growth:.3f} GB")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Ç–µ—á–∫–∏ –ø–∞–º—è—Ç–∏
            if memory_growth > 0.1:  # –†–æ—Å—Ç –±–æ–ª–µ–µ 100 MB
                print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏")
                return False
            else:
                print("‚úÖ –ü–∞–º—è—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–∞")
                return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å")
            return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞–º—è—Ç–∏: {e}")
        return False

def test_database_stability():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüóÑÔ∏è –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("-" * 60)
    
    try:
        from error_monitor import ErrorMonitor
        from block_detector import BlockDetector
        
        monitor = ErrorMonitor()
        detector = BlockDetector()
        
        # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏
        start_time = time.time()
        
        for i in range(1000):
            predicted = 200.0 + np.random.normal(0, 10)
            actual = 200.0 + np.random.normal(0, 10)
            volatility = np.random.uniform(0.01, 0.1)
            
            monitor.update(datetime.now(), predicted, actual, volatility)
            
            if i % 100 == 0:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
                errors = monitor.get_errors()
                stats = monitor.calculate_error_statistics()
        
        write_time = time.time() - start_time
        print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: 1000 –∑–∞–ø–∏—Å–µ–π –∑–∞ {write_time:.2f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        start_time = time.time()
        
        for i in range(100):
            errors = monitor.get_errors()
            stats = monitor.calculate_error_statistics()
        
        read_time = time.time() - start_time
        print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —á—Ç–µ–Ω–∏—è: 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {read_time:.2f} —Å–µ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        errors = monitor.get_errors()
        assert isinstance(errors, pd.DataFrame), "–û—à–∏–±–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è DataFrame"
        assert len(errors) > 0, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö"
        
        stats = monitor.calculate_error_statistics()
        assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'mae' in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç MAE"
        
        print(f"‚úÖ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {len(errors)} –æ—à–∏–±–æ–∫, MAE={stats.get('mae', 0):.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –ë–î: {e}")
        return False

def test_component_integration_stability():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print(f"\nüîó –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("-" * 60)
    
    try:
        from error_monitor import ErrorMonitor
        from block_detector import BlockDetector
        from block_analyzer import BlockAnalyzer
        from prediction_layer import PredictionLayer
        from formula_engine import FormulaEngine
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        monitor = ErrorMonitor()
        detector = BlockDetector()
        analyzer = BlockAnalyzer()
        predictor = PredictionLayer()
        engine = FormulaEngine()
        
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏
        for i in range(100):
            # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            prices = [200.0 + np.random.normal(0, 5) for _ in range(20)]
            predicted = predictor.predict_next_price(prices, method='simple_moving_average')
            actual = prices[-1] * (1 + np.random.normal(0, 0.02))
            volatility = np.random.uniform(0.01, 0.1)
            
            # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Error Monitor
            monitor.update(datetime.now(), predicted, actual, volatility)
            
            # 3. –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∫–∞–∂–¥—ã–µ 20 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if i % 20 == 0:
                test_data = pd.DataFrame({
                    'timestamp': [datetime.now() - timedelta(minutes=j) for j in range(100, 0, -1)],
                    'error_absolute': [abs(np.random.normal(0, 1)) for _ in range(100)],
                    'volatility': [volatility] * 100
                })
                
                blocks = detector.detect_block_boundaries(test_data, threshold=1.0, window=50)
                
                # 4. –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–æ–≤
                if blocks:
                    for block in blocks:
                        analysis = analyzer.analyze_block(block.id)
                        regime = analyzer.classify_market_regime(block.id)
            
            # 5. –†–∞—Å—á–µ—Ç ATR
            test_df = pd.DataFrame({
                'spot_price': prices,
                'high': [p * 1.01 for p in prices],
                'low': [p * 0.99 for p in prices]
            })
            
            atr = engine.calculate_atr(test_df)
            
            if i % 25 == 0:
                print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ü–∏–∫–ª {i}: –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ç–∞–±–∏–ª—å–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_error_handling_stability():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print(f"\n‚ö†Ô∏è –¢–ï–°–¢ –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    print("-" * 60)
    
    try:
        from error_monitor import ErrorMonitor
        from prediction_layer import PredictionLayer
        from formula_engine import FormulaEngine
        from compatibility import safe_float
        
        monitor = ErrorMonitor()
        predictor = PredictionLayer()
        engine = FormulaEngine()
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        error_cases = [
            # (predicted, actual, volatility, description)
            (None, 200.0, 0.02, "None predicted"),
            (200.0, None, 0.02, "None actual"),
            (200.0, 200.0, None, "None volatility"),
            (np.nan, 200.0, 0.02, "NaN predicted"),
            (200.0, np.nan, 0.02, "NaN actual"),
            (200.0, 200.0, np.nan, "NaN volatility"),
            (np.inf, 200.0, 0.02, "Inf predicted"),
            (200.0, np.inf, 0.02, "Inf actual"),
            (200.0, 200.0, np.inf, "Inf volatility"),
            (-100.0, 200.0, 0.02, "Negative predicted"),
            (200.0, -100.0, 0.02, "Negative actual"),
            (200.0, 200.0, -0.02, "Negative volatility"),
        ]
        
        for predicted, actual, volatility, description in error_cases:
            try:
                monitor.update(datetime.now(), predicted, actual, volatility)
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {description}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ {description}: {e}")
                return False
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ü–µ–Ω
        invalid_prices = [
            [],  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            [200.0],  # –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
            [200.0, np.nan, 201.0],  # –° NaN
            [200.0, np.inf, 201.0],  # –° inf
            [200.0, -100.0, 201.0],  # –° –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
        ]
        
        for prices in invalid_prices:
            try:
                if len(prices) >= 2:
                    result = predictor.predict_next_price(prices, method='simple_moving_average')
                    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ü–µ–Ω—ã: {len(prices)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ü–µ–Ω {prices}: {e}")
                return False
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö DataFrame
        invalid_dfs = [
            pd.DataFrame(),  # –ü—É—Å—Ç–æ–π DataFrame
            pd.DataFrame({'spot_price': []}),  # –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
            pd.DataFrame({'spot_price': [np.nan, np.nan, np.nan]}),  # –í—Å–µ NaN
        ]
        
        for df in invalid_dfs:
            try:
                atr = engine.calculate_atr(df)
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DataFrame: {len(df)} —Å—Ç—Ä–æ–∫")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ DataFrame: {e}")
                return False
        
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å—Ç–∞–±–∏–ª—å–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        return False

def run_long_term_stability_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚è∞ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò")
    print("="*80)
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    initial_memory = measure_memory_usage()
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory:.2f} GB")
    
    test_results = []
    
    # –¢–µ—Å—Ç 1: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏ (5 –º–∏–Ω—É—Ç)
    test_results.append(("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏", test_memory_stability(duration_minutes=5)))
    
    # –¢–µ—Å—Ç 2: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    test_results.append(("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –ë–î", test_database_stability()))
    
    # –¢–µ—Å—Ç 3: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    test_results.append(("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", test_component_integration_stability()))
    
    # –¢–µ—Å—Ç 4: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    test_results.append(("–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫", test_error_handling_stability()))
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    final_memory = measure_memory_usage()
    memory_increase = final_memory - initial_memory
    
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò")
    print("="*80)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = len(test_results)
    passed_tests = sum(1 for _, result in test_results if result)
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
    print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ: {initial_memory:.2f} GB")
    print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ: {final_memory:.2f} GB")
    print(f"   –ü—Ä–∏—Ä–æ—Å—Ç: {memory_increase:.2f} GB")
    
    if final_memory < 1.0:
        print("‚úÖ –ü–∞–º—è—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (< 1.0 GB)")
    else:
        print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏ (> 1.0 GB)")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for test_name, result in test_results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    return success_rate >= 75  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤

if __name__ == "__main__":
    success = run_long_term_stability_tests()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–´ –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –°–¢–ê–ë–ò–õ–¨–ù–ê –í –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –ü–ï–†–°–ü–ï–ö–¢–ò–í–ï!")
    else:
        print("\n‚ùå –¢–ï–°–¢–´ –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–´!")
        print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –£–õ–£–ß–®–ï–ù–ò–ï –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–ò!")
    
    exit(0 if success else 1)
