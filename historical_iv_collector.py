#!/usr/bin/env python3
"""
Historical IV Data Collector for SOL Options
Collects historical implied volatility data for the 2025 period
"""

import requests
import sqlite3
import pandas as pd
import time
import logging
import argparse
from datetime import datetime, timedelta
import os
from typing import List, Dict, Optional
import numpy as np
from scipy.stats import norm
from scipy.optimize import minimize_scalar

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('historical_iv_collection.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class HistoricalIVCollector:
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        self.db_path = db_path
        self.base_url = 'https://api.bybit.com'
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
        self.RATE_LIMIT_DELAY = 0.2  # 200ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.MAX_RETRIES = 3
        self.BACKOFF_FACTOR = 2
        
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS historical_iv_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    symbol TEXT NOT NULL,
                    mark_iv REAL,
                    bid_iv REAL,
                    ask_iv REAL,
                    mark_price REAL,
                    underlying_price REAL,
                    strike_price REAL,
                    expiry_date TEXT,
                    option_type TEXT,
                    delta REAL,
                    gamma REAL,
                    vega REAL,
                    theta REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(time, symbol)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö IV –¥–∞–Ω–Ω—ã—Ö (–ø–æ –¥–Ω—è–º)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS iv_agg_historical (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    spot_price REAL,
                    iv_30d REAL,
                    iv_60d REAL,
                    iv_90d REAL,
                    skew_30d REAL,
                    skew_60d REAL,
                    skew_90d REAL,
                    iv_term_structure REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(time, timeframe)
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_historical_iv_time ON historical_iv_data(time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_historical_iv_symbol ON historical_iv_data(symbol)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_iv_agg_historical_time ON iv_agg_historical(time)')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_option_symbols(self, base_coin='SOL', return_all=False):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–ª—è SOL."""
        logger.info(f"üîç –ü–æ–∏—Å–∫ –æ–ø—Ü–∏–æ–Ω–æ–≤ –¥–ª—è {base_coin}")
        
        try:
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'application/json'
            }
            params = {'category': 'option', 'baseCoin': base_coin}
            
            logger.info(f"üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {self.base_url}/v5/market/instruments-info")
            response = self.session.get(f'{self.base_url}/v5/market/instruments-info', params=params, headers=headers, timeout=10)
            
            if response.status_code != 200:
                logger.error(f"‚ùå HTTP {response.status_code}: {response.text}")
                return None
                
            response_data = response.json()
            if 'result' in response_data and 'list' in response_data['result']:
                symbols = [item['symbol'] for item in response_data['result']['list'] if item['status'] == 'Trading']
                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è {base_coin}")
                if symbols:
                    logger.info(f"üéØ –ü–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤: {symbols[:5]}")
                return symbols if return_all else (symbols[0] if symbols else None)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API: {response_data}")
                return None
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤: {e}")
            return None
    
    def get_historical_kline_data(self, symbol: str, interval: str, 
                                 start_time: str, end_time: str, limit: int = 1000) -> Optional[List]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤"""
        try:
            url = f"{self.base_url}/v5/market/kline"
            
            params = {
                'category': 'option',
                'symbol': symbol,
                'interval': interval,
                'start': start_time,
                'end': end_time,
                'limit': limit
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {symbol} {interval} {start_time} - {end_time}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data['retCode'] != 0:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {data['retMsg']}")
                return None
            
            return data['result']['list']
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def calculate_implied_volatility(self, option_price: float, spot_price: float, 
                                   strike_price: float, time_to_expiry: float, 
                                   risk_free_rate: float = 0.05, option_type: str = 'call') -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ–º—É—é –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é Newton-Raphson –º–µ—Ç–æ–¥–∞"""
        try:
            def black_scholes(S, K, T, r, sigma, option_type='call'):
                d1 = (np.log(S/K) + (r + 0.5*sigma**2)*T) / (sigma*np.sqrt(T))
                d2 = d1 - sigma*np.sqrt(T)
                
                if option_type == 'call':
                    return S*norm.cdf(d1) - K*np.exp(-r*T)*norm.cdf(d2)
                else:
                    return K*np.exp(-r*T)*norm.cdf(-d2) - S*norm.cdf(-d1)
            
            def objective(sigma):
                return black_scholes(spot_price, strike_price, time_to_expiry, risk_free_rate, sigma, option_type) - option_price
            
            # –ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
            sigma_guess = 0.3
            
            # Newton-Raphson –∏—Ç–µ—Ä–∞—Ü–∏–∏
            for _ in range(50):
                try:
                    f = objective(sigma_guess)
                    if abs(f) < 1e-6:
                        break
                    
                    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è (–≤–µ–≥–∞)
                    d1 = (np.log(spot_price/strike_price) + (risk_free_rate + 0.5*sigma_guess**2)*time_to_expiry) / (sigma_guess*np.sqrt(time_to_expiry))
                    vega = spot_price * np.sqrt(time_to_expiry) * norm.pdf(d1)
                    
                    if abs(vega) < 1e-10:
                        break
                    
                    sigma_guess = sigma_guess - f / vega
                    
                    if sigma_guess <= 0:
                        sigma_guess = 0.01
                    elif sigma_guess > 5:
                        sigma_guess = 5
                        
                except:
                    break
            
            return sigma_guess if sigma_guess > 0 else None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è IV: {e}")
            return None
    
    def collect_historical_iv_data(self, start_date: str, end_date: str, max_symbols: int = 50):
        """–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ü–∏–æ–Ω–æ–≤ SOL"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø—Ü–∏–æ–Ω–æ–≤
            symbols = self.get_option_symbols('SOL', return_all=True)
            if not symbols:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø—Ü–∏–æ–Ω–æ–≤")
                return False
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
            if max_symbols:
                symbols = symbols[:max_symbols]
                logger.info(f"üî¢ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–±–æ—Ä –¥–æ {max_symbols} —Å–∏–º–≤–æ–ª–æ–≤")
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤")
            logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            total_records = 0
            
            for i, symbol in enumerate(symbols, 1):
                logger.info(f"üìà –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(symbols)}: {symbol}")
                
                try:
                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–≤–æ–ª–µ
                    # –§–æ—Ä–º–∞—Ç: SOL-26SEP25-360-P-USDT
                    parts = symbol.split('-')
                    if len(parts) >= 4:
                        expiry_str = parts[1]  # 26SEP25
                        strike_str = parts[2]  # 360
                        option_type = parts[3]  # P –∏–ª–∏ C
                        
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
                        try:
                            expiry_date = datetime.strptime(expiry_str, '%d%b%y')
                            strike_price = float(strike_str)
                        except:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å–∏–º–≤–æ–ª {symbol}")
                            continue
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª–∞ {symbol}")
                        continue
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ timestamp
                    start_ts = int(datetime.strptime(start_date, '%Y-%m-%d').timestamp() * 1000)
                    end_ts = int(datetime.strptime(end_date, '%Y-%m-%d').timestamp() * 1000)
                    
                    current_ts = start_ts
                    
                    while current_ts < end_ts:
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π timestamp (1 –¥–µ–Ω—å)
                        next_ts = current_ts + (1000 * 24 * 60 * 60 * 1000)  # +1 –¥–µ–Ω—å
                        if next_ts > end_ts:
                            next_ts = end_ts
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                        kline_data = self.get_historical_kline_data(
                            symbol, 'D', str(current_ts), str(next_ts)
                        )
                        
                        if kline_data:
                            for candle in kline_data:
                                try:
                                    timestamp = int(candle[0])
                                    time_str = datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')
                                    close_price = float(candle[4])
                                    
                                    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
                                    current_date = datetime.fromtimestamp(timestamp / 1000)
                                    time_to_expiry = (expiry_date - current_date).days / 365.0
                                    
                                    if time_to_expiry <= 0:
                                        continue
                                    
                                    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–æ—Ç–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                                    spot_query = """
                                    SELECT close FROM spot_data 
                                    WHERE time <= ? AND timeframe = '1m'
                                    ORDER BY time DESC LIMIT 1
                                    """
                                    cursor.execute(spot_query, [time_str])
                                    spot_result = cursor.fetchone()
                                    
                                    if not spot_result:
                                        continue
                                    
                                    spot_price = float(spot_result[0])
                                    
                                    # –í—ã—á–∏—Å–ª—è–µ–º IV
                                    iv = self.calculate_implied_volatility(
                                        close_price, spot_price, strike_price, 
                                        time_to_expiry, option_type=option_type
                                    )
                                    
                                    if iv is not None:
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                        cursor.execute('''
                                            INSERT OR REPLACE INTO historical_iv_data 
                                            (time, symbol, mark_iv, mark_price, underlying_price, 
                                             strike_price, expiry_date, option_type)
                                            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                                        ''', (
                                            time_str, symbol, iv, close_price, spot_price,
                                            strike_price, expiry_date.strftime('%Y-%m-%d'), option_type
                                        ))
                                        
                                        total_records += 1
                                        
                                except Exception as e:
                                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–µ—á–∏: {e}")
                                    continue
                            
                            conn.commit()
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(kline_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {symbol}")
                        
                        # –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
                        current_ts = next_ts
                        
                        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                        time.sleep(self.RATE_LIMIT_DELAY)
                
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–º–≤–æ–ª–∞ {symbol}: {e}")
                    continue
            
            conn.close()
            logger.info(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω —Å–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö: {total_records} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def aggregate_iv_data(self, start_date: str, end_date: str):
        """–ê–≥—Ä–µ–≥–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ IV –¥–∞–Ω–Ω—ã–µ –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            logger.info(f"üìä –ê–≥—Ä–µ–≥–∞—Ü–∏—è IV –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
            
            conn = sqlite3.connect(self.db_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ IV –¥–∞–Ω–Ω—ã–µ
            query = """
            SELECT 
                time,
                mark_iv,
                underlying_price,
                strike_price,
                expiry_date,
                option_type
            FROM historical_iv_data 
            WHERE time BETWEEN ? AND ?
            ORDER BY time
            """
            
            df = pd.read_sql_query(query, conn, params=[start_date, end_date])
            
            if df.empty:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏")
                return False
            
            df['time'] = pd.to_datetime(df['time'])
            df['expiry_date'] = pd.to_datetime(df['expiry_date'])
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏
            df['time_to_expiry'] = (df['expiry_date'] - df['time']).dt.days / 365.0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            df['date'] = df['time'].dt.date
            
            # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
            daily_iv = df.groupby('date').agg({
                'underlying_price': 'last',  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –¥–Ω—è
                'mark_iv': ['mean', 'std', 'min', 'max'],
                'time_to_expiry': 'mean'
            }).reset_index()
            
            # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
            daily_iv.columns = ['date', 'spot_price', 'iv_mean', 'iv_std', 'iv_min', 'iv_max', 'avg_ttm']
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            daily_iv['iv_30d'] = daily_iv['iv_mean']  # –°—Ä–µ–¥–Ω—è—è IV
            daily_iv['skew_30d'] = daily_iv['iv_std'] / daily_iv['iv_mean']  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏ –∫–∞–∫ –º–µ—Ä–∞ skew
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor = conn.cursor()
            
            for _, row in daily_iv.iterrows():
                time_str = row['date'].strftime('%Y-%m-%d %H:%M:%S')
                
                cursor.execute('''
                    INSERT OR REPLACE INTO iv_agg_historical 
                    (time, timeframe, spot_price, iv_30d, skew_30d)
                    VALUES (?, ?, ?, ?, ?)
                ''', (
                    time_str, '1d', row['spot_price'], row['iv_30d'], row['skew_30d']
                ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –ê–≥—Ä–µ–≥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(daily_iv)} –¥–Ω–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ IV –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

def main():
    parser = argparse.ArgumentParser(description='–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö SOL –æ–ø—Ü–∏–æ–Ω–æ–≤')
    parser.add_argument('--start', required=True,
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--end', required=True,
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--max-symbols', type=int, default=50,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞')
    parser.add_argument('--db', default='data/sol_iv.db',
                       help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--aggregate-only', action='store_true',
                       help='–¢–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫
    collector = HistoricalIVCollector(args.db)
    
    if args.aggregate_only:
        # –¢–æ–ª—å–∫–æ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
        success = collector.aggregate_iv_data(args.start, args.end)
    else:
        # –ü–æ–ª–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
        success = collector.collect_historical_iv_data(args.start, args.end, args.max_symbols)
        if success:
            success = collector.aggregate_iv_data(args.start, args.end)
    
    if success:
        logger.info("‚úÖ –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logger.error("‚ùå –°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö IV –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
