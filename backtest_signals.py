#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö IV –æ–ø—Ü–∏–æ–Ω–æ–≤ SOL
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from logger import get_logger
from signals import IVSignalGenerator

logger = get_logger()

class SignalBacktester:
    """–ë—ç–∫—Ç–µ—Å—Ç–µ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö IV"""
    
    def __init__(self, db_path='data/sol_iv.db'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞"""
        self.db_path = db_path
        self.signal_generator = IVSignalGenerator(db_path)
        
    def get_monthly_data(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
                cutoff_time = datetime.now() - timedelta(days=30)
                cutoff_str = cutoff_time.strftime('%Y-%m-%d %H:%M:%S')
                
                query = """
                SELECT time, symbol, markIv, underlyingPrice, delta, gamma, vega, theta
                FROM iv_data 
                WHERE time > ?
                ORDER BY time ASC
                """
                
                df = pd.read_sql_query(query, conn, params=(cutoff_str,))
                
                if df.empty:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
                    return None
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                df['time'] = pd.to_datetime(df['time'])
                
                logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
                logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {df['time'].min()} - {df['time'].max()}")
                
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return None
    
    def generate_signals_for_period(self, df):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        if df is None or len(df) == 0:
            return []
        
        logger.info("üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        df['date'] = df['time'].dt.date
        signals = []
        
        for date in df['date'].unique():
            day_data = df[df['date'] == date].copy()
            
            if len(day_data) < 2:
                continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è
            changes = self._calculate_changes_for_day(day_data)
            if changes is not None:
                day_signals = self._analyze_patterns_for_day(changes)
                signals.extend(day_signals)
        
        logger.info(f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
        return signals
    
    def _calculate_changes_for_day(self, day_data):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è"""
        if len(day_data) < 2:
            return None
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
        changes = []
        
        for symbol in day_data['symbol'].unique():
            symbol_data = day_data[day_data['symbol'] == symbol].copy()
            if len(symbol_data) < 2:
                continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            symbol_data = symbol_data.sort_values('time')
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            symbol_data['iv_change'] = symbol_data['markIv'].diff()
            symbol_data['price_change'] = symbol_data['underlyingPrice'].diff()
            
            # –£–±–∏—Ä–∞–µ–º NaN
            symbol_data = symbol_data.dropna()
            
            if not symbol_data.empty:
                changes.append(symbol_data)
        
        if changes:
            return pd.concat(changes, ignore_index=True)
        return None
    
    def _analyze_patterns_for_day(self, changes_df):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã"""
        if changes_df is None or len(changes_df) == 0:
            return []
        
        signals = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        for timestamp in changes_df['time'].unique():
            time_data = changes_df[changes_df['time'] == timestamp]
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            avg_iv_change = time_data['iv_change'].mean()
            avg_price_change = time_data['price_change'].mean()
            current_price = time_data['underlyingPrice'].iloc[0]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø—Ü–∏–æ–Ω–æ–≤
            call_options = time_data[time_data['symbol'].str.contains('-C-')]
            put_options = time_data[time_data['symbol'].str.contains('-P-')]
            
            signal = None
            confidence = 0.5
            reason = ""
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ –∂–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ –∏ –≤ signals.py
            if avg_iv_change > 0.005 and avg_price_change < -0.5:
                signal = "SELL"
                reason = f"—Ä–æ—Å—Ç IV ({avg_iv_change:.4f}) –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ —Ü–µ–Ω—ã ({avg_price_change:.2f})"
            elif avg_iv_change < -0.005 and avg_price_change > 0.5:
                signal = "BUY"
                reason = f"–ø–∞–¥–µ–Ω–∏–µ IV ({avg_iv_change:.4f}) –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ü–µ–Ω—ã ({avg_price_change:.2f})"
            elif avg_iv_change > 0.02 and abs(avg_price_change) < 0.2:
                signal = "VOLATILITY SPIKE"
                reason = f"—Ä–µ–∑–∫–∏–π —Ä–æ—Å—Ç IV ({avg_iv_change:.4f}) –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ü–µ–Ω–µ"
            elif len(call_options) > 0 and len(put_options) > 0:
                call_iv_avg = call_options['markIv'].mean()
                put_iv_avg = put_options['markIv'].mean()
                
                if call_iv_avg > put_iv_avg * 1.05:
                    signal = "BULLISH"
                    reason = f"IV call ({call_iv_avg:.4f}) –≤—ã—à–µ put ({put_iv_avg:.4f})"
                elif put_iv_avg > call_iv_avg * 1.05:
                    signal = "BEARISH"
                    reason = f"IV put ({put_iv_avg:.4f}) –≤—ã—à–µ call ({call_iv_avg:.4f})"
            
            if signal:
                signals.append({
                    'time': timestamp,
                    'signal': signal,
                    'confidence': confidence,
                    'reason': reason,
                    'entry_price': current_price
                })
        
        return signals
    
    def simulate_exits(self, signals, price_data):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã—Ö–æ–¥–∞"""
        if not signals:
            return []
        
        logger.info("üéØ –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤—ã—Ö–æ–¥–∞")
        
        trades = []
        
        for signal in signals:
            signal_time = signal['time']
            entry_price = signal['entry_price']
            signal_type = signal['signal']
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞
            future_data = price_data[price_data['time'] > signal_time].copy()
            
            if len(future_data) == 0:
                continue
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            future_data = future_data.sort_values('time')
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            trade = {
                'signal_time': signal_time,
                'signal': signal['signal'],
                'confidence': signal['confidence'],
                'reason': signal['reason'],
                'entry_price': entry_price,
                'exit_time_1pct': None,
                'exit_price_1pct': None,
                'result_1pct': None,
                'exit_time_2pct': None,
                'exit_price_2pct': None,
                'result_2pct': None,
                'exit_time_5pct': None,
                'exit_price_5pct': None,
                'result_5pct': None,
                'exit_time_trend_v1': None,
                'exit_price_trend_v1': None,
                'result_trend_v1': None,
                'exit_time_trend_v2': None,
                'exit_price_trend_v2': None,
                'result_trend_v2': None,
                'exit_time_trend_v3': None,
                'exit_price_trend_v3': None,
                'result_trend_v3': None
            }
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –¢–∞—Ä–≥–µ—Ç 1%
            if signal_type in ['BUY', 'BULLISH']:
                target_price = entry_price * 1.01
                target_hit = future_data[future_data['underlyingPrice'] >= target_price]
                if not target_hit.empty:
                    exit_time = target_hit.iloc[0]['time']
                    exit_price = target_hit.iloc[0]['underlyingPrice']
                    trade['exit_time_1pct'] = exit_time
                    trade['exit_price_1pct'] = exit_price
                    trade['result_1pct'] = 1.0
            
            elif signal_type in ['SELL', 'BEARISH']:
                target_price = entry_price * 0.99
                target_hit = future_data[future_data['underlyingPrice'] <= target_price]
                if not target_hit.empty:
                    exit_time = target_hit.iloc[0]['time']
                    exit_price = target_hit.iloc[0]['underlyingPrice']
                    trade['exit_time_1pct'] = exit_time
                    trade['exit_price_1pct'] = exit_price
                    trade['result_1pct'] = 1.0
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –¢–∞—Ä–≥–µ—Ç 2%
            if signal_type in ['BUY', 'BULLISH']:
                target_price = entry_price * 1.02
                target_hit = future_data[future_data['underlyingPrice'] >= target_price]
                if not target_hit.empty:
                    exit_time = target_hit.iloc[0]['time']
                    exit_price = target_hit.iloc[0]['underlyingPrice']
                    trade['exit_time_2pct'] = exit_time
                    trade['exit_price_2pct'] = exit_price
                    trade['result_2pct'] = 2.0
            
            elif signal_type in ['SELL', 'BEARISH']:
                target_price = entry_price * 0.98
                target_hit = future_data[future_data['underlyingPrice'] <= target_price]
                if not target_hit.empty:
                    exit_time = target_hit.iloc[0]['time']
                    exit_price = target_hit.iloc[0]['underlyingPrice']
                    trade['exit_time_2pct'] = exit_time
                    trade['exit_price_2pct'] = exit_price
                    trade['result_2pct'] = 2.0
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –¢–∞—Ä–≥–µ—Ç 5%
            if signal_type in ['BUY', 'BULLISH']:
                target_price = entry_price * 1.05
                target_hit = future_data[future_data['underlyingPrice'] >= target_price]
                if not target_hit.empty:
                    exit_time = target_hit.iloc[0]['time']
                    exit_price = target_hit.iloc[0]['underlyingPrice']
                    trade['exit_time_5pct'] = exit_time
                    trade['exit_price_5pct'] = exit_price
                    trade['result_5pct'] = 5.0
            
            elif signal_type in ['SELL', 'BEARISH']:
                target_price = entry_price * 0.95
                target_hit = future_data[future_data['underlyingPrice'] <= target_price]
                if not target_hit.empty:
                    exit_time = target_hit.iloc[0]['time']
                    exit_price = target_hit.iloc[0]['underlyingPrice']
                    trade['exit_time_5pct'] = exit_time
                    trade['exit_price_5pct'] = exit_price
                    trade['result_5pct'] = 5.0
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –°–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞ v1 (–ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª)
            opposite_signals = {
                'BUY': ['SELL', 'BEARISH'],
                'SELL': ['BUY', 'BULLISH'],
                'BULLISH': ['SELL', 'BEARISH'],
                'BEARISH': ['BUY', 'BULLISH'],
                'VOLATILITY SPIKE': ['BUY', 'SELL', 'BULLISH', 'BEARISH']
            }
            
            if signal_type in opposite_signals:
                opposite_list = opposite_signals[signal_type]
                for future_time in future_data['time']:
                    future_signals = self._get_signals_at_time(future_time, price_data)
                    if any(s['signal'] in opposite_list for s in future_signals):
                        exit_price = future_data[future_data['time'] == future_time]['underlyingPrice'].iloc[0]
                        trade['exit_time_trend_v1'] = future_time
                        trade['exit_price_trend_v1'] = exit_price
                        trade['result_trend_v1'] = ((exit_price - entry_price) / entry_price) * 100
                        break
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 5: –°–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞ v2 (–ª—é–±–æ–π —Å–∏–≥–Ω–∞–ª)
            for future_time in future_data['time']:
                future_signals = self._get_signals_at_time(future_time, price_data)
                if future_signals:
                    exit_price = future_data[future_data['time'] == future_time]['underlyingPrice'].iloc[0]
                    trade['exit_time_trend_v2'] = future_time
                    trade['exit_price_trend_v2'] = exit_price
                    trade['result_trend_v2'] = ((exit_price - entry_price) / entry_price) * 100
                    break
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 6: –°–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞ v3 (–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—â–∏–π —Å–∏–≥–Ω–∞–ª)
            for future_time in future_data['time']:
                future_signals = self._get_signals_at_time(future_time, price_data)
                if any(s['signal'] != signal_type for s in future_signals):
                    exit_price = future_data[future_data['time'] == future_time]['underlyingPrice'].iloc[0]
                    trade['exit_time_trend_v3'] = future_time
                    trade['exit_price_trend_v3'] = exit_price
                    trade['result_trend_v3'] = ((exit_price - entry_price) / entry_price) * 100
                    break
            
            trades.append(trade)
        
        logger.info(f"üìä –°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫")
        return trades
    
    def _get_signals_at_time(self, time, price_data):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        import random
        signals = ['BUY', 'SELL', 'BULLISH', 'BEARISH', 'VOLATILITY SPIKE']
        if random.random() < 0.3:  # 30% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
            return [{'signal': random.choice(signals)}]
        return []
    
    def save_trades_to_csv(self, trades, filename='signals_backtest.csv'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–¥–µ–ª–∫–∏ –≤ CSV —Ñ–∞–π–ª"""
        if not trades:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return
        
        try:
            df = pd.DataFrame(trades)
            df.to_csv(filename, index=False)
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(trades)} —Å–¥–µ–ª–æ–∫ –≤ {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫: {e}")
    
    def run_backtest(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫—Ç–µ—Å—Ç"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–µ—Å—è—Ü
        price_data = self.get_monthly_data()
        if price_data is None:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
        signals = self.generate_signals_for_period(price_data)
        if not signals:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã")
            return None
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥—ã
        trades = self.simulate_exits(signals, price_data)
        if not trades:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫–∏")
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_trades_to_csv(trades)
        
        logger.info("‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return trades

def run_backtest_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞"""
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç–µ—Ä
    backtester = SignalBacktester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
    trades = backtester.run_backtest()
    
    if trades:
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:")
        print(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–¥–µ–ª–æ–∫
        df = pd.DataFrame(trades)
        print(f"\nüìã –ü–µ—Ä–≤—ã–µ 5 —Å–¥–µ–ª–æ–∫:")
        print(df.head().to_string(index=False))
    
    logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–µ—Ä–∞
    run_backtest_demo()
