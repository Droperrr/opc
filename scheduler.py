#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö IV
"""

import schedule
import time
import threading
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from logger import get_logger
from get_iv import get_all_sol_options_data
from database import get_database

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

logger = get_logger()

class IVDataScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö IV"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.running = False
        self.thread = None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15 –º–∏–Ω—É—Ç)
        self.interval_minutes = int(os.getenv('FETCH_INTERVAL_MINUTES', 15))
        
        logger.info(f"üîß –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {self.interval_minutes} –º–∏–Ω—É—Ç")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        self.setup_schedule()
    
    def setup_schedule(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç
        schedule.every(self.interval_minutes).minutes.do(self.collect_data_job)
        
        # –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        schedule.every().minute.at(":00").do(self.collect_data_job)
        
        logger.info(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ {self.interval_minutes} –º–∏–Ω—É—Ç")
    
    def collect_data_job(self):
        """–ó–∞–¥–∞—á–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö IV"""
        start_time = datetime.now()
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö IV –≤ {start_time.strftime('%H:%M:%S')}")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å max_symbols –¥–ª—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤
            iv_df = get_all_sol_options_data(max_symbols=10)
            
            if iv_df is not None:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                db = get_database()
                total_records = db.get_total_records()
                unique_symbols = db.get_unique_symbols()
                
                end_time = datetime.now()
                duration = (end_time - start_time).total_seconds()
                
                logger.info(f"‚úÖ –ü–ª–∞–Ω–æ–≤—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
                logger.info(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –ë–î: {total_records}")
                logger.info(f"üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {len(unique_symbols)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
                next_run = start_time + timedelta(minutes=self.interval_minutes)
                logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run.strftime('%H:%M:%S')}")
                
            else:
                logger.error("‚ùå –ü–ª–∞–Ω–æ–≤—ã–π —Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–æ–≤–æ–º —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = True
        self.thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.thread.start()
        
        logger.info("üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        logger.info(f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–±–æ—Ä–∞: {self.interval_minutes} –º–∏–Ω—É—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        first_run = datetime.now() + timedelta(minutes=1)
        logger.info(f"‚è∞ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: {first_run.strftime('%H:%M:%S')}")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.running = False
        schedule.clear()
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=5)
        
        logger.info("üõë –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –¥–æ–ª—å—à–µ
    
    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        status = {
            'running': self.running,
            'interval_minutes': self.interval_minutes,
            'next_jobs': []
        }
        
        if self.running:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–¥–∞—á–∞—Ö
            for job in schedule.jobs:
                status['next_jobs'].append({
                    'function': job.job_func.__name__,
                    'next_run': job.next_run.strftime('%H:%M:%S') if job.next_run else 'N/A'
                })
        
        return status

def run_scheduler_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    scheduler = IVDataScheduler()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    
    try:
        # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á...")
        
        # –ñ–¥–µ–º 3 –º–∏–Ω—É—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
        for i in range(6):  # 6 * 30 —Å–µ–∫—É–Ω–¥ = 3 –º–∏–Ω—É—Ç—ã
            time.sleep(30)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            status = scheduler.get_status()
            logger.info(f"üìä –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {'–ó–∞–ø—É—â–µ–Ω' if status['running'] else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
            
            if status['next_jobs']:
                for job in status['next_jobs']:
                    logger.info(f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –∑–∞–¥–∞—á–∞ {job['function']}: {job['next_run']}")
    
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.stop()
        logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    run_scheduler_demo()
