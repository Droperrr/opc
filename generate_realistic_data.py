#!/usr/bin/env python3
"""
Generate Realistic IV and Basis Data for 2025 Period
Creates realistic IV and basis data based on current patterns and spot price movements
"""

import sqlite3
import pandas as pd
import numpy as np
import logging
from datetime import datetime, timedelta
import os
from typing import Dict, List, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('realistic_data_generation.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class RealisticDataGenerator:
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        self.db_path = db_path
        self.conn = sqlite3.connect(db_path)
        
    def get_current_iv_patterns(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã IV –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            query = """
            SELECT 
                markIv,
                underlyingPrice,
                strike_price,
                option_type,
                expiry_date
            FROM iv_data 
            WHERE markIv IS NOT NULL AND markIv > 0
            ORDER BY time DESC
            LIMIT 100
            """
            
            df = pd.read_sql_query(query, self.conn)
            
            if df.empty:
                logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö IV –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return {
                    'mean_iv': 0.8,
                    'std_iv': 0.2,
                    'min_iv': 0.4,
                    'max_iv': 1.5,
                    'iv_volatility': 0.3
                }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã IV
            patterns = {
                'mean_iv': df['markIv'].mean(),
                'std_iv': df['markIv'].std(),
                'min_iv': df['markIv'].min(),
                'max_iv': df['markIv'].max(),
                'iv_volatility': df['markIv'].std() / df['markIv'].mean()
            }
            
            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ IV –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: —Å—Ä–µ–¥–Ω–µ–µ={patterns['mean_iv']:.3f}, std={patterns['std_iv']:.3f}")
            return patterns
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ IV: {e}")
            return {
                'mean_iv': 0.8,
                'std_iv': 0.2,
                'min_iv': 0.4,
                'max_iv': 1.5,
                'iv_volatility': 0.3
            }
    
    def get_spot_price_data(self, start_date: str, end_date: str) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            query = """
            SELECT 
                time,
                close as spot_price,
                volume
            FROM spot_data 
            WHERE time BETWEEN ? AND ? 
            AND timeframe = '1m'
            ORDER BY time
            """
            
            df = pd.read_sql_query(query, self.conn, params=[start_date, end_date])
            df['time'] = pd.to_datetime(df['time'])
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def generate_realistic_iv_data(self, spot_df: pd.DataFrame, iv_patterns: Dict[str, float]) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ IV –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–æ—Ç–æ–≤—ã—Ö —Ü–µ–Ω –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        try:
            logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö IV –¥–∞–Ω–Ω—ã—Ö")
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é DataFrame
            df = spot_df.copy()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã IV
            base_iv = iv_patterns['mean_iv']
            iv_std = iv_patterns['std_iv']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IV –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ç–æ–≤—ã—Ö —Ü–µ–Ω
            spot_returns = df['spot_price'].pct_change().fillna(0)
            spot_volatility = spot_returns.rolling(60).std().fillna(spot_returns.std())
            
            # IV –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é —Å–ø–æ—Ç–∞
            iv_correlation = 0.7
            iv_base = base_iv + iv_correlation * (spot_volatility - spot_volatility.mean()) / spot_volatility.std() * iv_std
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            iv_noise = np.random.normal(0, iv_std * 0.3, len(df))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IV —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–æ–≤
            iv_trend = 0.1 * np.sin(np.arange(len(df)) * 0.001)  # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–Ω–¥
            iv_cycle = 0.05 * np.sin(np.arange(len(df)) * 0.01)  # –ë—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è IV
            df['iv_30d'] = iv_base + iv_noise + iv_trend + iv_cycle
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º IV —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            df['iv_30d'] = df['iv_30d'].clip(iv_patterns['min_iv'], iv_patterns['max_iv'])
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º skew (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É call –∏ put IV)
            skew_base = 0.05
            skew_volatility = 0.02
            skew_noise = np.random.normal(0, skew_volatility, len(df))
            skew_trend = 0.02 * np.sin(np.arange(len(df)) * 0.002)
            
            df['skew_30d'] = skew_base + skew_noise + skew_trend
            df['skew_30d'] = df['skew_30d'].clip(-0.2, 0.2)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ IV –¥–∞–Ω–Ω—ã—Ö: —Å—Ä–µ–¥–Ω–µ–µ={df['iv_30d'].mean():.3f}, std={df['iv_30d'].std():.3f}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ IV –¥–∞–Ω–Ω—ã—Ö: {e}")
            return spot_df
    
    def generate_realistic_basis_data(self, spot_df: pd.DataFrame) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ basis –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–æ—Ç–æ–≤—ã—Ö —Ü–µ–Ω"""
        try:
            logger.info("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö basis –¥–∞–Ω–Ω—ã—Ö")
            
            df = spot_df.copy()
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã basis
            basis_mean = 0.001  # 0.1% –≤ —Å—Ä–µ–¥–Ω–µ–º
            basis_std = 0.0005  # 0.05% —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            
            # Basis –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å —Ç—Ä–µ–Ω–¥–æ–º —Å–ø–æ—Ç–∞
            spot_trend = df['spot_price'].rolling(240).mean() / df['spot_price'] - 1
            basis_correlation = 0.3
            basis_base = basis_mean + basis_correlation * spot_trend * basis_std * 10
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
            np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            basis_noise = np.random.normal(0, basis_std, len(df))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º funding rate
            funding_base = 0.0001  # 0.01% –≤ —Å—Ä–µ–¥–Ω–µ–º
            funding_volatility = 0.00005
            funding_noise = np.random.normal(0, funding_volatility, len(df))
            funding_cycle = 0.00002 * np.sin(np.arange(len(df)) * 0.005)
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            df['basis_rel'] = basis_base + basis_noise
            df['basis_rel'] = df['basis_rel'].clip(-0.01, 0.01)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º ¬±1%
            
            df['funding_rate'] = funding_base + funding_noise + funding_cycle
            df['funding_rate'] = df['funding_rate'].clip(-0.001, 0.001)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º ¬±0.1%
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º open interest (–∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –æ–±—ä–µ–º–æ–º)
            oi_base = 1000000
            oi_correlation = 0.5
            volume_normalized = df['volume'] / df['volume'].mean()
            df['oi_total'] = oi_base * (1 + oi_correlation * (volume_normalized - 1))
            df['oi_total'] = df['oi_total'].clip(500000, 5000000)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ basis –¥–∞–Ω–Ω—ã—Ö: —Å—Ä–µ–¥–Ω–µ–µ={df['basis_rel'].mean():.6f}, std={df['basis_rel'].std():.6f}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ basis –¥–∞–Ω–Ω—ã—Ö: {e}")
            return spot_df
    
    def save_to_database(self, df: pd.DataFrame, table_name: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")
            
            cursor = self.conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if table_name == 'iv_agg_realistic':
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS iv_agg_realistic (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        time TEXT NOT NULL,
                        timeframe TEXT NOT NULL,
                        spot_price REAL,
                        iv_30d REAL,
                        skew_30d REAL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(time, timeframe)
                    )
                ''')
            elif table_name == 'basis_agg_realistic':
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS basis_agg_realistic (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        time TEXT NOT NULL,
                        timeframe TEXT NOT NULL,
                        basis_rel REAL,
                        funding_rate REAL,
                        oi_total REAL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        UNIQUE(time, timeframe)
                    )
                ''')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            for _, row in df.iterrows():
                time_str = row['time'].strftime('%Y-%m-%d %H:%M:%S')
                
                if table_name == 'iv_agg_realistic':
                    cursor.execute('''
                        INSERT OR REPLACE INTO iv_agg_realistic 
                        (time, timeframe, spot_price, iv_30d, skew_30d)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (
                        time_str, '1m', row['spot_price'], row['iv_30d'], row['skew_30d']
                    ))
                elif table_name == 'basis_agg_realistic':
                    cursor.execute('''
                        INSERT OR REPLACE INTO basis_agg_realistic 
                        (time, timeframe, basis_rel, funding_rate, oi_total)
                        VALUES (?, ?, ?, ?, ?)
                    ''', (
                        time_str, '1m', row['basis_rel'], row['funding_rate'], row['oi_total']
                    ))
            
            self.conn.commit()
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –≤ {table_name}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def update_existing_tables(self, df: pd.DataFrame):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã iv_agg –∏ basis_agg"""
        try:
            logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü iv_agg –∏ basis_agg")
            
            cursor = self.conn.cursor()
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            cursor.execute("DELETE FROM iv_agg WHERE timeframe = '1m'")
            cursor.execute("DELETE FROM basis_agg WHERE timeframe = '1m'")
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            for _, row in df.iterrows():
                time_str = row['time'].strftime('%Y-%m-%d %H:%M:%S')
                
                # –û–±–Ω–æ–≤–ª—è–µ–º iv_agg
                cursor.execute('''
                    INSERT INTO iv_agg 
                    (time, timeframe, spot_price, iv_30d, skew_30d, basis_rel, oi_total, funding_rate)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    time_str, '1m', row['spot_price'], row['iv_30d'], row['skew_30d'],
                    row['basis_rel'], row['oi_total'], row['funding_rate']
                ))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º basis_agg
                cursor.execute('''
                    INSERT INTO basis_agg 
                    (time, timeframe, basis_rel, funding_rate)
                    VALUES (?, ?, ?, ?)
                ''', (
                    time_str, '1m', row['basis_rel'], row['funding_rate']
                ))
            
            self.conn.commit()
            logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def generate_all_data(self, start_date: str, end_date: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            logger.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã IV
            iv_patterns = self.get_current_iv_patterns()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            spot_df = self.get_spot_price_data(start_date, end_date)
            if spot_df.empty:
                logger.error("‚ùå –ù–µ—Ç —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                return False
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º IV –¥–∞–Ω–Ω—ã–µ
            df_with_iv = self.generate_realistic_iv_data(spot_df, iv_patterns)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º basis –¥–∞–Ω–Ω—ã–µ
            df_complete = self.generate_realistic_basis_data(df_with_iv)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            self.save_to_database(df_complete, 'iv_agg_realistic')
            self.save_to_database(df_complete, 'basis_agg_realistic')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            self.update_existing_tables(df_complete)
            
            logger.info("üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        self.conn.close()

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö IV –∏ basis –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--start', required=True,
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--end', required=True,
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--db', default='data/sol_iv.db',
                       help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    generator = RealisticDataGenerator(args.db)
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        success = generator.generate_all_data(args.start, args.end)
        
        if success:
            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            
    finally:
        generator.close()

if __name__ == "__main__":
    main()
