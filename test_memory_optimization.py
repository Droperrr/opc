#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–ó–∞–¥–∞—á–∞ S-13: –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ S-10 FULL RUN
"""

import sys
import os
import logging
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

try:
    from memory_optimizer import MemoryOptimizer
    from memory_monitor import MemoryProfiler
    from search.coarse_search import CoarseSearch
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('test_memory_optimization.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def test_memory_optimizer():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 1: MemoryOptimizer")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = MemoryOptimizer(chunk_size=10000, max_memory_gb=1.5)
        
        # –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        import pandas as pd
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = pd.DataFrame({
            'iv_z': np.random.randn(50000).astype('float64'),
            'skew_z': np.random.randn(50000).astype('float64'),
            'basis_z': np.random.randn(50000).astype('float64'),
            'momentum': np.random.randn(50000).astype('float64'),
            'volatility': np.random.randn(50000).astype('float64')
        })
        
        logger.info(f"üìä –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data.memory_usage(deep=True).sum() / (1024**2):.2f} MB")
        
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        optimized_data = optimizer.optimize_dtypes(test_data)
        logger.info(f"üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {optimized_data.memory_usage(deep=True).sum() / (1024**2):.2f} MB")
        
        # –¢–µ—Å—Ç —á–∞–Ω–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        def process_chunk(chunk):
            return chunk * 2
        
        results = list(optimizer.process_in_chunks(optimized_data, process_chunk))
        logger.info(f"‚úÖ –ß–∞–Ω–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(results)} —á–∞–Ω–∫–æ–≤")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ MemoryOptimizer: {e}")
        return False

def test_coarse_search_memory():
    """–¢–µ—Å—Ç CoarseSearch —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 2: CoarseSearch —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä CoarseSearch
        search = CoarseSearch("config/experiment.yaml")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
        if hasattr(search, 'memory_optimizer') and search.memory_optimizer:
            logger.info("‚úÖ MemoryOptimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ CoarseSearch")
        else:
            logger.warning("‚ö†Ô∏è MemoryOptimizer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ CoarseSearch")
        
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
        df = search.load_historical_data("2025-01-01", "2025-01-02")  # –¢–æ–ª—å–∫–æ 1 –¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–∞
        
        if df is not None and len(df) > 0:
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
            # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            logger.info("üìä –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤...")
            df_with_indicators = search._add_technical_indicators(df)
            
            if df_with_indicators is not None:
                logger.info(f"‚úÖ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: {len(df_with_indicators)} –∑–∞–ø–∏—Å–µ–π")
                
                # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã
                logger.info("üìä –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã...")
                test_params = {'a': 1.0, 'b': 0.5, 'c': 0.3, 'd': 0.2}
                Y = search.calculate_formula_value(df_with_indicators, "F01", test_params)
                
                if Y is not None and len(Y) > 0:
                    logger.info(f"‚úÖ –§–æ—Ä–º—É–ª–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∞: {len(Y)} –∑–Ω–∞—á–µ–Ω–∏–π")
                    
                    # –¢–µ—Å—Ç –±—ç–∫—Ç–µ—Å—Ç–∞
                    logger.info("üìä –¢–µ—Å—Ç –±—ç–∫—Ç–µ—Å—Ç–∞...")
                    metrics = search.run_backtest(df_with_indicators, "F01", test_params)
                    
                    if metrics:
                        logger.info(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: Sharpe={metrics.get('sharpe_ratio', 0):.3f}")
                        return True
                    else:
                        logger.error("‚ùå –ë—ç–∫—Ç–µ—Å—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª –º–µ—Ç—Ä–∏–∫–∏")
                        return False
                else:
                    logger.error("‚ùå –§–æ—Ä–º—É–ª–∞ –Ω–µ –≤—ã—á–∏—Å–ª–µ–Ω–∞")
                    return False
            else:
                logger.error("‚ùå –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                return False
        else:
            logger.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ CoarseSearch: {e}")
        return False

def test_memory_profiler():
    """–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫–∞ –ø–∞–º—è—Ç–∏"""
    logger.info("üß™ –¢–µ—Å—Ç 3: MemoryProfiler")
    
    try:
        profiler = MemoryProfiler("test_memory_profiler.log")
        
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        profiler.log_memory_usage("–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä–æ–≥–æ–≤
        exceeds_threshold = profiler.check_memory_threshold(1.0)
        logger.info(f"üìä –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ 1GB: {exceeds_threshold}")
        
        # –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
        report = profiler.generate_memory_report()
        logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {report['total_samples']} –æ–±—Ä–∞–∑—Ü–æ–≤")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ MemoryProfiler: {e}")
        return False

def test_full_memory_optimization():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    logger.info("üöÄ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")
    
    start_time = time.time()
    results = {}
    
    # –¢–µ—Å—Ç 1: MemoryOptimizer
    results['memory_optimizer'] = test_memory_optimizer()
    
    # –¢–µ—Å—Ç 2: CoarseSearch
    results['coarse_search'] = test_coarse_search_memory()
    
    # –¢–µ—Å—Ç 3: MemoryProfiler
    results['memory_profiler'] = test_memory_profiler()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    end_time = time.time()
    duration = end_time - start_time
    
    logger.info("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
    logger.info(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.2f} —Å–µ–∫—É–Ω–¥")
    logger.info(f"   MemoryOptimizer: {'‚úÖ' if results['memory_optimizer'] else '‚ùå'}")
    logger.info(f"   CoarseSearch: {'‚úÖ' if results['coarse_search'] else '‚ùå'}")
    logger.info(f"   MemoryProfiler: {'‚úÖ' if results['memory_profiler'] else '‚ùå'}")
    
    success_rate = sum(results.values()) / len(results) * 100
    logger.info(f"   –û–±—â–∏–π —É—Å–ø–µ—Ö: {success_rate:.1f}%")
    
    if success_rate >= 80:
        logger.info("üéâ –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –ü–†–û–ô–î–ï–ù!")
        return True
    else:
        logger.error("‚ùå –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –ü–†–û–í–ê–õ–ï–ù!")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ S-13")
    logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    
    try:
        success = test_full_memory_optimization()
        
        if success:
            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ S-10 FULL RUN")
            return 0
        else:
            logger.error("‚ùå –¢–µ—Å—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!")
            logger.error("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
