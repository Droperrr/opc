#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã HistoricalAnalyzer
"""

import pandas as pd
from historical_analyzer import HistoricalAnalyzer

def test_historical_analyzer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É HistoricalAnalyzer"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HistoricalAnalyzer")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    analyzer = HistoricalAnalyzer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    history_df = analyzer.load_historical_data()
    
    if history_df.empty:
        print("‚ö†Ô∏è –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(history_df)} –∑–∞–ø–∏—Å–µ–π")
    print("üìã –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π:")
    print(history_df.head())
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    if not history_df.empty:
        test_signal = {
            'iv_spike': history_df.iloc[0]['iv_mean_all'] - history_df.iloc[0]['iv_mean_all'],  # 0 –¥–ª—è –ø–µ—Ä–≤–æ–π –∑–∞–ø–∏—Å–∏
            'skew': history_df.iloc[0]['skew'],
            'trend_confidence': history_df.iloc[0]['confidence'] if 'confidence' in history_df.columns else 0.5,
            'direction': 'BUY'  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        }
        
        print(f"\nüîç –¢–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: {test_signal}")
        
        # –ò—â–µ–º –∞–Ω–∞–ª–æ–≥–∏
        print("üîç –ü–æ–∏—Å–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∞–Ω–∞–ª–æ–≥–æ–≤...")
        result = analyzer.find_analogies(test_signal)
        
        print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤:")
        print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {result['total_found']}")
        print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {result.get('profitable_count', 'N/A')}")
        print(f"   Win rate: {result.get('win_rate', 'N/A'):.2%}")
        print(f"   –°–≤–æ–¥–∫–∞: {result.get('summary', 'N/A')}")
        print(f"   –ü—Ä–∏—á–∏–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): {result.get('reason', 'N/A')}")

if __name__ == "__main__":
    test_historical_analyzer()