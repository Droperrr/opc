#!/usr/bin/env python3
"""
Block Analyzer –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Error-Driven Adaptive Blocks
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã
"""

import numpy as np
import pandas as pd
import sqlite3
from typing import List, Dict, Tuple, Optional, Any
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from compatibility import safe_float, safe_mean, safe_std, safe_array, safe_divide, safe_sqrt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class BlockAnalysis:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞"""
    block_id: int
    block_type: str
    market_regime: str
    confidence: float
    performance_metrics: Dict[str, float]
    recommendations: List[str]
    risk_level: str

class BlockAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–ª–æ–∫–æ–≤ –∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_path = db_path
        self.market_regime_thresholds = {
            'trending': {'mean_error': (0.0, 0.8), 'std_error': (0.0, 0.4), 'trend': (-0.1, 0.1)},
            'volatile': {'mean_error': (1.0, 3.0), 'std_error': (0.5, 2.0), 'trend': (-0.2, 0.2)},
            'stable': {'mean_error': (0.0, 0.5), 'std_error': (0.0, 0.3), 'trend': (-0.05, 0.05)},
            'transition': {'mean_error': (0.5, 1.5), 'std_error': (0.3, 0.8), 'trend': (-0.15, 0.15)}
        }
        logger.info(f"üìä BlockAnalyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î: {db_path}")
    
    def get_block_statistics(self, block_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
        
        Args:
            block_id: ID –±–ª–æ–∫–∞
            
        Returns:
            Dict[str, Any]: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∞
        """
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
                cursor.execute('''
                    SELECT * FROM blocks WHERE id = ?
                ''', (block_id,))
                
                block_data = cursor.fetchone()
                
                if not block_data:
                    logger.warning(f"–ë–ª–æ–∫ {block_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return {}
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞
                cursor.execute('''
                    SELECT * FROM error_history 
                    WHERE timestamp >= ? AND timestamp <= ?
                    ORDER BY timestamp
                ''', (block_data[1], block_data[2]))  # start_time, end_time
                
                errors_data = cursor.fetchall()
                
                if not errors_data:
                    logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –±–ª–æ–∫–∞ {block_id}")
                    return {}
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                errors_df = pd.DataFrame(errors_data, columns=[
                    'id', 'timestamp', 'formula_id', 'prediction', 'actual',
                    'error_absolute', 'error_relative', 'error_normalized',
                    'volatility', 'confidence', 'method', 'created_at'
                ])
                
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                additional_metrics = self._calculate_additional_metrics(errors_df)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                statistics = {
                    'block_id': block_id,
                    'start_time': block_data[1],
                    'end_time': block_data[2],
                    'block_type': block_data[5],
                    'confidence': block_data[6],
                    'mean_error': block_data[7],
                    'std_error': block_data[8],
                    'max_error': block_data[9],
                    'min_error': block_data[10],
                    'error_trend': block_data[11],
                    'volatility': block_data[12],
                    'prediction_count': block_data[13],
                    'additional_metrics': additional_metrics
                }
                
                logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–∫–∞ {block_id} –ø–æ–ª—É—á–µ–Ω–∞")
                return statistics
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∞ {block_id}: {e}")
            return {}
    
    def _calculate_additional_metrics(self, errors_df: pd.DataFrame) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –±–ª–æ–∫–∞"""
        try:
            errors = safe_array(errors_df['error_absolute'])
            relative_errors = safe_array(errors_df['error_relative'])
            normalized_errors = safe_array(errors_df['error_normalized'])
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            mae = safe_mean(errors)
            rmse = safe_sqrt(safe_mean(errors ** 2))
            mape = safe_mean(relative_errors) * 100
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            error_stability = 1.0 - safe_divide(safe_std(errors), mae) if mae > 0 else 0.0
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–Ω–¥–∞
            if len(errors) > 1:
                error_trend = self._calculate_error_trend(errors)
                trend_stability = 1.0 - abs(error_trend)
            else:
                error_trend = 0.0
                trend_stability = 1.0
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_mean = safe_mean(safe_array(errors_df['volatility']))
            volatility_consistency = 1.0 - safe_divide(safe_std(safe_array(errors_df['volatility'])), volatility_mean) if volatility_mean > 0 else 0.0
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_mean = safe_mean(safe_array(errors_df['confidence']))
            confidence_consistency = 1.0 - safe_divide(safe_std(safe_array(errors_df['confidence'])), confidence_mean) if confidence_mean > 0 else 0.0
            
            return {
                'mae': mae,
                'rmse': rmse,
                'mape': mape,
                'error_stability': error_stability,
                'error_trend': error_trend,
                'trend_stability': trend_stability,
                'volatility_mean': volatility_mean,
                'volatility_consistency': volatility_consistency,
                'confidence_mean': confidence_mean,
                'confidence_consistency': confidence_consistency
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def _calculate_error_trend(self, errors: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –æ—à–∏–±–æ–∫"""
        try:
            if len(errors) < 2:
                return 0.0
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
            x = np.arange(len(errors))
            y = safe_array(errors)
            
            n = len(x)
            sum_x = np.sum(x)
            sum_y = np.sum(y)
            sum_xy = np.sum(x * y)
            sum_x2 = np.sum(x * x)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞
            denominator = n * sum_x2 - sum_x * sum_x
            if denominator == 0:
                return 0.0
            
            slope = (n * sum_xy - sum_x * sum_y) / denominator
            return float(slope)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞ –æ—à–∏–±–æ–∫: {e}")
            return 0.0
    
    def classify_market_regime(self, block_id: int) -> str:
        """
        –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è –±–ª–æ–∫–∞
        
        Args:
            block_id: ID –±–ª–æ–∫–∞
            
        Returns:
            str: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        """
        try:
            statistics = self.get_block_statistics(block_id)
            
            if not statistics:
                return 'unknown'
            
            mean_error = statistics['mean_error']
            std_error = statistics['std_error']
            error_trend = statistics['error_trend']
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ä–æ–≥–æ–≤
            best_match = 'unknown'
            best_score = 0.0
            
            for regime, thresholds in self.market_regime_thresholds.items():
                score = self._calculate_regime_score(
                    mean_error, std_error, error_trend, thresholds
                )
                
                if score > best_score:
                    best_score = score
                    best_match = regime
            
            logger.info(f"‚úÖ –ë–ª–æ–∫ {block_id} –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ '{best_match}' (score: {best_score:.3f})")
            return best_match
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–ª–æ–∫–∞ {block_id}: {e}")
            return 'unknown'
    
    def _calculate_regime_score(self, mean_error: float, std_error: float, 
                               error_trend: float, thresholds: Dict[str, Tuple[float, float]]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ä–µ–∂–∏–º—É"""
        try:
            score = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ä–µ–¥–Ω–µ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –æ—à–∏–±–∫–∏
            mean_range = thresholds['mean_error']
            if mean_range[0] <= mean_error <= mean_range[1]:
                score += 1.0
            else:
                # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                distance = min(abs(mean_error - mean_range[0]), abs(mean_error - mean_range[1]))
                score += max(0.0, 1.0 - distance / mean_range[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
            std_range = thresholds['std_error']
            if std_range[0] <= std_error <= std_range[1]:
                score += 1.0
            else:
                distance = min(abs(std_error - std_range[0]), abs(std_error - std_range[1]))
                score += max(0.0, 1.0 - distance / std_range[1])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–Ω–¥—É
            trend_range = thresholds['trend']
            if trend_range[0] <= error_trend <= trend_range[1]:
                score += 1.0
            else:
                distance = min(abs(error_trend - trend_range[0]), abs(error_trend - trend_range[1]))
                score += max(0.0, 1.0 - distance / max(abs(trend_range[0]), abs(trend_range[1])))
            
            return score / 3.0  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∂–∏–º–∞: {e}")
            return 0.0
    
    def analyze_block(self, block_id: int) -> BlockAnalysis:
        """
        –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞
        
        Args:
            block_id: ID –±–ª–æ–∫–∞
            
        Returns:
            BlockAnalysis: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        """
        try:
            statistics = self.get_block_statistics(block_id)
            
            if not statistics:
                return BlockAnalysis(
                    block_id=block_id,
                    block_type='unknown',
                    market_regime='unknown',
                    confidence=0.0,
                    performance_metrics={},
                    recommendations=[],
                    risk_level='unknown'
                )
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            market_regime = self.classify_market_regime(block_id)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_metrics = self._calculate_performance_metrics(statistics)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(statistics, market_regime)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
            risk_level = self._assess_risk_level(statistics, market_regime)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = self._calculate_analysis_confidence(statistics, market_regime)
            
            analysis = BlockAnalysis(
                block_id=block_id,
                block_type=statistics['block_type'],
                market_regime=market_regime,
                confidence=confidence,
                performance_metrics=performance_metrics,
                recommendations=recommendations,
                risk_level=risk_level
            )
            
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞ {block_id} –∑–∞–≤–µ—Ä—à–µ–Ω")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ {block_id}: {e}")
            return BlockAnalysis(
                block_id=block_id,
                block_type='unknown',
                market_regime='unknown',
                confidence=0.0,
                performance_metrics={},
                recommendations=['–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞'],
                risk_level='unknown'
            )
    
    def _calculate_performance_metrics(self, statistics: Dict[str, Any]) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞"""
        try:
            additional_metrics = statistics.get('additional_metrics', {})
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics = {
                'accuracy': max(0.0, 1.0 - statistics['mean_error'] / 2.0),  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
                'stability': additional_metrics.get('error_stability', 0.0),
                'consistency': additional_metrics.get('confidence_consistency', 0.0),
                'volatility_score': 1.0 - min(statistics['volatility'] / 0.1, 1.0),  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                'trend_score': additional_metrics.get('trend_stability', 0.0)
            }
            
            # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            metrics['overall_score'] = safe_mean(list(metrics.values()))
            
            return metrics
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return {}
    
    def _generate_recommendations(self, statistics: Dict[str, Any], market_regime: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞"""
        try:
            recommendations = []
            
            mean_error = statistics['mean_error']
            std_error = statistics['std_error']
            volatility = statistics['volatility']
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫
            if mean_error > 1.5:
                recommendations.append("–í—ã—Å–æ–∫–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–æ—Ä–º—É–ª—ã")
            elif mean_error < 0.3:
                recommendations.append("–ù–∏–∑–∫–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ - —Ñ–æ—Ä–º—É–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if std_error > 1.0:
                recommendations.append("–í—ã—Å–æ–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
            elif std_error < 0.2:
                recommendations.append("–í—ã—Å–æ–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            if market_regime == 'volatile':
                recommendations.append("–í–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            elif market_regime == 'stable':
                recommendations.append("–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∂–∏–º - –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            elif market_regime == 'trending':
                recommendations.append("–¢—Ä–µ–Ω–¥–æ–≤—ã–π —Ä–µ–∂–∏–º - —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö")
            elif market_regime == 'transition':
                recommendations.append("–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º - –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if volatility > 0.05:
                recommendations.append("–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ - —É–º–µ–Ω—å—à–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π")
            elif volatility < 0.01:
                recommendations.append("–ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞ - –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π")
            
            return recommendations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]
    
    def _assess_risk_level(self, statistics: Dict[str, Any], market_regime: str) -> str:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –±–ª–æ–∫–∞"""
        try:
            mean_error = statistics['mean_error']
            std_error = statistics['std_error']
            volatility = statistics['volatility']
            
            risk_score = 0.0
            
            # –§–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞
            if mean_error > 1.0:
                risk_score += 0.3
            if std_error > 0.8:
                risk_score += 0.3
            if volatility > 0.05:
                risk_score += 0.2
            if market_regime in ['volatile', 'transition']:
                risk_score += 0.2
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–∞
            if risk_score < 0.3:
                return 'low'
            elif risk_score < 0.6:
                return 'medium'
            else:
                return 'high'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞: {e}")
            return 'unknown'
    
    def _calculate_analysis_confidence(self, statistics: Dict[str, Any], market_regime: str) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ"""
        try:
            # –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫ –±–ª–æ–∫–∞
            base_confidence = statistics.get('confidence', 0.5)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            prediction_count = statistics.get('prediction_count', 0)
            count_confidence = min(prediction_count / 100.0, 1.0)  # –ë–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö = –±–æ–ª—å—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
            regime_confidence = self._calculate_regime_score(
                statistics['mean_error'],
                statistics['std_error'],
                statistics['error_trend'],
                self.market_regime_thresholds.get(market_regime, {'mean_error': (0, 1), 'std_error': (0, 1), 'trend': (-1, 1)})
            )
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            total_confidence = (base_confidence + count_confidence + regime_confidence) / 3.0
            
            return min(max(total_confidence, 0.0), 1.0)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return 0.5
    
    def get_blocks(self, start_time: Optional[datetime] = None,
                   end_time: Optional[datetime] = None,
                   block_type: Optional[str] = None) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–ª–æ–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import sqlite3
            
            with sqlite3.connect(self.db_path) as conn:
                query = "SELECT * FROM blocks WHERE 1=1"
                params = []
                
                if start_time:
                    query += " AND start_time >= ?"
                    params.append(start_time)
                
                if end_time:
                    query += " AND end_time <= ?"
                    params.append(end_time)
                
                if block_type:
                    query += " AND block_type = ?"
                    params.append(block_type)
                
                query += " ORDER BY start_time"
                
                df = pd.read_sql_query(query, conn, params=params)
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –±–ª–æ–∫–æ–≤ –∏–∑ –ë–î")
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
            return pd.DataFrame()
    
    def get_blocks_summary(self, days: int = 30) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±–ª–æ–∫–∞–º –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict[str, Any]: –°–≤–æ–¥–∫–∞ –ø–æ –±–ª–æ–∫–∞–º
        """
        try:
            end_time = datetime.now()
            start_time = end_time - timedelta(days=days)
            
            with sqlite3.connect(self.db_path) as conn:
                # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM blocks 
                    WHERE start_time >= ? AND end_time <= ?
                    ORDER BY start_time
                ''', (start_time, end_time))
                
                blocks_data = cursor.fetchall()
                
                if not blocks_data:
                    return {'message': '–ù–µ—Ç –±–ª–æ–∫–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥'}
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–ª–æ–∫–∏
                blocks_df = pd.DataFrame(blocks_data, columns=[
                    'id', 'start_time', 'end_time', 'start_index', 'end_index',
                    'block_type', 'confidence', 'mean_error', 'std_error',
                    'max_error', 'min_error', 'error_trend', 'volatility', 'prediction_count', 'created_at'
                ])
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –±–ª–æ–∫–æ–≤
                type_counts = blocks_df['block_type'].value_counts().to_dict()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∂–∏–º–∞–º (–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫)
                regime_counts = {}
                for _, block in blocks_df.iterrows():
                    regime = self.classify_market_regime(block['id'])
                    regime_counts[regime] = regime_counts.get(regime, 0) + 1
                
                # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
                summary = {
                    'period_days': days,
                    'total_blocks': len(blocks_df),
                    'block_types': type_counts,
                    'market_regimes': regime_counts,
                    'average_confidence': safe_mean(safe_array(blocks_df['confidence'])),
                    'average_error': safe_mean(safe_array(blocks_df['mean_error'])),
                    'total_predictions': int(np.sum(blocks_df['prediction_count'])),
                    'most_common_type': blocks_df['block_type'].mode().iloc[0] if len(blocks_df) > 0 else 'unknown',
                    'most_common_regime': max(regime_counts.items(), key=lambda x: x[1])[0] if regime_counts else 'unknown'
                }
                
                logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ –ø–æ –±–ª–æ–∫–∞–º —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {days} –¥–Ω–µ–π")
                return summary
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –ø–æ –±–ª–æ–∫–∞–º: {e}")
            return {'error': str(e)}

def test_block_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Analyzer"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Analyzer")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    import uuid
    test_db = f'test_block_analyzer_{uuid.uuid4().hex[:8]}.db'
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        analyzer = BlockAnalyzer(test_db)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏ –≤ –ë–î
        with sqlite3.connect(test_db) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –±–ª–æ–∫–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS blocks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    start_time DATETIME NOT NULL,
                    end_time DATETIME NOT NULL,
                    start_index INTEGER NOT NULL,
                    end_index INTEGER NOT NULL,
                    block_type TEXT NOT NULL,
                    confidence REAL NOT NULL,
                    mean_error REAL NOT NULL,
                    std_error REAL NOT NULL,
                    max_error REAL NOT NULL,
                    min_error REAL NOT NULL,
                    error_trend REAL NOT NULL,
                    volatility REAL NOT NULL,
                    prediction_count INTEGER NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—à–∏–±–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS error_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME NOT NULL,
                    formula_id TEXT,
                    prediction REAL NOT NULL,
                    actual REAL NOT NULL,
                    error_absolute REAL NOT NULL,
                    error_relative REAL NOT NULL,
                    error_normalized REAL NOT NULL,
                    volatility REAL,
                    confidence REAL,
                    method TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
            cursor.execute('''
                INSERT INTO blocks 
                (start_time, end_time, start_index, end_index, block_type, confidence,
                 mean_error, std_error, max_error, min_error, error_trend, 
                 volatility, prediction_count)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                datetime.now() - timedelta(hours=2),
                datetime.now() - timedelta(hours=1),
                0, 100, 'low_error_stable', 0.8,
                0.3, 0.1, 0.5, 0.1, 0.02, 0.01, 100
            ))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏
            for i in range(50):
                timestamp = datetime.now() - timedelta(hours=2, minutes=i)
                cursor.execute('''
                    INSERT INTO error_history 
                    (timestamp, formula_id, prediction, actual, error_absolute, 
                     error_relative, error_normalized, volatility, confidence, method)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    timestamp, 'F01', 100.0 + i*0.01, 100.1 + i*0.01, 0.1 + i*0.001,
                    0.001, 0.1, 0.01, 0.8, 'sma'
                ))
            
            conn.commit()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞
        analysis = analyzer.analyze_block(1)
        
        if analysis.block_id == 1 and analysis.market_regime != 'unknown':
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω: —Ä–µ–∂–∏–º = {analysis.market_regime}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary = analyzer.get_blocks_summary(1)
            
            if 'total_blocks' in summary:
                logger.info(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {summary['total_blocks']} –±–ª–æ–∫–æ–≤")
                return True
            else:
                logger.error("‚ùå –°–≤–æ–¥–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
                return False
        else:
            logger.error("‚ùå –ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Block Analyzer: {e}")
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import os
        try:
            if os.path.exists(test_db):
                os.remove(test_db)
        except PermissionError:
            pass

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Analyzer...")
    
    success = test_block_analyzer()
    
    if success:
        print("‚úÖ Block Analyzer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ Block Analyzer")
