#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞
–ó–∞–¥–∞—á–∞ S-10: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø–æ–¥–º–Ω–æ–∂–µ—Å—Ç–≤–µ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append('.')

from search.coarse_search import CoarseSearch
from engine.formulas import formula_catalog
import pandas as pd
import numpy as np

def test_formula_catalog():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Ñ–æ—Ä–º—É–ª"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ñ–æ—Ä–º—É–ª...")
    
    formulas = formula_catalog.get_all_formulas()
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(formulas)} —Ñ–æ—Ä–º—É–ª")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ä–º—É–ª—ã
    for i, (formula_id, formula) in enumerate(list(formulas.items())[:3]):
        print(f"  {formula_id}: {formula['name']}")
        print(f"    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(formula['params'].keys())}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_list = formula_catalog.generate_random_params(formula_id, n_samples=5)
        print(f"    –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(params_list)} –Ω–∞–±–æ—Ä–æ–≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print()

def test_data_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    searcher = CoarseSearch()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
    start_date = "2025-08-01"
    end_date = "2025-08-07"
    
    df = searcher.load_historical_data(start_date, end_date)
    
    if not df.empty:
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –ü–µ—Ä–∏–æ–¥: {df['time'].min()} - {df['time'].max()}")
        print(f"   –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        print(f"   –†–∞–∑–º–µ—Ä: {df.shape}")
        print()
        return df
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return None

def test_formula_calculation(df):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª"""
    print("üßÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª...")
    
    searcher = CoarseSearch()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ä–º—É–ª—ã
    formulas = list(formula_catalog.get_all_formulas().items())[:3]
    
    for formula_id, formula in formulas:
        print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º {formula_id}: {formula['name']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_list = formula_catalog.generate_random_params(formula_id, n_samples=1)
        params = params_list[0]
        
        print(f"    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {params}")
        
        # –í—ã—á–∏—Å–ª—è–µ–º Y
        Y = searcher.calculate_formula_value(df, formula_id, params)
        
        print(f"    Y: min={Y.min():.3f}, max={Y.max():.3f}, mean={Y.mean():.3f}, std={Y.std():.3f}")
        print()

def test_backtest(df):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç backtest"""
    print("üìà –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backtest...")
    
    searcher = CoarseSearch()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–Ω—É —Ñ–æ—Ä–º—É–ª—É
    formula_id = "F01"
    params = {'a': 1.5, 'b': 0.5, 'c': 1.0, 'd': 1.0}
    
    print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º {formula_id} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backtest
    metrics = searcher.run_backtest(df, formula_id, params)
    
    print(f"    Sharpe Ratio: {metrics['sharpe_ratio']:.3f}")
    print(f"    Profit Factor: {metrics['profit_factor']:.3f}")
    print(f"    Win Rate: {metrics['win_rate']:.3f}")
    print(f"    Max Drawdown: {metrics['max_drawdown']:.3f}")
    print(f"    Total Return: {metrics['total_return']:.3f}")
    print()

def test_coarse_search_limited(df):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    
    searcher = CoarseSearch()
    
    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    searcher.config['search']['coarse_search']['n_samples_per_formula'] = 10
    searcher.config['search']['coarse_search']['n_top_candidates'] = 3
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 —Ñ–æ—Ä–º—É–ª—ã
    formulas = list(formula_catalog.get_all_formulas().items())[:3]
    
    all_results = []
    
    for formula_id, formula in formulas:
        print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º {formula_id}: {formula['name']}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        params_list = formula_catalog.generate_random_params(formula_id, n_samples=10)
        
        formula_results = []
        
        for params in params_list:
            # –ó–∞–ø—É—Å–∫–∞–µ–º backtest
            metrics = searcher.run_backtest(df, formula_id, params)
            
            result = {
                'formula_id': formula_id,
                'formula_name': formula['name'],
                'params': params,
                'metrics': metrics,
                'score': metrics['sharpe_ratio']
            }
            
            formula_results.append(result)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3
        formula_results.sort(key=lambda x: x['score'], reverse=True)
        top_results = formula_results[:3]
        all_results.extend(top_results)
        
        print(f"    –ù–∞–π–¥–µ–Ω–æ {len(top_results)} —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        print(f"    –õ—É—á—à–∏–π Sharpe: {top_results[0]['metrics']['sharpe_ratio']:.3f}")
        print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Ç–æ–ø-3
    all_results.sort(key=lambda x: x['score'], reverse=True)
    
    print("üèÜ –û–ë–©–ò–ô –¢–û–ü-3:")
    for i, result in enumerate(all_results[:3]):
        print(f"{i+1}. {result['formula_id']} - {result['formula_name']}")
        print(f"   Sharpe: {result['metrics']['sharpe_ratio']:.3f}")
        print(f"   Profit Factor: {result['metrics']['profit_factor']:.3f}")
        print(f"   Win Rate: {result['metrics']['win_rate']:.3f}")
        print()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ì–†–£–ë–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ö–∞—Ç–∞–ª–æ–≥ —Ñ–æ—Ä–º—É–ª
    test_formula_catalog()
    
    # –¢–µ—Å—Ç 2: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = test_data_loading()
    if df is None:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –¢–µ—Å—Ç 3: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª
    test_formula_calculation(df)
    
    # –¢–µ—Å—Ç 4: Backtest
    test_backtest(df)
    
    # –¢–µ—Å—Ç 5: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫
    test_coarse_search_limited(df)
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
