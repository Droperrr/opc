#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
–°–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ 7 –¥–Ω–µ–π —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –∏ —Ä—ã–Ω–æ—á–Ω—ã–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random
from logger import get_logger

logger = get_logger()

def generate_extended_iv_data():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ IV –∑–∞ 7 –¥–Ω–µ–π"""
    logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö IV...")
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    start_date = datetime(2025, 8, 25, 0, 0, 0)  # 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    end_date = datetime(2025, 9, 3, 23, 59, 59)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
    timestamps = []
    current = start_date
    while current <= end_date:
        timestamps.append(current)
        current += timedelta(hours=1)
    
    data = []
    base_price = 210.0
    
    for timestamp in timestamps:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        hour = timestamp.hour
        day_of_week = timestamp.weekday()
        
        # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        price_change = np.random.normal(0, 2)  # –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        current_price = base_price + price_change
        
        # IV –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        base_iv = 0.8
        if hour in [8, 9, 14, 15, 16]:  # –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
            base_iv += 0.2
        if day_of_week in [0, 4]:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü–∞
            base_iv += 0.1
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        iv = base_iv + np.random.normal(0, 0.1)
        iv = max(0.5, min(1.5, iv))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º IV
        
        # Skew –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        skew = np.random.normal(0, 0.05)
        if current_price > base_price:
            skew = abs(skew)  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π skew –ø—Ä–∏ —Ä–æ—Å—Ç–µ
        else:
            skew = -abs(skew)  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π skew –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏
        
        # OI ratio
        oi_ratio = 0.5 + np.random.normal(0, 0.1)
        oi_ratio = max(0.3, min(0.7, oi_ratio))
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        for timeframe in ['1m', '15m', '1h']:
            if timeframe == '1m':
                # –î–ª—è 1m —Å–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
                iv_1m = iv + np.random.normal(0, 0.15)
                skew_1m = skew + np.random.normal(0, 0.02)
                samples = random.randint(3, 8)
            elif timeframe == '15m':
                iv_1m = iv + np.random.normal(0, 0.1)
                skew_1m = skew + np.random.normal(0, 0.015)
                samples = random.randint(15, 25)
            else:  # 1h
                iv_1m = iv + np.random.normal(0, 0.05)
                skew_1m = skew + np.random.normal(0, 0.01)
                samples = random.randint(25, 35)
            
            data.append({
                'timestamp': timestamp,
                'underlying_price': current_price,
                'samples': samples,
                'skew': skew_1m,
                'iv_mean_all': iv_1m,
                'timeframe': timeframe,
                'iv_call_mean': iv_1m + skew_1m/2,
                'iv_put_mean': iv_1m - skew_1m/2,
                'oi_call_total': 1000000 * oi_ratio,
                'oi_put_total': 1000000 * (1 - oi_ratio),
                'oi_ratio': oi_ratio,
                'skew_percentile': 0.5 + skew_1m * 10  # –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π skew
            })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        base_price = current_price
    
    df = pd.DataFrame(data)
    df.to_csv('iv_aggregates_extended.csv', index=False)
    logger.info(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π IV –¥–∞–Ω–Ω—ã—Ö")
    return df

def generate_extended_trend_signals():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
    
    # –ß–∏—Ç–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ IV
    df = pd.read_csv('iv_aggregates_extended.csv', parse_dates=['timestamp'])
    
    signals = []
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 15m –∏ 1h
    for timeframe in ['15m', '1h']:
        timeframe_data = df[df['timeframe'] == timeframe].copy()
        timeframe_data = timeframe_data.sort_values('timestamp')
        
        for i in range(1, len(timeframe_data)):
            current = timeframe_data.iloc[i]
            previous = timeframe_data.iloc[i-1]
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–µ–Ω–¥–∞
            direction = None
            confidence = 0.0
            reason = ""
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            iv_change = current['iv_mean_all'] - previous['iv_mean_all']
            skew_change = current['skew'] - previous['skew']
            oi_ratio = current['oi_ratio']
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if iv_change > 0.02 and skew_change > 0.01 and oi_ratio > 0.52:
                direction = 'BUY'
                confidence = min(0.9, 0.5 + abs(iv_change) + abs(skew_change))
                reason = f"IV‚Üë{iv_change:.3f} + Skew‚Üë{skew_change:.3f} + OI call-heavy"
            elif iv_change > 0.02 and skew_change < -0.01 and oi_ratio < 0.48:
                direction = 'SELL'
                confidence = min(0.9, 0.5 + abs(iv_change) + abs(skew_change))
                reason = f"IV‚Üë{iv_change:.3f} + Skew‚Üì{skew_change:.3f} + OI put-heavy"
            elif abs(iv_change) < 0.01 and abs(skew_change) > 0.02:
                if skew_change > 0:
                    direction = 'BUY'
                    confidence = 0.6
                    reason = f"Strong skew‚Üë{skew_change:.3f}"
                else:
                    direction = 'SELL'
                    confidence = 0.6
                    reason = f"Strong skew‚Üì{skew_change:.3f}"
            
            if direction and confidence > 0.3:
                signals.append({
                    'timestamp': current['timestamp'],
                    'timeframe': timeframe,
                    'direction': direction,
                    'confidence': round(confidence, 3),
                    'reason': reason,
                    'iv_call_mean': current['iv_call_mean'],
                    'iv_put_mean': current['iv_put_mean'],
                    'skew': current['skew'],
                    'oi_ratio': current['oi_ratio'],
                    'iv_momentum': iv_change
                })
    
    df_signals = pd.DataFrame(signals)
    df_signals.to_csv('trend_signals_extended.csv', index=False)
    logger.info(f"üìà –°–æ–∑–¥–∞–Ω–æ {len(signals)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    return df_signals

def generate_extended_entry_points():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞"""
    logger.info("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞...")
    
    # –ß–∏—Ç–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ IV
    df = pd.read_csv('iv_aggregates_extended.csv', parse_dates=['timestamp'])
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ 1m –¥–∞–Ω–Ω—ã–µ
    df_1m = df[df['timeframe'] == '1m'].copy()
    df_1m = df_1m.sort_values('timestamp')
    
    entries = []
    
    for i in range(5, len(df_1m)):
        current = df_1m.iloc[i]
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ IV –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
        recent_iv = df_1m.iloc[i-5:i]['iv_mean_all'].mean()
        iv_spike = (current['iv_mean_all'] - recent_iv) / recent_iv
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ IV spikes
        if abs(iv_spike) > 0.03:  # 3% spike
            direction = 'BUY' if iv_spike > 0 else 'SELL'
            confidence = min(0.9, 0.4 + abs(iv_spike) * 5)
            
            entries.append({
                'timestamp': current['timestamp'],
                'direction': direction,
                'timeframe': '1m',
                'confidence': round(confidence, 3),
                'reason': f"IV spike {iv_spike*100:.1f}%",
                'underlying_price': current['underlying_price']
            })
    
    df_entries = pd.DataFrame(entries)
    df_entries.to_csv('entry_points_extended.csv', index=False)
    logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–æ {len(entries)} —Ç–æ—á–µ–∫ –≤—Ö–æ–¥–∞")
    return df_entries

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        generate_extended_iv_data()
        generate_extended_trend_signals()
        generate_extended_entry_points()
        
        logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìÅ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        logger.info("   - iv_aggregates_extended.csv")
        logger.info("   - trend_signals_extended.csv")
        logger.info("   - entry_points_extended.csv")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    main()
