#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è MVP-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–∏—Å–∞
"""

import pandas as pd
import numpy as np
from typing import Dict, Tuple
from logger import get_logger

logger = get_logger()

def calculate_thresholds(data: pd.DataFrame, z_score_threshold: float = 2.0) -> Dict[str, float]:
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä–æ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ z-score.
    
    Args:
        data: DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        z_score_threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ z-score
        
    Returns:
        Dict —Å –ø–æ—Ä–æ–≥–∞–º–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['combined_z_score']
        for col in required_columns:
            if col not in data.columns:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col} –≤ –¥–∞–Ω–Ω—ã—Ö")
                return {}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–µ–º —Å—Ä–µ–∑–µ
        mean_combined_z = data['combined_z_score'].mean()
        std_combined_z = data['combined_z_score'].std()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏
        upper_threshold = mean_combined_z + z_score_threshold * std_combined_z
        lower_threshold = mean_combined_z - z_score_threshold * std_combined_z
        
        thresholds = {
            'upper_threshold': upper_threshold,
            'lower_threshold': lower_threshold,
            'mean_combined_z': mean_combined_z,
            'std_combined_z': std_combined_z
        }
        
        logger.info(f"üìä –ü–æ—Ä–æ–≥–∏ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã: –Ω–∏–∂–Ω–∏–π = {lower_threshold:.4f}, –≤–µ—Ä—Ö–Ω–∏–π = {upper_threshold:.4f}")
        
        return thresholds
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–æ—Ä–æ–≥–æ–≤: {e}")
        return {}

def generate_signals_from_data(data: pd.DataFrame, thresholds: Dict[str, float], z_score_threshold: float = 2.0, sma_period: int = 20) -> pd.DataFrame:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Ä–æ–≥–æ–≤ —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –∏ SMA(20) —Ñ–∏–ª—å—Ç—Ä–æ–º.
    
    Args:
        data: DataFrame —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        thresholds: –ü–æ—Ä–æ–≥–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        z_score_threshold: –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ z-score
        
    Returns:
        DataFrame —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        required_columns = ['time', 'spot_price', 'combined_z_score']
        for col in required_columns:
            if col not in data.columns:
                logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ {col} –≤ –¥–∞–Ω–Ω—ã—Ö")
                return pd.DataFrame()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã
        df = data.copy()
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º SMA —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
        sma_column = f'SMA_{sma_period}'
        df[sma_column] = df['spot_price'].rolling(window=sma_period).mean()
        # –ó–∞–ø–æ–ª–Ω—è–µ–º NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
        df[sma_column] = df[sma_column].fillna(df['spot_price'])
        logger.info(f"üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ {sma_column} –¥–ª—è —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        df['signal'] = 'HOLD'
        df['confidence'] = 0.0
        df['reason'] = ''
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–≥–∏
        upper_threshold = thresholds.get('upper_threshold', z_score_threshold)
        lower_threshold = thresholds.get('lower_threshold', -z_score_threshold)
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (–∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
        # LONG —Å–∏–≥–Ω–∞–ª—ã: combined_z_score < lower_threshold (–∞–Ω–æ–º–∞–ª—å–Ω–æ –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç)
        long_signals = (df['combined_z_score'] < lower_threshold)
        df.loc[long_signals, 'signal'] = 'LONG'
        df.loc[long_signals, 'confidence'] = abs(df.loc[long_signals, 'combined_z_score'])
        df.loc[long_signals, 'reason'] = 'z_score_long'
        
        # SHORT —Å–∏–≥–Ω–∞–ª—ã: combined_z_score > upper_threshold (–∞–Ω–æ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –æ–∂–∏–¥–∞–µ–º –ø–∞–¥–µ–Ω–∏–µ)
        short_signals = (df['combined_z_score'] > upper_threshold)
        df.loc[short_signals, 'signal'] = 'SHORT'
        df.loc[short_signals, 'confidence'] = abs(df.loc[short_signals, 'combined_z_score'])
        df.loc[short_signals, 'reason'] = 'z_score_short'
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∂–µ—Å—Ç–∫–∏–π —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è LONG: spot_price > SMA_period (—Ç–æ—Ä–≥—É–µ–º –ø–æ —Ç—Ä–µ–Ω–¥—É)
        # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è SHORT: spot_price < SMA_period (—Ç–æ—Ä–≥—É–µ–º –ø–æ —Ç—Ä–µ–Ω–¥—É)
        long_filter = (df['signal'] == 'LONG') & (df['spot_price'] > df[sma_column])
        short_filter = (df['signal'] == 'SHORT') & (df['spot_price'] < df[sma_column])
        df.loc[~(long_filter | short_filter), 'signal'] = 'HOLD'
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã (LONG, SHORT)
        signals_df = df[df['signal'].isin(['LONG', 'SHORT'])].copy()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        filtered_long = len(df[(df['signal'] == 'LONG') & ~long_filter])
        filtered_short = len(df[(df['signal'] == 'SHORT') & ~short_filter])
        if filtered_long > 0 or filtered_short > 0:
            logger.info(f"üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: LONG={filtered_long}, SHORT={filtered_short} (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–Ω–¥—É)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
        signals_df['timestamp'] = signals_df['time']
        signals_df['open_price'] = signals_df['spot_price']
        signals_df['close_price'] = signals_df['spot_price']  # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º spot_price –∫–∞–∫ open –∏ close
        signals_df['underlying_price'] = signals_df['spot_price']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        signals_df['hour'] = pd.to_datetime(signals_df['time']).dt.hour
        signals_df['session'] = 'regular'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è
        # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è (00:00-08:00 UTC)
        signals_df.loc[(signals_df['hour'] >= 0) & (signals_df['hour'] < 8), 'session'] = 'asian'
        # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è (08:00-16:00 UTC)
        signals_df.loc[(signals_df['hour'] >= 8) & (signals_df['hour'] < 16), 'session'] = 'european'
        # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è (16:00-00:00 UTC)
        signals_df.loc[(signals_df['hour'] >= 16) & (signals_df['hour'] < 24), 'session'] = 'american'
        
        # –¢–∞–π–º—Ñ—Ä–µ–π–º
        signals_df['timeframe'] = '1m'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        if 'historical_volatility_24h' in signals_df.columns:
            signals_df['historical_volatility'] = signals_df['historical_volatility_24h']
        else:
            signals_df['historical_volatility'] = 0.0
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        signal_columns = [
            'timestamp', 'signal', 'confidence', 'reason', 'open_price', 'close_price',
            'underlying_price', 'session', 'timeframe', 'historical_volatility'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        existing_columns = [col for col in signal_columns if col in signals_df.columns]
        signals_df = signals_df[existing_columns]
        
        logger.info(f"üìà –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals_df)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        return signals_df
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return pd.DataFrame()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
    print("–ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è MVP-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = pd.DataFrame({
        'time': pd.date_range('2023-01-01', periods=100, freq='1min'),
        'spot_price': np.random.normal(100, 1, 100),
        'combined_z_score': np.random.normal(0, 1, 100),
        'historical_volatility_24h': np.random.normal(0.01, 0.005, 100)
    })
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥–∏
    thresholds = calculate_thresholds(test_data, z_score_threshold=2.0)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
    if thresholds:
        signals = generate_signals_from_data(test_data, thresholds, z_score_threshold=2.0)
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        print(signals.head())