#!/usr/bin/env python3
"""
Block Detector –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Error-Driven Adaptive Blocks
–†–µ–∞–ª–∏–∑—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞
"""

import numpy as np
import pandas as pd
import sqlite3
from typing import List, Dict, Tuple, Optional, Any
from datetime import datetime, timedelta
import logging
from dataclasses import dataclass

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from compatibility import safe_float, safe_mean, safe_std, safe_array, safe_divide, safe_sqrt

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

@dataclass
class BlockBoundary:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∞"""
    start_time: datetime
    end_time: datetime
    start_index: int
    end_index: int
    block_type: str
    confidence: float
    error_statistics: Dict[str, float]

class BlockDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
    
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –±–ª–æ–∫–æ–≤
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_path = db_path
        self._init_database()
        logger.info(f"üîç BlockDetector –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î: {db_path}")
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–∫–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –±–ª–æ–∫–æ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS blocks (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        start_time DATETIME NOT NULL,
                        end_time DATETIME NOT NULL,
                        start_index INTEGER NOT NULL,
                        end_index INTEGER NOT NULL,
                        block_type TEXT NOT NULL,
                        confidence REAL NOT NULL,
                        mean_error REAL NOT NULL,
                        std_error REAL NOT NULL,
                        max_error REAL NOT NULL,
                        min_error REAL NOT NULL,
                        error_trend REAL NOT NULL,
                        volatility REAL NOT NULL,
                        prediction_count INTEGER NOT NULL,
                        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_blocks_time 
                    ON blocks(start_time, end_time)
                ''')
                
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_blocks_type 
                    ON blocks(block_type)
                ''')
                
                conn.commit()
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–ª–æ–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –±–ª–æ–∫–æ–≤: {e}")
            raise
    
    def detect_block_boundaries(self, error_history: pd.DataFrame, 
                               threshold: float = 2.0, window: int = 100,
                               min_block_size: int = 50) -> List[BlockBoundary]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫
        
        Args:
            error_history: DataFrame —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ—à–∏–±–æ–∫
            threshold: –ü–æ—Ä–æ–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ (–≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è—Ö)
            window: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            min_block_size: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
            
        Returns:
            List[BlockBoundary]: –°–ø–∏—Å–æ–∫ –≥—Ä–∞–Ω–∏—Ü –±–ª–æ–∫–æ–≤
        """
        try:
            logger.info(f"üîç –ù–∞—á–∞–ª–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {len(error_history)} –∑–∞–ø–∏—Å–µ–π")
            
            if len(error_history) < min_block_size:
                logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤")
                return []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            error_history = error_history.sort_values('timestamp').reset_index(drop=True)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            rolling_stats = self._calculate_rolling_statistics(error_history, window)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
            change_points = self._find_change_points(rolling_stats, threshold)
            
            # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏
            blocks = self._create_blocks(error_history, change_points, min_block_size)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –±–ª–æ–∫–∏
            classified_blocks = self._classify_blocks(blocks, error_history)
            
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(classified_blocks)} –±–ª–æ–∫–æ–≤")
            return classified_blocks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
            return []
    
    def _calculate_rolling_statistics(self, df: pd.DataFrame, window: int) -> pd.DataFrame:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
            errors = safe_array(df['error_absolute'])
            
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            rolling_mean = pd.Series(errors).rolling(window=window, min_periods=window//2).apply(
                lambda x: safe_mean(x.values), raw=False
            )
            rolling_std = pd.Series(errors).rolling(window=window, min_periods=window//2).apply(
                lambda x: safe_std(x.values), raw=False
            )
            
            # –°–∫–æ–ª—å–∑—è—â–∏–π —Ç—Ä–µ–Ω–¥ –æ—à–∏–±–æ–∫
            rolling_trend = pd.Series(errors).rolling(window=window, min_periods=window//2).apply(
                lambda x: self._calculate_trend(x.values), raw=False
            )
            
            # –°–∫–æ–ª—å–∑—è—â–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if 'volatility' in df.columns:
                volatility = safe_array(df['volatility'])
                rolling_volatility = pd.Series(volatility).rolling(window=window, min_periods=window//2).apply(
                    lambda x: safe_mean(x.values), raw=False
                )
            else:
                rolling_volatility = pd.Series([0.01] * len(df))
            
            # –°–æ–∑–¥–∞–µ–º DataFrame —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞–º–∏
            stats_df = pd.DataFrame({
                'timestamp': df['timestamp'],
                'rolling_mean': rolling_mean,
                'rolling_std': rolling_std,
                'rolling_trend': rolling_trend,
                'rolling_volatility': rolling_volatility,
                'error_absolute': errors
            })
            
            return stats_df.dropna()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫: {e}")
            return pd.DataFrame()
    
    def _calculate_trend(self, values: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –¥–ª—è –º–∞—Å—Å–∏–≤–∞ –∑–Ω–∞—á–µ–Ω–∏–π"""
        try:
            if len(values) < 2:
                return 0.0
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
            x = np.arange(len(values))
            y = safe_array(values)
            
            n = len(x)
            sum_x = np.sum(x)
            sum_y = np.sum(y)
            sum_xy = np.sum(x * y)
            sum_x2 = np.sum(x * x)
            
            # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞–∫–ª–æ–Ω–∞
            denominator = n * sum_x2 - sum_x * sum_x
            if denominator == 0:
                return 0.0
            
            slope = (n * sum_xy - sum_x * sum_y) / denominator
            return float(slope)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞: {e}")
            return 0.0
    
    def _find_change_points(self, stats_df: pd.DataFrame, threshold: float) -> List[int]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–∫–∏ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            change_points = [0]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            
            rolling_mean = stats_df['rolling_mean'].values
            rolling_std = stats_df['rolling_std'].values
            
            for i in range(1, len(rolling_mean)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
                if rolling_std[i] > 0:
                    z_score = abs(rolling_mean[i] - rolling_mean[i-1]) / rolling_std[i]
                    
                    if z_score > threshold:
                        change_points.append(i)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
            change_points.append(len(stats_df) - 1)
            
            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
            change_points = sorted(list(set(change_points)))
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(change_points)} —Ç–æ—á–µ–∫ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞")
            return change_points
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ—á–µ–∫ —Å–º–µ–Ω—ã: {e}")
            return [0, len(stats_df) - 1]
    
    def _create_blocks(self, error_history: pd.DataFrame, 
                      change_points: List[int], min_block_size: int) -> List[BlockBoundary]:
        """–°–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ—á–µ–∫ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞"""
        try:
            blocks = []
            
            for i in range(len(change_points) - 1):
                start_idx = change_points[i]
                end_idx = change_points[i + 1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞
                if end_idx - start_idx < min_block_size:
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
                block_data = error_history.iloc[start_idx:end_idx]
                
                if len(block_data) == 0:
                    continue
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–∫–∞
                errors = safe_array(block_data['error_absolute'])
                
                block_stats = {
                    'mean_error': safe_mean(errors),
                    'std_error': safe_std(errors),
                    'max_error': float(np.max(errors)) if len(errors) > 0 else 0.0,
                    'min_error': float(np.min(errors)) if len(errors) > 0 else 0.0,
                    'error_trend': self._calculate_trend(errors),
                    'volatility': safe_mean(safe_array(block_data['volatility'])) if 'volatility' in block_data.columns else 0.01,
                    'prediction_count': len(errors)
                }
                
                # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫
                block = BlockBoundary(
                    start_time=block_data['timestamp'].iloc[0],
                    end_time=block_data['timestamp'].iloc[-1],
                    start_index=start_idx,
                    end_index=end_idx,
                    block_type='unknown',  # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                    confidence=0.0,  # –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –ø–æ–∑–∂–µ
                    error_statistics=block_stats
                )
                
                blocks.append(block)
            
            logger.info(f"üîç –°–æ–∑–¥–∞–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤")
            return blocks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
            return []
    
    def _classify_blocks(self, blocks: List[BlockBoundary], 
                        error_history: pd.DataFrame) -> List[BlockBoundary]:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –±–ª–æ–∫–∏ –ø–æ —Ç–∏–ø—É —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            classified_blocks = []
            
            for block in blocks:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–ª–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
                block_type = self._determine_block_type(block.error_statistics)
                
                # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                confidence = self._calculate_classification_confidence(block.error_statistics)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–∫
                block.block_type = block_type
                block.confidence = confidence
                
                classified_blocks.append(block)
            
            logger.info(f"üîç –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ {len(classified_blocks)} –±–ª–æ–∫–æ–≤")
            return classified_blocks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤: {e}")
            return blocks
    
    def _determine_block_type(self, stats: Dict[str, float]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –±–ª–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫"""
        try:
            mean_error = stats['mean_error']
            std_error = stats['std_error']
            error_trend = stats['error_trend']
            volatility = stats['volatility']
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            if mean_error < 0.5 and std_error < 0.3:
                return 'low_error_stable'
            elif mean_error > 2.0 and std_error > 1.0:
                return 'high_error_volatile'
            elif error_trend > 0.1:
                return 'increasing_errors'
            elif error_trend < -0.1:
                return 'decreasing_errors'
            elif volatility > 0.05:
                return 'high_volatility'
            else:
                return 'normal'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –±–ª–æ–∫–∞: {e}")
            return 'unknown'
    
    def _calculate_classification_confidence(self, stats: Dict[str, float]) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–ª–æ–∫–∞"""
        try:
            # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —á–µ—Ç–∫–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞—Ö
            mean_error = stats['mean_error']
            std_error = stats['std_error']
            error_trend = abs(stats['error_trend'])
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            mean_score = min(mean_error / 2.0, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
            std_score = min(std_error / 1.0, 1.0)    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
            trend_score = min(error_trend / 0.2, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ [0, 1]
            
            # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            confidence = (mean_score + std_score + trend_score) / 3.0
            
            return min(max(confidence, 0.0), 1.0)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {e}")
            return 0.5
    
    def save_blocks(self, blocks: List[BlockBoundary]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–ª–æ–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                for block in blocks:
                    cursor.execute('''
                        INSERT INTO blocks 
                        (start_time, end_time, start_index, end_index, block_type, confidence,
                         mean_error, std_error, max_error, min_error, error_trend, 
                         volatility, prediction_count)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        block.start_time, block.end_time, block.start_index, block.end_index,
                        block.block_type, block.confidence,
                        block.error_statistics['mean_error'],
                        block.error_statistics['std_error'],
                        block.error_statistics['max_error'],
                        block.error_statistics['min_error'],
                        block.error_statistics['error_trend'],
                        block.error_statistics['volatility'],
                        block.error_statistics['prediction_count']
                    ))
                
                conn.commit()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤ –≤ –ë–î")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
    
    def get_blocks(self, start_time: Optional[datetime] = None,
                   end_time: Optional[datetime] = None,
                   block_type: Optional[str] = None) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–ª–æ–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                query = "SELECT * FROM blocks WHERE 1=1"
                params = []
                
                if start_time:
                    query += " AND start_time >= ?"
                    params.append(start_time)
                
                if end_time:
                    query += " AND end_time <= ?"
                    params.append(end_time)
                
                if block_type:
                    query += " AND block_type = ?"
                    params.append(block_type)
                
                query += " ORDER BY start_time"
                
                df = pd.read_sql_query(query, conn, params=params)
                
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –±–ª–æ–∫–æ–≤ –∏–∑ –ë–î")
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–æ–∫–æ–≤: {e}")
            return pd.DataFrame()

def test_block_detector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Detector"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Detector")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    import uuid
    test_db = f'test_block_detector_{uuid.uuid4().hex[:8]}.db'
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        detector = BlockDetector(test_db)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
        np.random.seed(42)
        
        # –†–µ–∂–∏–º 1: –ù–∏–∑–∫–∏–µ –æ—à–∏–±–∫–∏ (—Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫)
        timestamps_1 = [datetime.now() - timedelta(hours=i) for i in range(100, 0, -1)]
        errors_1 = np.random.normal(0.3, 0.1, 100)
        
        # –†–µ–∂–∏–º 2: –í—ã—Å–æ–∫–∏–µ –æ—à–∏–±–∫–∏ (–≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫)
        timestamps_2 = [datetime.now() - timedelta(hours=i) for i in range(200, 100, -1)]
        errors_2 = np.random.normal(1.5, 0.5, 100)
        
        # –†–µ–∂–∏–º 3: –°—Ä–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ (–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫)
        timestamps_3 = [datetime.now() - timedelta(hours=i) for i in range(300, 200, -1)]
        errors_3 = np.random.normal(0.8, 0.2, 100)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        all_timestamps = timestamps_1 + timestamps_2 + timestamps_3
        all_errors = np.concatenate([errors_1, errors_2, errors_3])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        test_data = pd.DataFrame({
            'timestamp': all_timestamps,
            'error_absolute': all_errors,
            'volatility': [0.01] * len(all_timestamps)
        })
        
        # –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º –±–ª–æ–∫–∏
        blocks = detector.detect_block_boundaries(test_data, threshold=1.5, window=50)
        
        if len(blocks) >= 2:
            logger.info(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–ª–æ–∫–∏
            detector.save_blocks(blocks)
            
            # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏ –∏–∑ –ë–î
            saved_blocks = detector.get_blocks()
            
            if len(saved_blocks) == len(blocks):
                logger.info("‚úÖ –ë–ª–æ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ –ë–î")
                return True
            else:
                logger.error(f"‚ùå –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: {len(saved_blocks)} != {len(blocks)}")
                return False
        else:
            logger.error(f"‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–æ–∫–æ–≤: {len(blocks)}")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Block Detector: {e}")
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import os
        try:
            if os.path.exists(test_db):
                os.remove(test_db)
        except PermissionError:
            pass

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Detector...")
    
    success = test_block_detector()
    
    if success:
        print("‚úÖ Block Detector –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ Block Detector")
