#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
"""

import pandas as pd
import numpy as np
from datetime import datetime
from logger import get_logger

logger = get_logger()

class BacktestEvaluator:
    """–û—Ü–µ–Ω—â–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    
    def __init__(self, csv_file='signals_backtest.csv'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞"""
        self.csv_file = csv_file
        self.trades_df = None
        
    def load_trades(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–¥–µ–ª–∫–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        try:
            self.trades_df = pd.read_csv(self.csv_file)
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.trades_df)} —Å–¥–µ–ª–æ–∫ –∏–∑ {self.csv_file}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫: {e}")
            return False
    
    def calculate_strategy_stats(self, result_column):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        if self.trades_df is None:
            return None
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–¥–µ–ª–∫–∏
        completed_trades = self.trades_df[self.trades_df[result_column].notna()]
        
        if len(completed_trades) == 0:
            return {
                'total_trades': 0,
                'winrate': 0.0,
                'avg_profit': 0.0,
                'total_profit': 0.0,
                'max_drawdown': 0.0,
                'avg_hold_time': 0.0
            }
        
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_trades = len(completed_trades)
        profitable_trades = len(completed_trades[completed_trades[result_column] > 0])
        winrate = (profitable_trades / total_trades) * 100
        
        # –ü—Ä–∏–±—ã–ª—å
        avg_profit = completed_trades[result_column].mean()
        total_profit = completed_trades[result_column].sum()
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞
        cumulative_returns = completed_trades[result_column].cumsum()
        running_max = cumulative_returns.expanding().max()
        drawdown = (cumulative_returns - running_max) / running_max * 100
        max_drawdown = abs(drawdown.min())
        
        # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
        time_columns = {
            'result_1pct': 'exit_time_1pct',
            'result_2pct': 'exit_time_2pct',
            'result_5pct': 'exit_time_5pct',
            'result_trend_v1': 'exit_time_trend_v1',
            'result_trend_v2': 'exit_time_trend_v2',
            'result_trend_v3': 'exit_time_trend_v3'
        }
        
        time_column = time_columns.get(result_column)
        avg_hold_time = 0.0
        
        if time_column and time_column in completed_trades.columns:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è
            completed_trades['signal_time'] = pd.to_datetime(completed_trades['signal_time'])
            completed_trades[time_column] = pd.to_datetime(completed_trades[time_column])
            
            hold_times = (completed_trades[time_column] - completed_trades['signal_time']).dt.total_seconds() / 3600  # –≤ —á–∞—Å–∞—Ö
            avg_hold_time = hold_times.mean()
        
        return {
            'total_trades': total_trades,
            'winrate': round(winrate, 2),
            'avg_profit': round(avg_profit, 2),
            'total_profit': round(total_profit, 2),
            'max_drawdown': round(max_drawdown, 2),
            'avg_hold_time': round(avg_hold_time, 2)
        }
    
    def generate_summary_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        if self.trades_df is None:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None
        
        logger.info("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategies = {
            '1% —Ç–∞—Ä–≥–µ—Ç': 'result_1pct',
            '2% —Ç–∞—Ä–≥–µ—Ç': 'result_2pct',
            '5% —Ç–∞—Ä–≥–µ—Ç': 'result_5pct',
            '–¢—Ä–µ–Ω–¥ v1': 'result_trend_v1',
            '–¢—Ä–µ–Ω–¥ v2': 'result_trend_v2',
            '–¢—Ä–µ–Ω–¥ v3': 'result_trend_v3'
        }
        
        report = []
        report.append("=== –ò—Ç–æ–≥–∏ –±—ç–∫—Ç–µ—Å—Ç–∞ ===")
        report.append(f"–ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
        report.append(f"–ö–æ–ª-–≤–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(self.trades_df)}")
        report.append("")
        report.append("--- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º ---")
        
        for strategy_name, result_column in strategies.items():
            stats = self.calculate_strategy_stats(result_column)
            if stats:
                report.append(f"{strategy_name}:")
                report.append(f"  Winrate: {stats['winrate']}%")
                report.append(f"  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: {stats['avg_profit']}%")
                report.append(f"  –°—É–º–º–∞—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: {stats['total_profit']}%")
                report.append(f"  –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {stats['max_drawdown']}%")
                report.append(f"  –°—Ä–µ–¥–Ω–µ–µ —É–¥–µ—Ä–∂–∞–Ω–∏–µ: {stats['avg_hold_time']}—á")
                report.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        report.append("--- –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ---")
        report.append(f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self.trades_df)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal_counts = self.trades_df['signal'].value_counts()
        report.append("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤:")
        for signal, count in signal_counts.items():
            report.append(f"  {signal}: {count}")
        
        report.append("")
        report.append(f"–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        return "\n".join(report)
    
    def save_report(self, report, filename='results_summary.txt'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª"""
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            logger.info(f"üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return False
    
    def get_best_strategy(self):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ —Å–æ–≤–æ–∫—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç—Ä–∏–∫"""
        if self.trades_df is None:
            return None
        
        strategies = {
            '1% —Ç–∞—Ä–≥–µ—Ç': 'result_1pct',
            '2% —Ç–∞—Ä–≥–µ—Ç': 'result_2pct',
            '5% —Ç–∞—Ä–≥–µ—Ç': 'result_5pct',
            '–¢—Ä–µ–Ω–¥ v1': 'result_trend_v1',
            '–¢—Ä–µ–Ω–¥ v2': 'result_trend_v2',
            '–¢—Ä–µ–Ω–¥ v3': 'result_trend_v3'
        }
        
        best_strategy = None
        best_score = -float('inf')
        
        for strategy_name, result_column in strategies.items():
            stats = self.calculate_strategy_stats(result_column)
            if stats and stats['total_trades'] > 0:
                # –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞: winrate + total_profit - max_drawdown
                score = stats['winrate'] + stats['total_profit'] - stats['max_drawdown']
                
                if score > best_score:
                    best_score = score
                    best_strategy = {
                        'name': strategy_name,
                        'stats': stats,
                        'score': score
                    }
        
        return best_strategy
    
    def run_evaluation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –æ—Ü–µ–Ω–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if not self.load_trades():
            return None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = self.generate_summary_report()
        if report is None:
            return None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        self.save_report(report)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        best_strategy = self.get_best_strategy()
        if best_strategy:
            logger.info(f"üèÜ –õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {best_strategy['name']}")
            logger.info(f"üìä –û—Ü–µ–Ω–∫–∞: {best_strategy['score']:.2f}")
        
        logger.info("‚úÖ –û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return report

def run_evaluation_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ü–µ–Ω—â–∏–∫–∞"""
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ü–µ–Ω—â–∏–∫
    evaluator = BacktestEvaluator()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ü–µ–Ω–∫—É
    report = evaluator.run_evaluation()
    
    if report:
        print("\nüìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:")
        print(report)
    
    logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ—Ü–µ–Ω—â–∏–∫–∞
    run_evaluation_demo()
