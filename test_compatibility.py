#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª—è compatibility.py
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É —Å NumPy 2.3.2 –≤ Python 3.13
"""

import sys
import numpy as np
import pandas as pd
import unittest
from datetime import datetime
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

from compatibility import (
    safe_float, safe_mean, safe_std, safe_array, 
    safe_divide, safe_sqrt, safe_log, validate_numpy_compatibility
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class TestCompatibility(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NumPy 2.3.2"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.test_values = [
            1.0, 2.5, -3.0, 0.0, 100.0,
            np.float32(1.5), np.float64(2.5),
            np.int32(10), np.int64(20),
            None, np.nan, np.inf, -np.inf,
            '5.0', 'invalid', '', 'nan',
            [1, 2, 3], (4, 5, 6),
            pd.Series([1.0, 2.0, 3.0])
        ]
    
    def test_safe_float_scalar_types(self):
        """–¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ NumPy"""
        logger.info("üß™ –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ NumPy")
        
        test_cases = [
            (1.0, 1.0),
            (np.float32(2.5), 2.5),
            (np.float64(3.5), 3.5),
            (np.int32(10), 10.0),
            (np.int64(20), 20.0),
            (None, 0.0),
            (np.nan, 0.0),
            (np.inf, 0.0),
            (-np.inf, 0.0),
            ('5.0', 5.0),
            ('invalid', 0.0),
            ('', 0.0),
            ('nan', 0.0)
        ]
        
        for input_val, expected in test_cases:
            with self.subTest(input_val=input_val):
                result = safe_float(input_val)
                self.assertIsInstance(result, float)
                self.assertEqual(result, expected)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫–∞–ª—è—Ä–Ω—ã—Ö —Ç–∏–ø–æ–≤ NumPy ‚Üí PASSED")
    
    def test_safe_float_collections(self):
        """–¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π"""
        logger.info("üß™ –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π")
        
        # –¢–µ—Å—Ç —Å–ø–∏—Å–∫–æ–≤
        result = safe_float([1, 2, 3])
        self.assertEqual(result, 1.0)
        
        # –¢–µ—Å—Ç –∫–æ—Ä—Ç–µ–∂–µ–π
        result = safe_float((4, 5, 6))
        self.assertEqual(result, 4.0)
        
        # –¢–µ—Å—Ç numpy –º–∞—Å—Å–∏–≤–æ–≤
        result = safe_float(np.array([7, 8, 9]))
        self.assertEqual(result, 7.0)
        
        # –¢–µ—Å—Ç pandas Series
        result = safe_float(pd.Series([10, 11, 12]))
        self.assertEqual(result, 10.0)
        
        # –¢–µ—Å—Ç –ø—É—Å—Ç—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
        result = safe_float([])
        self.assertEqual(result, 0.0)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π ‚Üí PASSED")
    
    def test_safe_mean_empty_lists(self):
        """–¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏")
        
        # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        result = safe_mean([])
        self.assertEqual(result, 0.0)
        
        # None
        result = safe_mean(None)
        self.assertEqual(result, 0.0)
        
        # –°–ø–∏—Å–æ–∫ —Å None
        result = safe_mean([None, None, None])
        self.assertEqual(result, 0.0)
        
        # –°–ø–∏—Å–æ–∫ —Å NaN
        result = safe_mean([np.nan, np.nan, np.nan])
        self.assertEqual(result, 0.0)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 3: –†–∞–±–æ—Ç–∞ —Å –ø—É—Å—Ç—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏ ‚Üí PASSED")
    
    def test_safe_mean_normal_cases(self):
        """–¢–µ—Å—Ç 4: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ"""
        logger.info("üß™ –¢–µ—Å—Ç 4: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ")
        
        # –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
        result = safe_mean([1, 2, 3, 4, 5])
        self.assertAlmostEqual(result, 3.0, places=5)
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
        result = safe_mean([1.0, np.float32(2.0), np.int32(3)])
        self.assertAlmostEqual(result, 2.0, places=5)
        
        # Pandas Series
        result = safe_mean(pd.Series([10, 20, 30]))
        self.assertAlmostEqual(result, 20.0, places=5)
        
        # Numpy array
        result = safe_mean(np.array([100, 200, 300]))
        self.assertAlmostEqual(result, 200.0, places=5)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 4: –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ ‚Üí PASSED")
    
    def test_safe_std_edge_cases(self):
        """–¢–µ—Å—Ç 5: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
        logger.info("üß™ –¢–µ—Å—Ç 5: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
        
        # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        result = safe_std([])
        self.assertEqual(result, 0.0)
        
        # –û–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        result = safe_std([5])
        self.assertEqual(result, 0.0)
        
        # –î–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        result = safe_std([1, 3])
        self.assertAlmostEqual(result, 1.0, places=5)
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
        result = safe_std([1.0, np.float32(2.0), np.int32(3)])
        self.assertGreater(result, 0.0)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 5: –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è ‚Üí PASSED")
    
    def test_safe_array_creation(self):
        """–¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤"""
        logger.info("üß™ –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤")
        
        # –û–±—ã—á–Ω—ã–π —Å–ø–∏—Å–æ–∫
        result = safe_array([1, 2, 3])
        self.assertIsInstance(result, np.ndarray)
        self.assertEqual(result.dtype, np.float32)
        self.assertEqual(len(result), 3)
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
        result = safe_array([1.0, np.float32(2.0), '3.0'])
        self.assertIsInstance(result, np.ndarray)
        self.assertEqual(len(result), 3)
        
        # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        result = safe_array([])
        self.assertIsInstance(result, np.ndarray)
        self.assertEqual(len(result), 0)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤ ‚Üí PASSED")
    
    def test_mathematical_operations(self):
        """–¢–µ—Å—Ç 7: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 7: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
        result = safe_divide(10, 2)
        self.assertEqual(result, 5.0)
        
        result = safe_divide(10, 0)
        self.assertEqual(result, 0.0)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å
        result = safe_sqrt(16)
        self.assertEqual(result, 4.0)
        
        result = safe_sqrt(-4)
        self.assertEqual(result, 0.0)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º
        result = safe_log(np.e)
        self.assertAlmostEqual(result, 1.0, places=5)
        
        result = safe_log(0)
        self.assertEqual(result, 0.0)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 7: –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ ‚Üí PASSED")
    
    def test_numpy_compatibility(self):
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NumPy"""
        logger.info("üß™ –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NumPy")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏
        numpy_version = np.__version__
        major_version = int(numpy_version.split('.')[0])
        
        self.assertGreaterEqual(major_version, 2, 
                              f"–¢—Ä–µ–±—É–µ—Ç—Å—è NumPy 2.x, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ {numpy_version}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        is_compatible = validate_numpy_compatibility()
        self.assertTrue(is_compatible, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ—à–ª–∞")
        
        logger.info("‚úÖ –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NumPy ‚Üí PASSED")
    
    def test_memory_efficiency(self):
        """–¢–µ—Å—Ç 9: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info("üß™ –¢–µ—Å—Ç 9: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        large_data = list(range(10000))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è float32
        result = safe_array(large_data)
        self.assertEqual(result.dtype, np.float32)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        mean_result = safe_mean(large_data)
        std_result = safe_std(large_data)
        
        self.assertIsInstance(mean_result, float)
        self.assertIsInstance(std_result, float)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 9: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ ‚Üí PASSED")
    
    def test_error_handling(self):
        """–¢–µ—Å—Ç 10: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.info("üß™ –¢–µ—Å—Ç 10: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
        
        # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        problematic_values = [
            object(),  # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø
            complex(1, 2),  # –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —á–∏—Å–ª–æ
            {'key': 'value'},  # –°–ª–æ–≤–∞—Ä—å
        ]
        
        for val in problematic_values:
            result = safe_float(val)
            self.assertIsInstance(result, float)
            self.assertEqual(result, 0.0)
        
        logger.info("‚úÖ –¢–µ—Å—Ç 10: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ‚Üí PASSED")

def run_compatibility_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NumPy 2.3.2")
    logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
    suite = unittest.TestLoader().loadTestsFromTestCase(TestCompatibility)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = result.testsRun
    failed_tests = len(result.failures)
    error_tests = len(result.errors)
    passed_tests = total_tests - failed_tests - error_tests
    
    success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
    
    logger.info("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:")
    logger.info(f"   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    logger.info(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    logger.info(f"   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed_tests}")
    logger.info(f"   –û—à–∏–±–æ–∫: {error_tests}")
    logger.info(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    if success_rate >= 90:
        logger.info("üéâ –¢–ï–°–¢–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
        return True
    else:
        logger.error("‚ùå –¢–ï–°–¢–´ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ü–†–û–í–ê–õ–ï–ù–´!")
        return False

if __name__ == "__main__":
    success = run_compatibility_tests()
    sys.exit(0 if success else 1)

