#!/usr/bin/env python3
"""
Block Reporting –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Error-Driven Adaptive Blocks
–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –±–ª–æ–∫–∞–º
"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from compatibility import safe_float, safe_mean, safe_std, safe_array, safe_sqrt
from block_detector import BlockDetector
from block_analyzer import BlockAnalyzer
from formula_engine_blocks import FormulaEngineBlocks

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class BlockReporter:
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π –ø–æ –±–ª–æ–∫–∞–º"""
    
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞ –±–ª–æ–∫–æ–≤
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        """
        self.db_path = db_path
        self.block_detector = BlockDetector(db_path)
        self.block_analyzer = BlockAnalyzer(db_path)
        self.formula_engine = FormulaEngineBlocks(db_path)
        logger.info(f"üìä BlockReporter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –ë–î: {db_path}")
    
    def create_block_analysis_plot(self, block_id: int, title: str = None) -> go.Figure:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
        Args:
            block_id: ID –±–ª–æ–∫–∞
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
            
        Returns:
            go.Figure: –ì—Ä–∞—Ñ–∏–∫ Plotly
        """
        try:
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ {block_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞
            analysis = self.block_analyzer.analyze_block(block_id)
            
            if analysis.block_id == 0:
                logger.warning(f"–ë–ª–æ–∫ {block_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return go.Figure()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–∫–∞
            block_stats = self.block_analyzer.get_block_statistics(block_id)
            
            if not block_stats:
                logger.warning(f"–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–ª–æ–∫–∞ {block_id}")
                return go.Figure()
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏ –±–ª–æ–∫–∞
            errors_df = self._get_block_errors(block_id)
            
            if len(errors_df) == 0:
                logger.warning(f"–ù–µ—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –±–ª–æ–∫–∞ {block_id}")
                return go.Figure()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
            fig = make_subplots(
                rows=4, cols=1,
                subplot_titles=[
                    f"–û—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–ë–ª–æ–∫ {block_id})",
                    "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫",
                    "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                    "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
                ],
                vertical_spacing=0.08,
                row_heights=[0.4, 0.2, 0.2, 0.2]
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –û—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
            fig.add_trace(
                go.Scatter(
                    x=errors_df['timestamp'],
                    y=errors_df['error_absolute'],
                    mode='lines+markers',
                    name='–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
                    line=dict(color='blue', width=2),
                    marker=dict(size=4),
                    hovertemplate='<b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞</b><br>' +
                                 '–í—Ä–µ–º—è: %{x}<br>' +
                                 '–û—à–∏–±–∫–∞: %{y:.4f}<br>' +
                                 '<extra></extra>'
                ),
                row=1, col=1
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—à–∏–±–∫—É
            mean_error = block_stats['mean_error']
            fig.add_hline(
                y=mean_error,
                line_dash="dash",
                line_color="red",
                annotation_text=f"–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {mean_error:.4f}",
                row=1, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
            errors = safe_array(errors_df['error_absolute'])
            fig.add_trace(
                go.Histogram(
                    x=errors,
                    nbinsx=20,
                    name='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫',
                    marker_color='lightblue',
                    opacity=0.7
                ),
                row=2, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_metrics = analysis.performance_metrics
            metrics_names = list(performance_metrics.keys())
            metrics_values = list(performance_metrics.values())
            
            fig.add_trace(
                go.Bar(
                    x=metrics_names,
                    y=metrics_values,
                    name='–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                    marker_color='green',
                    opacity=0.7
                ),
                row=3, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
            recommendations_text = '<br>'.join([f"‚Ä¢ {rec}" for rec in analysis.recommendations])
            
            fig.add_annotation(
                text=f"<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b><br>{recommendations_text}",
                xref="x4", yref="y4",
                x=0.5, y=0.5,
                showarrow=False,
                font=dict(size=12),
                row=4, col=1
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
            fig.update_layout(
                title={
                    'text': title or f"–ê–Ω–∞–ª–∏–∑ –±–ª–æ–∫–∞ {block_id} - {analysis.market_regime}",
                    'x': 0.5,
                    'xanchor': 'center',
                    'font': {'size': 20}
                },
                height=1000,
                showlegend=True,
                hovermode='x unified',
                template='plotly_white'
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
            fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=1, col=1)
            fig.update_yaxes(title_text="–û—à–∏–±–∫–∞", row=1, col=1)
            fig.update_xaxes(title_text="–ó–Ω–∞—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏", row=2, col=1)
            fig.update_yaxes(title_text="–ß–∞—Å—Ç–æ—Ç–∞", row=2, col=1)
            fig.update_xaxes(title_text="–ú–µ—Ç—Ä–∏–∫–∞", row=3, col=1)
            fig.update_yaxes(title_text="–ó–Ω–∞—á–µ–Ω–∏–µ", row=3, col=1)
            
            logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ {block_id} —Å–æ–∑–¥–∞–Ω")
            return fig
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ {block_id}: {e}")
            return go.Figure()
    
    def create_blocks_summary_plot(self, days: int = 30) -> go.Figure:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å–≤–æ–¥–∫–∏ –ø–æ –±–ª–æ–∫–∞–º
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            go.Figure: –ì—Ä–∞—Ñ–∏–∫ Plotly
        """
        try:
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –±–ª–æ–∫–∞–º –∑–∞ {days} –¥–Ω–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –±–ª–æ–∫–∞–º
            summary = self.block_analyzer.get_blocks_summary(days)
            
            if 'total_blocks' not in summary:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏")
                return go.Figure()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–æ–≤
            blocks_df = self.block_analyzer.get_blocks()
            
            if len(blocks_df) == 0:
                logger.warning("–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                return go.Figure()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∏
            fig = make_subplots(
                rows=2, cols=2,
                subplot_titles=[
                    "–ë–ª–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
                    "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º",
                    "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–∂–∏–º–∞–º",
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–æ–≤"
                ]
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –ë–ª–æ–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            fig.add_trace(
                go.Scatter(
                    x=blocks_df['start_time'],
                    y=blocks_df['mean_error'],
                    mode='markers',
                    name='–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞',
                    marker=dict(
                        size=blocks_df['prediction_count'] / 10,
                        color=blocks_df['confidence'],
                        colorscale='Viridis',
                        showscale=True,
                        colorbar=dict(title="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
                    ),
                    hovertemplate='<b>–ë–ª–æ–∫ %{text}</b><br>' +
                                 '–í—Ä–µ–º—è: %{x}<br>' +
                                 '–û—à–∏–±–∫–∞: %{y:.4f}<br>' +
                                 '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %{marker.color:.3f}<br>' +
                                 '<extra></extra>',
                    text=blocks_df['id']
                ),
                row=1, col=1
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
            type_counts = blocks_df['block_type'].value_counts()
            fig.add_trace(
                go.Pie(
                    labels=type_counts.index,
                    values=type_counts.values,
                    name="–¢–∏–ø—ã –±–ª–æ–∫–æ–≤"
                ),
                row=1, col=2
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–∂–∏–º–∞–º
            regime_counts = {}
            for _, block in blocks_df.iterrows():
                regime = self.block_analyzer.classify_market_regime(block['id'])
                regime_counts[regime] = regime_counts.get(regime, 0) + 1
            
            if regime_counts:
                fig.add_trace(
                    go.Bar(
                        x=list(regime_counts.keys()),
                        y=list(regime_counts.values()),
                        name="–†—ã–Ω–æ—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã",
                        marker_color='lightcoral'
                    ),
                    row=2, col=1
                )
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–æ–≤
            fig.add_trace(
                go.Scatter(
                    x=blocks_df['mean_error'],
                    y=blocks_df['confidence'],
                    mode='markers',
                    name='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                    marker=dict(
                        size=blocks_df['prediction_count'] / 20,
                        color=blocks_df['std_error'],
                        colorscale='RdYlGn',
                        showscale=True,
                        colorbar=dict(title="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ")
                    ),
                    hovertemplate='<b>–ë–ª–æ–∫ %{text}</b><br>' +
                                 '–°—Ä–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: %{x:.4f}<br>' +
                                 '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %{y:.3f}<br>' +
                                 '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: %{marker.color:.4f}<br>' +
                                 '<extra></extra>',
                    text=blocks_df['id']
                ),
                row=2, col=2
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
            fig.update_layout(
                title={
                    'text': f"–°–≤–æ–¥–∫–∞ –ø–æ –±–ª–æ–∫–∞–º –∑–∞ {days} –¥–Ω–µ–π",
                    'x': 0.5,
                    'xanchor': 'center',
                    'font': {'size': 20}
                },
                height=800,
                showlegend=True,
                template='plotly_white'
            )
            
            logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–≤–æ–¥–∫–∏ –ø–æ –±–ª–æ–∫–∞–º —Å–æ–∑–¥–∞–Ω")
            return fig
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–≤–æ–¥–∫–∏: {e}")
            return go.Figure()
    
    def create_formula_performance_plot(self, formula_id: str) -> go.Figure:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã –ø–æ –±–ª–æ–∫–∞–º
        
        Args:
            formula_id: ID —Ñ–æ—Ä–º—É–ª—ã
            
        Returns:
            go.Figure: –ì—Ä–∞—Ñ–∏–∫ Plotly
        """
        try:
            logger.info(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã {formula_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ä–µ–∂–∏–º–∞–º
            performance_data = self.formula_engine.get_formula_performance_by_regime(formula_id)
            
            if not performance_data:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}")
                return go.Figure()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            regimes = list(performance_data.keys())
            avg_scores = [performance_data[regime]['average_score'] for regime in regimes]
            max_scores = [performance_data[regime]['max_score'] for regime in regimes]
            block_counts = [performance_data[regime]['block_count'] for regime in regimes]
            
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
            fig = go.Figure()
            
            # –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            fig.add_trace(
                go.Bar(
                    x=regimes,
                    y=avg_scores,
                    name='–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞',
                    marker_color='lightblue',
                    opacity=0.7
                )
            )
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏
            fig.add_trace(
                go.Bar(
                    x=regimes,
                    y=max_scores,
                    name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞',
                    marker_color='darkblue',
                    opacity=0.7
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤ –∫–∞–∫ —Ç–µ–∫—Å—Ç
            for i, count in enumerate(block_counts):
                fig.add_annotation(
                    x=regimes[i],
                    y=max(avg_scores[i], max_scores[i]) + 0.05,
                    text=f"–ë–ª–æ–∫–æ–≤: {count}",
                    showarrow=False,
                    font=dict(size=10)
                )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
            fig.update_layout(
                title={
                    'text': f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª—ã {formula_id} –ø–æ —Ä—ã–Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–∞–º",
                    'x': 0.5,
                    'xanchor': 'center',
                    'font': {'size': 16}
                },
                xaxis_title="–†—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º",
                yaxis_title="–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                barmode='group',
                template='plotly_white',
                height=500
            )
            
            logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª—ã {formula_id} —Å–æ–∑–¥–∞–Ω")
            return fig
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return go.Figure()
    
    def _get_block_errors(self, block_id: int) -> pd.DataFrame:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—à–∏–±–∫–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        try:
            import sqlite3
            
            with sqlite3.connect(self.db_path) as conn:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –±–ª–æ–∫–∞
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT start_time, end_time FROM blocks WHERE id = ?
                ''', (block_id,))
                
                result = cursor.fetchone()
                if not result:
                    return pd.DataFrame()
                
                start_time, end_time = result
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫–∏
                query = '''
                    SELECT * FROM error_history 
                    WHERE timestamp >= ? AND timestamp <= ?
                    ORDER BY timestamp
                '''
                
                df = pd.read_sql_query(query, conn, params=[start_time, end_time])
                return df
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –±–ª–æ–∫–∞ {block_id}: {e}")
            return pd.DataFrame()
    
    def generate_comprehensive_report(self, days: int = 30) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±–ª–æ–∫–∞–º
        
        Args:
            days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            Dict[str, Any]: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
        """
        try:
            logger.info(f"üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ {days} –¥–Ω–µ–π")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ –±–ª–æ–∫–∞–º
            blocks_summary = self.block_analyzer.get_blocks_summary(days)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–æ–≤
            blocks_df = self.block_analyzer.get_blocks()
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫
            block_analyses = []
            for _, block in blocks_df.iterrows():
                analysis = self.block_analyzer.analyze_block(block['id'])
                block_analyses.append({
                    'block_id': block['id'],
                    'block_type': block['block_type'],
                    'market_regime': analysis.market_regime,
                    'confidence': analysis.confidence,
                    'risk_level': analysis.risk_level,
                    'performance_score': analysis.performance_metrics.get('overall_score', 0.0),
                    'recommendations_count': len(analysis.recommendations)
                })
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—É–ª
            formula_performance = {}
            for formula_id in ['volatility_focused', 'basis_dominant', 'balanced']:
                performance_data = self.formula_engine.get_formula_performance_by_regime(formula_id)
                formula_performance[formula_id] = performance_data
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
            comprehensive_report = {
                'report_period_days': days,
                'generation_date': datetime.now().isoformat(),
                'blocks_summary': blocks_summary,
                'block_analyses': block_analyses,
                'formula_performance': formula_performance,
                'key_insights': self._generate_key_insights(blocks_summary, block_analyses),
                'recommendations': self._generate_report_recommendations(block_analyses, formula_performance)
            }
            
            logger.info(f"‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
            return comprehensive_report
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}
    
    def _generate_key_insights(self, blocks_summary: Dict[str, Any], 
                             block_analyses: List[Dict[str, Any]]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            insights = []
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤
            total_blocks = blocks_summary.get('total_blocks', 0)
            if total_blocks > 0:
                insights.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {total_blocks} —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∑–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –ø–µ—Ä–∏–æ–¥")
            
            # –ê–Ω–∞–ª–∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞
            most_common_regime = blocks_summary.get('most_common_regime', 'unknown')
            if most_common_regime != 'unknown':
                insights.append(f"–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ä—ã–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º: {most_common_regime}")
            
            # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤
            if block_analyses:
                avg_performance = safe_mean([block['performance_score'] for block in block_analyses])
                insights.append(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–æ–≤: {avg_performance:.3f}")
                
                high_performance_blocks = [b for b in block_analyses if b['performance_score'] > 0.7]
                if high_performance_blocks:
                    insights.append(f"–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {len(high_performance_blocks)}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤
            high_risk_blocks = [b for b in block_analyses if b['risk_level'] == 'high']
            if high_risk_blocks:
                insights.append(f"–ë–ª–æ–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º: {len(high_risk_blocks)}")
            
            return insights
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤: {e}")
            return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Å–∞–π—Ç–æ–≤"]
    
    def _generate_report_recommendations(self, block_analyses: List[Dict[str, Any]], 
                                      formula_performance: Dict[str, Any]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            recommendations = []
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–æ–≤
            if block_analyses:
                low_performance_blocks = [b for b in block_analyses if b['performance_score'] < 0.5]
                if low_performance_blocks:
                    recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±–ª–æ–∫–æ–≤ —Å –Ω–∏–∑–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é")
                
                high_risk_blocks = [b for b in block_analyses if b['risk_level'] == 'high']
                if high_risk_blocks:
                    recommendations.append("–£–≤–µ–ª–∏—á—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–ª–æ–∫–∞–º–∏ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—É–ª
            for formula_id, performance_data in formula_performance.items():
                if performance_data:
                    avg_scores = [data['average_score'] for data in performance_data.values()]
                    if avg_scores:
                        overall_score = safe_mean(avg_scores)
                        if overall_score < 0.6:
                            recommendations.append(f"–§–æ—Ä–º—É–ª–∞ {formula_id} –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∏–∑–∫—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
            
            # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations.append("–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–æ—Ä–º—É–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            recommendations.append("–ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏")
            
            return recommendations
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
            return ["–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"]

def test_block_reporting():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Reporting"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Reporting")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    import uuid
    test_db = f'test_block_reporting_{uuid.uuid4().hex[:8]}.db'
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        reporter = BlockReporter(test_db)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import sqlite3
        
        with sqlite3.connect(test_db) as conn:
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS blocks (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    start_time DATETIME NOT NULL,
                    end_time DATETIME NOT NULL,
                    start_index INTEGER NOT NULL,
                    end_index INTEGER NOT NULL,
                    block_type TEXT NOT NULL,
                    confidence REAL NOT NULL,
                    mean_error REAL NOT NULL,
                    std_error REAL NOT NULL,
                    max_error REAL NOT NULL,
                    min_error REAL NOT NULL,
                    error_trend REAL NOT NULL,
                    volatility REAL NOT NULL,
                    prediction_count INTEGER NOT NULL,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS error_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME NOT NULL,
                    formula_id TEXT,
                    prediction REAL NOT NULL,
                    actual REAL NOT NULL,
                    error_absolute REAL NOT NULL,
                    error_relative REAL NOT NULL,
                    error_normalized REAL NOT NULL,
                    volatility REAL,
                    confidence REAL,
                    method TEXT,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
            for i in range(3):
                cursor.execute('''
                    INSERT INTO blocks 
                    (start_time, end_time, start_index, end_index, block_type, confidence,
                     mean_error, std_error, max_error, min_error, error_trend, 
                     volatility, prediction_count)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    datetime.now() - timedelta(hours=3-i),
                    datetime.now() - timedelta(hours=2-i),
                    i*100, (i+1)*100, f'block_type_{i}', 0.7 + i*0.1,
                    0.3 + i*0.2, 0.1 + i*0.1, 0.5 + i*0.2, 0.1, 0.02 + i*0.01, 0.01, 100
                ))
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –æ—à–∏–±–∫–∏
                for j in range(50):
                    timestamp = datetime.now() - timedelta(hours=3-i, minutes=j)
                    cursor.execute('''
                        INSERT INTO error_history 
                        (timestamp, formula_id, prediction, actual, error_absolute, 
                         error_relative, error_normalized, volatility, confidence, method)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        timestamp, 'volatility_focused', 100.0 + j*0.01, 100.1 + j*0.01, 0.1 + j*0.001,
                        0.001, 0.1, 0.01, 0.8, 'sma'
                    ))
            
            conn.commit()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        analysis_plot = reporter.create_block_analysis_plot(1)
        
        if len(analysis_plot.data) > 0:
            logger.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
            summary_plot = reporter.create_blocks_summary_plot(1)
            
            if len(summary_plot.data) > 0:
                logger.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–≤–æ–¥–∫–∏ —Å–æ–∑–¥–∞–Ω")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç
                comprehensive_report = reporter.generate_comprehensive_report(1)
                
                if 'blocks_summary' in comprehensive_report:
                    logger.info("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω")
                    return True
                else:
                    logger.error("‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
                    return False
            else:
                logger.error("‚ùå –ì—Ä–∞—Ñ–∏–∫ —Å–≤–æ–¥–∫–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
        else:
            logger.error("‚ùå –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–∞–ª–∏–∑–∞ –±–ª–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Block Reporting: {e}")
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞
        import os
        try:
            if os.path.exists(test_db):
                os.remove(test_db)
        except PermissionError:
            pass

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Reporting...")
    
    success = test_block_reporting()
    
    if success:
        print("‚úÖ Block Reporting –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ùå –û—à–∏–±–∫–∏ –≤ Block Reporting")
