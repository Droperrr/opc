#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —Ä–æ–±–∞—Å—Ç–Ω—ã–º —Ç—Ä–µ–Ω–¥-—Ñ–∏–ª—å—Ç—Ä–æ–º (SMA_20)
"""

import os
import sys
import json
from datetime import datetime
from advanced_backtest_system import AdvancedBacktestSystem

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞"""
    print("=" * 60)
    print("üöÄ –ó–ê–ü–£–°–ö –ë–≠–ö–¢–ï–°–¢–ê –°–¢–†–ê–¢–ï–ì–ò–ò –° –†–û–ë–ê–°–¢–ù–´–ú –¢–†–ï–ù–î-–§–ò–õ–¨–¢–†–û–ú (SMA_20)")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    backtest_params = {
        'data_file': 'basis_features_1m.parquet',
        'z_score_threshold': 2.0,
        'initial_capital': 10000,
        'position_size': 0.1,
        'fixed_trading_params': {
            'atr_risk_multiplier': 2.0,
            'reward_ratio': 3.0
        },
        'results_dir': 'backtest_results_robust',
        'asset': 'SOL'
    }
    
    print("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –±—ç–∫—Ç–µ—Å—Ç–∞:")
    for key, value in backtest_params.items():
        if key != 'fixed_trading_params':
            print(f"  {key}: {value}")
        else:
            print(f"  {key}:")
            for k, v in value.items():
                print(f"    {k}: {v}")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±—ç–∫—Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
        backtest = AdvancedBacktestSystem(**backtest_params)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Walk-Forward –±—ç–∫—Ç–µ—Å—Ç
        print("üîÑ –ó–∞–ø—É—Å–∫ Walk-Forward –±—ç–∫—Ç–µ—Å—Ç–∞...")
        backtest.run(walk_forward=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_dir = backtest_params['results_dir']
        if os.path.exists(results_dir):
            print(f"‚úÖ –ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_dir}")
            
            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞
            report_file = os.path.join(results_dir, 'backtest_report.md')
            if os.path.exists(report_file):
                print("\nüìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –æ—Ç—á–µ—Ç–∞:")
                with open(report_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å –∫–ª—é—á–µ–≤—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
                    in_metrics_section = False
                    for line in lines:
                        if "## üìà –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" in line:
                            in_metrics_section = True
                            continue
                        if in_metrics_section:
                            if line.startswith("## "):
                                break
                            if "|" in line and "–ú–µ—Ç—Ä–∏–∫–∞" not in line and "---------" not in line:
                                print(f"  {line.strip()}")
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±—ç–∫—Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()