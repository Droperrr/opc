#!/usr/bin/env python3
"""
–°–±–æ—Ä—â–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SOL/USDT
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã: 1m, 5m, 15m, 1h, 4h, 1d
"""

import requests
import sqlite3
import pandas as pd
import time
import logging
import argparse
from datetime import datetime, timedelta
import os
from typing import List, Dict, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('data_collection_log.txt', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class DataCollector:
    def __init__(self, db_path: str = 'data/sol_iv.db'):
        self.db_path = db_path
        self.base_url = 'https://api.bybit.com'
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º—ã
        self.SUPPORTED_TIMEFRAMES = {
            '1': '1m',
            '5': '5m', 
            '15': '15m',
            '60': '1h',
            '240': '4h',
            '1440': '1d'
        }
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API
        self.RATE_LIMIT_DELAY = 0.1  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.MAX_RETRIES = 3
        self.BACKOFF_FACTOR = 2
        
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–ø–æ—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS spot_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    open REAL NOT NULL,
                    high REAL NOT NULL,
                    low REAL NOT NULL,
                    close REAL NOT NULL,
                    volume REAL NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(time, timeframe)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS futures_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    open REAL NOT NULL,
                    high REAL NOT NULL,
                    low REAL NOT NULL,
                    close REAL NOT NULL,
                    volume REAL NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    UNIQUE(time, timeframe)
                )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_spot_time ON spot_data(time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_spot_timeframe ON spot_data(timeframe)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_futures_time ON futures_data(time)')
            cursor.execute('CREATE INDEX IF NOT EXISTS idx_futures_timeframe ON futures_data(timeframe)')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
    
    def get_kline_data(self, market_type: str, symbol: str, interval: str, 
                      start_time: str, end_time: str, limit: int = 1000) -> Optional[List]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –æ—Ç Bybit API
        """
        try:
            url = f"{self.base_url}/v5/market/kline"
            
            params = {
                'category': market_type,
                'symbol': symbol,
                'interval': interval,
                'start': start_time,
                'end': end_time,
                'limit': limit
            }
            
            logger.info(f"üì° –ó–∞–ø—Ä–æ—Å: {market_type} {symbol} {interval} {start_time} - {end_time}")
            
            response = self.session.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            
            if data['retCode'] != 0:
                logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {data['retMsg']}")
                return None
            
            return data['result']['list']
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None
    
    def save_progress(self, current_date: str, market_type: str, timeframe: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with open('data_collection_progress.txt', 'a') as f:
                f.write(f"{datetime.now().isoformat()}: {market_type} {timeframe} {current_date}\n")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: {e}")
    
    def collect_data_for_timeframe(self, market_type: str, symbol: str, 
                                  timeframe: str, start_date: str, end_date: str) -> bool:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        """
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            table_name = 'spot_data' if market_type == 'spot' else 'futures_data'
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ timestamp
            start_ts = int(datetime.strptime(start_date, '%Y-%m-%d').timestamp() * 1000)
            end_ts = int(datetime.strptime(end_date, '%Y-%m-%d').timestamp() * 1000)
            
            current_ts = start_ts
            total_records = 0
            
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä {market_type} {symbol} {timeframe} —Å {start_date} –ø–æ {end_date}")
            
            while current_ts < end_ts:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π timestamp
                if timeframe == '1':
                    next_ts = current_ts + (1000 * 60 * 1000)  # +1000 –º–∏–Ω—É—Ç
                elif timeframe == '5':
                    next_ts = current_ts + (1000 * 5 * 1000)   # +1000 * 5 –º–∏–Ω—É—Ç
                elif timeframe == '15':
                    next_ts = current_ts + (1000 * 15 * 1000)  # +1000 * 15 –º–∏–Ω—É—Ç
                elif timeframe == '60':
                    next_ts = current_ts + (1000 * 60 * 1000)  # +1000 —á–∞—Å–æ–≤
                elif timeframe == '240':
                    next_ts = current_ts + (1000 * 4 * 60 * 1000)  # +1000 * 4 —á–∞—Å–æ–≤
                elif timeframe == '1440':
                    next_ts = current_ts + (1000 * 24 * 60 * 1000)  # +1000 –¥–Ω–µ–π
                else:
                    next_ts = current_ts + (1000 * 60 * 1000)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ end_ts
                if next_ts > end_ts:
                    next_ts = end_ts
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                kline_data = self.get_kline_data(
                    market_type, symbol, timeframe,
                    str(current_ts), str(next_ts)
                )
                
                if kline_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                    for candle in kline_data:
                        try:
                            # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: [timestamp, open, high, low, close, volume, ...]
                            timestamp = int(candle[0])
                            time_str = datetime.fromtimestamp(timestamp / 1000).strftime('%Y-%m-%d %H:%M:%S')
                            
                            cursor.execute(f'''
                                INSERT OR REPLACE INTO {table_name} 
                                (time, timeframe, open, high, low, close, volume)
                                VALUES (?, ?, ?, ?, ?, ?, ?)
                            ''', (
                                time_str,
                                self.SUPPORTED_TIMEFRAMES[timeframe],
                                float(candle[1]),
                                float(candle[2]),
                                float(candle[3]),
                                float(candle[4]),
                                float(candle[5])
                            ))
                            
                            total_records += 1
                            
                        except Exception as e:
                            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤–µ—á–∏: {e}")
                            continue
                    
                    conn.commit()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    current_date_str = datetime.fromtimestamp(current_ts / 1000).strftime('%Y-%m-%d')
                    self.save_progress(current_date_str, market_type, timeframe)
                    
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(kline_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è {current_date_str}")
                
                # –°–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥
                current_ts = next_ts
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
                time.sleep(self.RATE_LIMIT_DELAY)
            
            conn.close()
            logger.info(f"üéâ –ó–∞–≤–µ—Ä—à–µ–Ω —Å–±–æ—Ä {market_type} {timeframe}: {total_records} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {timeframe}: {e}")
            return False
    
    def collect_all_timeframes(self, market_type: str, symbol: str, 
                             timeframes: List[str], start_date: str, end_date: str):
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
        """
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {market_type} {symbol}")
        logger.info(f"üìÖ –ü–µ—Ä–∏–æ–¥: {start_date} - {end_date}")
        logger.info(f"‚è∞ –¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {timeframes}")
        
        results = {}
        
        for timeframe in timeframes:
            if timeframe not in self.SUPPORTED_TIMEFRAMES:
                logger.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
                continue
            
            success = self.collect_data_for_timeframe(
                market_type, symbol, timeframe, start_date, end_date
            )
            
            results[timeframe] = success
            
            if success:
                logger.info(f"‚úÖ {timeframe} - —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"‚ùå {timeframe} - –æ—à–∏–±–∫–∞")
        
        return results

def main():
    parser = argparse.ArgumentParser(description='–°–±–æ—Ä –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö SOL/USDT')
    parser.add_argument('--market', choices=['spot', 'linear'], required=True,
                       help='–¢–∏–ø —Ä—ã–Ω–∫–∞: spot –∏–ª–∏ linear (—Ñ—å—é—á–µ—Ä—Å—ã)')
    parser.add_argument('--pair', required=True,
                       help='–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL/USDT –∏–ª–∏ SOLUSDT)')
    parser.add_argument('--tf', nargs='+', default=['1', '5', '15', '60', '240', '1440'],
                       help='–¢–∞–π–º—Ñ—Ä–µ–π–º—ã –¥–ª—è —Å–±–æ—Ä–∞')
    parser.add_argument('--start', required=True,
                       help='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--end', required=True,
                       help='–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    parser.add_argument('--db', default='data/sol_iv.db',
                       help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫
    collector = DataCollector(args.db)
    
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª
    symbol = args.pair.replace('/', '') if '/' in args.pair else args.pair
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä
    results = collector.collect_all_timeframes(
        args.market, symbol, args.tf, args.start, args.end
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–±–æ—Ä–∞:")
    for tf, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        logger.info(f"{status} {tf} ({collector.SUPPORTED_TIMEFRAMES[tf]})")

if __name__ == "__main__":
    main()
