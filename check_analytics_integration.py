#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
–ó–∞–¥–∞—á–∞ S-13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""

import sys
import os
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append('.')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('analytics_integration_test.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def test_signal_validation():
    """–¢–µ—Å—Ç 1: –û–Ω–ª–∞–π–Ω-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç 1: –û–Ω–ª–∞–π–Ω-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–æ–¥—É–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        import sqlite3
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        conn = sqlite3.connect('data/sol_iv.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS signal_validation (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                signal_time DATETIME,
                execution_time DATETIME,
                execution_price REAL,
                result TEXT,
                latency_ms INTEGER
            )
        ''')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
        test_data = (
            '2025-09-05 10:30:00',
            '2025-09-05 10:30:01',
            100.50,
            'profit',
            1000
        )
        
        cursor.execute('''
            INSERT INTO signal_validation 
            (signal_time, execution_time, execution_price, result, latency_ms)
            VALUES (?, ?, ?, ?, ?)
        ''', test_data)
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å—Ç–∞–≤–∫—É
        cursor.execute('SELECT COUNT(*) FROM signal_validation')
        count = cursor.fetchone()[0]
        
        if count > 0:
            logger.info("‚úÖ –û–Ω–ª–∞–π–Ω-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            conn.close()
            return True
        else:
            logger.error("‚ùå –û–Ω–ª–∞–π–Ω-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            conn.close()
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return False

def test_contextual_formulas():
    """–¢–µ—Å—Ç 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã"""
    logger.info("üß™ –¢–µ—Å—Ç 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã")
    
    try:
        from engine.formulas import formula_catalog
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ —Ä–µ–∂–∏–º—ã
        regimes = {
            "trend": "F05",    # momentum_enhanced
            "flat": "F01",     # volatility_focused
            "panic": "F19",    # skew_vol_blend
            "exp_growth": "F15", # hybrid_mom
            "neutral": "F04"   # balanced_approach
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—É–ª –ø–æ —Ä–µ–∂–∏–º–∞–º
        for regime, expected_formula in regimes.items():
            formula = formula_catalog.get_formula(expected_formula)
            if formula:
                logger.info(f"‚úÖ –†–µ–∂–∏–º '{regime}': —Ñ–æ—Ä–º—É–ª–∞ {expected_formula} ({formula['name']})")
            else:
                logger.error(f"‚ùå –†–µ–∂–∏–º '{regime}': —Ñ–æ—Ä–º—É–ª–∞ {expected_formula} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return False
        
        logger.info("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª: {e}")
        return False

def test_formula_knowledge_base():
    """–¢–µ—Å—Ç 3: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º"""
    logger.info("üß™ –¢–µ—Å—Ç 3: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º")
    
    try:
        import sqlite3
        
        conn = sqlite3.connect('data/sol_iv.db')
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Ñ–æ—Ä–º—É–ª
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS formulas_extended (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                formula_id TEXT UNIQUE,
                name TEXT,
                description TEXT,
                version TEXT DEFAULT '1.0',
                test_results TEXT,
                active_from DATETIME,
                active_to DATETIME,
                performance_score REAL,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_formulas = [
            ('F01', 'volatility_focused', '–§–æ–∫—É—Å –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏', '1.0', '{"sharpe": 0.5}', '2025-01-01', '2025-12-31', 0.8),
            ('F05', 'momentum_enhanced', '–£–ª—É—á—à–µ–Ω–Ω—ã–π momentum', '1.0', '{"sharpe": 0.7}', '2025-01-01', '2025-12-31', 0.9),
            ('F19', 'skew_vol_blend', '–°–º–µ—Å—å skew –∏ volatility', '1.0', '{"sharpe": 0.6}', '2025-01-01', '2025-12-31', 0.85)
        ]
        
        for formula_data in test_formulas:
            cursor.execute('''
                INSERT OR REPLACE INTO formulas_extended
                (formula_id, name, description, version, test_results, active_from, active_to, performance_score)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', formula_data)
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute('SELECT COUNT(*) FROM formulas_extended')
        count = cursor.fetchone()[0]
        
        if count >= 3:
            logger.info(f"‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º —Ä–∞–±–æ—Ç–∞–µ—Ç! ({count} —Ñ–æ—Ä–º—É–ª)")
            conn.close()
            return True
        else:
            logger.error("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            conn.close()
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def test_market_regime_classifier():
    """–¢–µ—Å—Ç 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    logger.info("üß™ –¢–µ—Å—Ç 4: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤")
    
    try:
        import sqlite3
        import pandas as pd
        
        conn = sqlite3.connect('data/sol_iv.db')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        query = """
        SELECT s.time, s.close as spot_price, i.iv_30d, b.basis_rel, 
               ABS(s.close - LAG(s.close, 1) OVER (ORDER BY s.time)) / LAG(s.close, 1) OVER (ORDER BY s.time) as volatility
        FROM spot_data s
        LEFT JOIN iv_agg_realistic i ON s.time = i.time
        LEFT JOIN basis_agg_realistic b ON s.time = b.time
        WHERE s.time BETWEEN '2025-01-01' AND '2025-01-31'
        ORDER BY s.time
        LIMIT 1000
        """
        
        df = pd.read_sql_query(query, conn)
        
        if len(df) > 0:
            # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∂–∏–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            df['regime'] = 'neutral'
            df.loc[df['volatility'] > df['volatility'].quantile(0.8), 'regime'] = 'panic'
            df.loc[df['volatility'] < df['volatility'].quantile(0.2), 'regime'] = 'flat'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤
            regime_counts = df['regime'].value_counts()
            
            if len(regime_counts) >= 2:
                logger.info(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                logger.info(f"üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤: {dict(regime_counts)}")
                conn.close()
                return True
            else:
                logger.error("‚ùå –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                conn.close()
                return False
        else:
            logger.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞!")
            conn.close()
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞: {e}")
        return False

def test_formula_comparison():
    """–¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª"""
    logger.info("üß™ –¢–µ—Å—Ç 5: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª")
    
    try:
        from engine.formulas import formula_catalog
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ä–º—É–ª—ã
        all_formulas = formula_catalog.get_all_formulas()
        
        if len(all_formulas) >= 20:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            comparison_data = []
            
            for formula_id, formula_info in all_formulas.items():
                comparison_data.append({
                    'formula_id': formula_id,
                    'name': formula_info['name'],
                    'description': formula_info['description'],
                    'complexity': len(formula_info.get('params', {})),
                    'category': formula_info.get('category', 'general')
                })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ñ–æ—Ä–º—É–ª
            categories = set(item['category'] for item in comparison_data)
            complexities = [item['complexity'] for item in comparison_data]
            
            if len(categories) >= 1 and len(set(complexities)) >= 1:
                logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª —Ä–∞–±–æ—Ç–∞–µ—Ç! ({len(all_formulas)} —Ñ–æ—Ä–º—É–ª)")
                logger.info(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {list(categories)}")
                logger.info(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {min(complexities)}-{max(complexities)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                return True
            else:
                logger.error("‚ùå –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return False
        else:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–æ—Ä–º—É–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª: {e}")
        return False

def run_analytics_integration_test():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
    logger.info(f"üìÖ –í—Ä–µ–º—è: {datetime.now()}")
    
    tests = [
        ("–û–Ω–ª–∞–π–Ω-–≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤", test_signal_validation),
        ("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º—ã–µ —Ñ–æ—Ä–º—É–ª—ã", test_contextual_formulas),
        ("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–∞–º", test_formula_knowledge_base),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤", test_market_regime_classifier),
        ("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª", test_formula_comparison)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    logger.info("üìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:")
    passed_tests = sum(results.values())
    total_tests = len(results)
    success_rate = (passed_tests / total_tests) * 100
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"   {test_name}: {status}")
    
    logger.info(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} ({success_rate:.1f}%)")
    
    if success_rate >= 80:
        logger.info("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–†–û–ô–î–ï–ù–ê!")
        return True
    else:
        logger.error("‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô –ê–ù–ê–õ–ò–¢–ò–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê!")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = run_analytics_integration_test()
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return 0
        else:
            logger.error("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ!")
            return 1
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
