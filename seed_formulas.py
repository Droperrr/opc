#!/usr/bin/env python3
"""
–§–æ—Ä–º—É–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞—Ö S-03
"""

import sqlite3
import pandas as pd
from logger import get_logger

logger = get_logger()

class FormulaSeeder:
    def __init__(self):
        self.db_path = 'data/sol_iv.db'
        
    def create_formulas_table(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ñ–æ—Ä–º—É–ª –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–æ—Ä–º—É–ª
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS formulas (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    formula_text TEXT NOT NULL,
                    parameters TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT 1
                )
            ''')
            
            conn.commit()
            conn.close()
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ formulas —Å–æ–∑–¥–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ñ–æ—Ä–º—É–ª: {e}")
    
    def insert_formulas(self):
        """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º—É–ª—ã –≤ –ë–î"""
        formulas = [
            {
                'name': 'IV_skew_weighted',
                'description': '–í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ IV –∏ skew',
                'formula_text': 'Y = 0.4*iv + 0.35*skew + 0.15*basis_rel + 0.1*oi_ratio',
                'parameters': '{"iv_weight": 0.4, "skew_weight": 0.35, "basis_weight": 0.15, "oi_weight": 0.1}'
            },
            {
                'name': 'spread_dominant',
                'description': '–§–æ—Ä–º—É–ª–∞ —Å –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º spread –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                'formula_text': 'Y = 0.5*iv + 0.3*skew - 0.2*basis_rel',
                'parameters': '{"iv_weight": 0.5, "skew_weight": 0.3, "basis_weight": -0.2}'
            },
            {
                'name': 'volatility_focused',
                'description': '–§–æ–∫—É—Å –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ OI',
                'formula_text': 'Y = 0.6*iv + 0.25*oi_ratio + 0.15*skew',
                'parameters': '{"iv_weight": 0.6, "oi_weight": 0.25, "skew_weight": 0.15}'
            },
            {
                'name': 'balanced_approach',
                'description': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                'formula_text': 'Y = 0.3*iv + 0.3*skew + 0.2*basis_rel + 0.2*oi_ratio',
                'parameters': '{"iv_weight": 0.3, "skew_weight": 0.3, "basis_weight": 0.2, "oi_weight": 0.2}'
            },
            {
                'name': 'momentum_based',
                'description': '–§–æ—Ä–º—É–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–º–µ–Ω—Ç—É–º–∞ IV –∏ skew',
                'formula_text': 'Y = 0.4*iv_momentum + 0.4*skew_momentum + 0.2*oi_ratio',
                'parameters': '{"iv_momentum_weight": 0.4, "skew_momentum_weight": 0.4, "oi_weight": 0.2}'
            }
        ]
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            for formula in formulas:
                cursor.execute('''
                    INSERT OR REPLACE INTO formulas (name, description, formula_text, parameters)
                    VALUES (?, ?, ?, ?)
                ''', (formula['name'], formula['description'], formula['formula_text'], formula['parameters']))
            
            conn.commit()
            conn.close()
            logger.info(f"‚úÖ –í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(formulas)} —Ñ–æ—Ä–º—É–ª")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ —Ñ–æ—Ä–º—É–ª: {e}")
    
    def get_formulas(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            df = pd.read_sql_query('''
                SELECT id, name, description, formula_text, parameters 
                FROM formulas 
                WHERE is_active = 1
                ORDER BY name
            ''', conn)
            conn.close()
            return df
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª: {e}")
            return pd.DataFrame()
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        try:
            logger.info("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤...")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.create_formulas_table()
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É–ª—ã
            self.insert_formulas()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            formulas = self.get_formulas()
            logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ —Ñ–æ—Ä–º—É–ª: {len(formulas)}")
            
            for _, formula in formulas.iterrows():
                logger.info(f"  - {formula['name']}: {formula['description']}")
            
            logger.info("‚úÖ –§–æ—Ä–º—É–ª—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª: {e}")

if __name__ == "__main__":
    seeder = FormulaSeeder()
    seeder.run()
