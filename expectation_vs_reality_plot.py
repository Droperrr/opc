#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ Expectation vs Reality
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from datetime import datetime, timedelta
import logging
from typing import List, Dict, Any, Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from compatibility import safe_float, safe_mean, safe_std, safe_array, safe_sqrt
from prediction_layer import PredictionLayer
from error_monitor import ErrorMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

def create_sample_data(days: int = 30, points_per_day: int = 24) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    
    Args:
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        points_per_day: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å
        
    Returns:
        pd.DataFrame: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    logger.info(f"üîÆ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {days} –¥–Ω–µ–π, {points_per_day} —Ç–æ—á–µ–∫/–¥–µ–Ω—å")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏
    np.random.seed(42)
    base_price = 100.0
    trend = 0.001  # –ù–µ–±–æ–ª—å—à–æ–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
    volatility = 0.02
    noise_level = 0.01
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
    start_time = datetime.now() - timedelta(days=days)
    timestamps = []
    for day in range(days):
        for hour in range(0, 24, 24 // points_per_day):
            timestamp = start_time + timedelta(days=day, hours=hour)
            timestamps.append(timestamp)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω
    prices = []
    for i, timestamp in enumerate(timestamps):
        # –ë–∞–∑–æ–≤—ã–π —Ç—Ä–µ–Ω–¥
        trend_component = base_price + trend * i
        
        # –°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–¥–Ω–µ–≤–Ω—ã–µ —Ü–∏–∫–ª—ã)
        hour = timestamp.hour
        seasonal_component = 0.5 * np.sin(2 * np.pi * hour / 24)
        
        # –°–ª—É—á–∞–π–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        random_component = np.random.normal(0, volatility * base_price)
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞
        price = trend_component + seasonal_component + random_component
        prices.append(max(price, 1.0))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 1.0
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
    df = pd.DataFrame({
        'timestamp': timestamps,
        'price': prices,
        'volatility': [volatility] * len(prices)
    })
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(df)} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö")
    return df

def generate_predictions(df: pd.DataFrame, method: str = 'simple_moving_average') -> pd.DataFrame:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        df: DataFrame —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        method: –ú–µ—Ç–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        pd.DataFrame: –î–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    """
    logger.info(f"üîÆ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –º–µ—Ç–æ–¥–æ–º {method}")
    
    predictor = PredictionLayer(window_size=10)
    
    predictions = []
    confidences = []
    
    for i in range(10, len(df)):  # –ù–∞—á–∏–Ω–∞–µ–º —Å 10-–π —Ç–æ—á–∫–∏ –¥–ª—è –æ–∫–Ω–∞
        historical_prices = df['price'].iloc[:i].values
        
        # –ü—Ä–æ–≥–Ω–æ–∑
        prediction = predictor.predict_next_price(historical_prices, method)
        predictions.append(prediction)
        
        # –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = predictor.calculate_prediction_confidence(historical_prices, method)
        confidences.append(confidence)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –∫ –¥–∞–Ω–Ω—ã–º
    df_with_predictions = df.copy()
    df_with_predictions['prediction'] = np.nan
    df_with_predictions['confidence'] = np.nan
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã
    for i, (pred, conf) in enumerate(zip(predictions, confidences)):
        df_with_predictions.iloc[10 + i, df_with_predictions.columns.get_loc('prediction')] = pred
        df_with_predictions.iloc[10 + i, df_with_predictions.columns.get_loc('confidence')] = conf
    
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(predictions)} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    return df_with_predictions

def plot_expectation_vs_reality(df: pd.DataFrame, title: str = "Expectation vs Reality") -> go.Figure:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ Expectation vs Reality
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∞—Ñ–∏–∫–∞
        
    Returns:
        go.Figure: –ì—Ä–∞—Ñ–∏–∫ Plotly
    """
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ Expectation vs Reality")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    df_with_predictions = df.dropna(subset=['prediction'])
    
    if len(df_with_predictions) == 0:
        logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return go.Figure()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig = make_subplots(
        rows=3, cols=1,
        subplot_titles=[
            "–¶–µ–Ω—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã",
            "–û—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è",
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö"
        ],
        vertical_spacing=0.08,
        row_heights=[0.5, 0.3, 0.2]
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –¶–µ–Ω—ã –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã
    fig.add_trace(
        go.Scatter(
            x=df_with_predictions['timestamp'],
            y=df_with_predictions['price'],
            mode='lines',
            name='–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞',
            line=dict(color='blue', width=2),
            hovertemplate='<b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞</b><br>' +
                         '–í—Ä–µ–º—è: %{x}<br>' +
                         '–¶–µ–Ω–∞: %{y:.2f}<br>' +
                         '<extra></extra>'
        ),
        row=1, col=1
    )
    
    fig.add_trace(
        go.Scatter(
            x=df_with_predictions['timestamp'],
            y=df_with_predictions['prediction'],
            mode='lines',
            name='–ü—Ä–æ–≥–Ω–æ–∑',
            line=dict(color='red', width=2, dash='dash'),
            hovertemplate='<b>–ü—Ä–æ–≥–Ω–æ–∑</b><br>' +
                         '–í—Ä–µ–º—è: %{x}<br>' +
                         '–ü—Ä–æ–≥–Ω–æ–∑: %{y:.2f}<br>' +
                         '<extra></extra>'
        ),
        row=1, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –û—à–∏–±–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    errors = np.abs(df_with_predictions['price'] - df_with_predictions['prediction'])
    relative_errors = errors / df_with_predictions['price'] * 100
    
    fig.add_trace(
        go.Scatter(
            x=df_with_predictions['timestamp'],
            y=relative_errors,
            mode='lines+markers',
            name='–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ (%)',
            line=dict(color='orange', width=1),
            marker=dict(size=4),
            hovertemplate='<b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞</b><br>' +
                         '–í—Ä–µ–º—è: %{x}<br>' +
                         '–û—à–∏–±–∫–∞: %{y:.2f}%<br>' +
                         '<extra></extra>'
        ),
        row=2, col=1
    )
    
    # –ì—Ä–∞—Ñ–∏–∫ 3: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö
    fig.add_trace(
        go.Scatter(
            x=df_with_predictions['timestamp'],
            y=df_with_predictions['confidence'],
            mode='lines+markers',
            name='–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
            line=dict(color='green', width=1),
            marker=dict(size=4),
            hovertemplate='<b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ</b><br>' +
                         '–í—Ä–µ–º—è: %{x}<br>' +
                         '–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %{y:.3f}<br>' +
                         '<extra></extra>'
        ),
        row=3, col=1
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫–µ—Ç–∞
    fig.update_layout(
        title={
            'text': title,
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 20}
        },
        height=800,
        showlegend=True,
        hovermode='x unified',
        template='plotly_white'
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig.update_xaxes(title_text="–í—Ä–µ–º—è", row=3, col=1)
    fig.update_yaxes(title_text="–¶–µ–Ω–∞", row=1, col=1)
    fig.update_yaxes(title_text="–û—à–∏–±–∫–∞ (%)", row=2, col=1)
    fig.update_yaxes(title_text="–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", row=3, col=1)
    
    logger.info("‚úÖ –ì—Ä–∞—Ñ–∏–∫ Expectation vs Reality —Å–æ–∑–¥–∞–Ω")
    return fig

def create_error_analysis_table(df: pd.DataFrame) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
    
    Args:
        df: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
        
    Returns:
        pd.DataFrame: –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
    """
    logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
    df_with_predictions = df.dropna(subset=['prediction'])
    
    if len(df_with_predictions) == 0:
        return pd.DataFrame()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—à–∏–±–æ–∫
    errors = np.abs(df_with_predictions['price'] - df_with_predictions['prediction'])
    relative_errors = errors / df_with_predictions['price'] * 100
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
    analysis_table = pd.DataFrame({
        'timestamp': df_with_predictions['timestamp'],
        'actual_price': df_with_predictions['price'],
        'predicted_price': df_with_predictions['prediction'],
        'absolute_error': errors,
        'relative_error_percent': relative_errors,
        'confidence': df_with_predictions['confidence']
    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        'metric': ['MAE', 'RMSE', 'MAPE', 'Max Error', 'Min Error', 'Avg Confidence'],
        'value': [
            safe_mean(errors),
            safe_sqrt(safe_mean(errors ** 2)),
            safe_mean(relative_errors),
            float(np.max(errors)),
            float(np.min(errors)),
            safe_mean(df_with_predictions['confidence'])
        ]
    }
    
    stats_df = pd.DataFrame(stats)
    
    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ —Å–æ–∑–¥–∞–Ω–∞")
    return analysis_table, stats_df

def save_plot_to_html(fig: go.Figure, filename: str = "expectation_vs_reality.html"):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ HTML —Ñ–∞–π–ª
    
    Args:
        fig: –ì—Ä–∞—Ñ–∏–∫ Plotly
        filename: –ò–º—è —Ñ–∞–π–ª–∞
    """
    try:
        fig.write_html(filename)
        logger.info(f"‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

def demo_expectation_vs_reality():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ Expectation vs Reality"""
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Expectation vs Reality")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = create_sample_data(days=7, points_per_day=12)  # 7 –¥–Ω–µ–π, 12 —Ç–æ—á–µ–∫ –≤ –¥–µ–Ω—å
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        df_with_predictions = generate_predictions(df, 'simple_moving_average')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        fig = plot_expectation_vs_reality(df_with_predictions, "SOL/USDT: Expectation vs Reality")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        save_plot_to_html(fig, "expectation_vs_reality_demo.html")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–Ω–∞–ª–∏–∑–∞
        analysis_table, stats_df = create_error_analysis_table(df_with_predictions)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        analysis_table.to_csv("error_analysis_table.csv", index=False)
        stats_df.to_csv("error_statistics.csv", index=False)
        
        logger.info("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:")
        for _, row in stats_df.iterrows():
            print(f"   {row['metric']}: {row['value']:.4f}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    logging.basicConfig(level=logging.INFO)
    
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ Expectation vs Reality...")
    
    success = demo_expectation_vs_reality()
    
    if success:
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ Expectation vs Reality —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("üìÅ –§–∞–π–ª—ã:")
        print("   - expectation_vs_reality_demo.html")
        print("   - error_analysis_table.csv")
        print("   - error_statistics.csv")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
