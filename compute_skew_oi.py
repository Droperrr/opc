#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ IV –∏ OI –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞–º
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import timedelta
from logger import get_logger

logger = get_logger()

TIMEFRAMES = ['1m', '15m', '1h']

def resample_to_interval(df, interval):
    """–†–µ—Å–µ–º–ø–ª–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∏–Ω—Ç–µ—Ä–≤–∞–ª—É"""
    # df.time is datetime
    if interval == '1m':
        rule = 'T'
    elif interval == '15m':
        rule = '15T'
    elif interval == '1h':
        rule = 'H'
    else:
        raise ValueError(interval)
    
    df = df.set_index('timestamp').resample(rule).agg({
        'mark_iv': 'mean',
        'underlying_price': 'last',
        'symbol': 'count',  # count of samples
        'open_interest': 'sum',
        'skew': 'mean'
    }).rename(columns={'symbol': 'samples'})
    
    df = df.reset_index()
    return df

def compute_agg(db_path='data/options_enriched.db', timeframe='15m', out_table='iv_agg'):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç—ã IV –∏ OI –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞"""
    logger.info(f"üöÄ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}")
    
    try:
        conn = sqlite3.connect(db_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='options_enriched'")
        if not cursor.fetchone():
            logger.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ options_enriched –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        sql = "SELECT timestamp, symbol, mark_iv, underlying_price, open_interest, skew, option_type FROM options_enriched"
        df = pd.read_sql_query(sql, conn, parse_dates=['timestamp'])
        
        if df.empty:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ options_enriched")
            return None
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π")
        
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ
        df['mark_iv'] = pd.to_numeric(df['mark_iv'], errors='coerce')
        df['open_interest'] = pd.to_numeric(df['open_interest'], errors='coerce').fillna(0)
        df['skew'] = pd.to_numeric(df['skew'], errors='coerce').fillna(0)
        
        # –†–µ—Å–µ–º–ø–ª–∏—Ä—É–µ–º –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Ç–∞–π–º—Ñ—Ä–µ–π–º—É
        df_res = resample_to_interval(df, timeframe)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        df_res['iv_mean_all'] = df_res['mark_iv']
        df_res['timeframe'] = timeframe
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ IV –ø–æ call/put –æ—Ç–¥–µ–ª—å–Ω–æ
        call_mean = df[df['option_type'] == 'C'].groupby(df['timestamp'].dt.floor({
            '1m': 'T', '15m': '15T', '1h': 'H'
        }[timeframe]))['mark_iv'].mean().rename('iv_call_mean')
        
        put_mean = df[df['option_type'] == 'P'].groupby(df['timestamp'].dt.floor({
            '1m': 'T', '15m': '15T', '1h': 'H'
        }[timeframe]))['mark_iv'].mean().rename('iv_put_mean')
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        df_res = df_res.merge(call_mean, left_on='timestamp', right_index=True, how='left')
        df_res = df_res.merge(put_mean, left_on='timestamp', right_index=True, how='left')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
        df_res['iv_call_mean'] = df_res['iv_call_mean'].fillna(df_res['iv_mean_all'])
        df_res['iv_put_mean'] = df_res['iv_put_mean'].fillna(df_res['iv_mean_all'])
        
        # –í—ã—á–∏—Å–ª—è–µ–º skew
        df_res['skew'] = df_res['iv_put_mean'] - df_res['iv_call_mean']
        
        # –í—ã—á–∏—Å–ª—è–µ–º OI –ø–æ –≥—Ä—É–ø–ø–∞–º
        oi_call = df[df['option_type'] == 'C'].groupby(df['timestamp'].dt.floor({
            '1m': 'T', '15m': '15T', '1h': 'H'
        }[timeframe]))['open_interest'].sum().rename('oi_call_total')
        
        oi_put = df[df['option_type'] == 'P'].groupby(df['timestamp'].dt.floor({
            '1m': 'T', '15m': '15T', '1h': 'H'
        }[timeframe]))['open_interest'].sum().rename('oi_put_total')
        
        df_res = df_res.merge(oi_call, left_on='timestamp', right_index=True, how='left')
        df_res = df_res.merge(oi_put, left_on='timestamp', right_index=True, how='left')
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ OI
        df_res['oi_call_total'] = df_res['oi_call_total'].fillna(0)
        df_res['oi_put_total'] = df_res['oi_put_total'].fillna(0)
        
        # –í—ã—á–∏—Å–ª—è–µ–º OI ratio
        df_res['oi_ratio'] = df_res.apply(
            lambda r: r['oi_call_total'] / (r['oi_call_total'] + r['oi_put_total']) 
            if (r['oi_call_total'] + r['oi_put_total']) > 0 else 0.5, 
            axis=1
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º skew percentile (–ø–æ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏)
        df_res['skew_percentile'] = df_res['skew'].rank(pct=True)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        df_res = df_res.drop(['mark_iv', 'open_interest'], axis=1, errors='ignore')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        df_res.to_sql(out_table, conn, if_exists='replace', index=False)
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(df_res)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É {out_table}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        logger.info(f"üìã –ü—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –¥–ª—è {timeframe}:")
        print(df_res.head(5).to_string(index=False))
        
        conn.close()
        return df_res
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤: {e}")
        return None

def compute_all_timeframes():
    """–í—ã—á–∏—Å–ª—è–µ—Ç –∞–≥—Ä–µ–≥–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
    logger.info("üöÄ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤")
    
    results = {}
    
    for timeframe in TIMEFRAMES:
        logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        result = compute_agg(timeframe=timeframe, out_table=f'iv_agg_{timeframe}')
        if result is not None:
            results[timeframe] = result
    
    return results

def export_aggregates_sample():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –≤ CSV"""
    try:
        conn = sqlite3.connect('data/options_enriched.db')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
        all_data = []
        
        for timeframe in TIMEFRAMES:
            table_name = f'iv_agg_{timeframe}'
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            cursor = conn.cursor()
            cursor.execute(f"SELECT name FROM sqlite_master WHERE type='table' AND name='{table_name}'")
            
            if cursor.fetchone():
                df = pd.read_sql_query(f"SELECT * FROM {table_name}", conn)
                df['timeframe'] = timeframe
                all_data.append(df)
        
        if all_data:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            combined_df = pd.concat(all_data, ignore_index=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            csv_filename = 'iv_aggregates_sample.csv'
            combined_df.to_csv(csv_filename, index=False)
            
            logger.info(f"üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(combined_df)} –∑–∞–ø–∏—Å–µ–π –≤ {csv_filename}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã –∞–≥—Ä–µ–≥–∞—Ç–æ–≤:")
            print(combined_df.head(10).to_string(index=False))
            
            return combined_df
        
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤: {e}")
        return None

def run_computation_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤"""
    logger.info("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ IV –∏ OI")
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    results = compute_all_timeframes()
    
    if results:
        logger.info("‚úÖ –ê–≥—Ä–µ–≥–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—á–∏—Å–ª–µ–Ω—ã")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã
        sample_data = export_aggregates_sample()
        
        if sample_data is not None:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤:")
            for timeframe, df in results.items():
                print(f"{timeframe}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                if len(df) > 0:
                    print(f"  –°—Ä–µ–¥–Ω—è—è IV: {df['iv_mean_all'].mean():.4f}")
                    print(f"  –°—Ä–µ–¥–Ω–∏–π Skew: {df['skew'].mean():.4f}")
                    print(f"  –°—Ä–µ–¥–Ω–∏–π OI ratio: {df['oi_ratio'].mean():.3f}")
    
    logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
    run_computation_demo()
