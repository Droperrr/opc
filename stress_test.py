#!/usr/bin/env python3
"""
–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑–∫–∏—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import psutil
import os
import logging
from typing import Dict, List, Any, Tuple
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def create_high_volatility_data(base_price: float = 200.0, periods: int = 1000) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é"""
    np.random.seed(42)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é (5-15% –≤ —á–∞—Å)
    returns = np.random.normal(0, 0.05, periods)  # 5% –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
    prices = [base_price]
    
    for i in range(1, periods):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∫–∞—á–∫–∏
        trend = 0.001 * np.sin(i / 100)  # –ù–µ–±–æ–ª—å—à–æ–π —Ç—Ä–µ–Ω–¥
        jump = np.random.choice([0, 0.1, -0.1], p=[0.8, 0.1, 0.1])  # 10% —Å–∫–∞—á–∫–∏
        new_price = prices[-1] * (1 + returns[i] + trend + jump)
        prices.append(max(new_price, 1.0))  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ 1.0
    
    # –°–æ–∑–¥–∞–µ–º DataFrame
    timestamps = [datetime.now() - timedelta(minutes=i) for i in range(periods, 0, -1)]
    
    df = pd.DataFrame({
        'time': timestamps,
        'spot_price': prices,
        'high': [p * 1.02 for p in prices],  # +2% –º–∞–∫—Å–∏–º—É–º
        'low': [p * 0.98 for p in prices],   # -2% –º–∏–Ω–∏–º—É–º
        'open': prices,
        'close': prices,
        'volume': np.random.uniform(1000, 10000, periods),
        'iv': np.random.uniform(0.8, 2.0, periods),  # –í—ã—Å–æ–∫–∞—è IV (80-200%)
        'skew': np.random.uniform(-0.5, 0.5, periods),  # –®–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω skew
        'basis_rel': np.random.uniform(-0.1, 0.1, periods)  # –®–∏—Ä–æ–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω basis
    })
    
    return df

def create_crash_scenario_data(base_price: float = 200.0, periods: int = 1000) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è –∫—Ä–∞—Ö–∞ —Ä—ã–Ω–∫–∞"""
    np.random.seed(123)  # –î–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
    
    prices = [base_price]
    crash_start = periods // 2  # –ö—Ä–∞—Ö –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–µ—Ä–∏–æ–¥–∞
    
    for i in range(1, periods):
        if i < crash_start:
            # –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫
            change = np.random.normal(0, 0.01)
        elif i < crash_start + 50:
            # –ö—Ä–∞—Ö: -30% –∑–∞ 50 –ø–µ—Ä–∏–æ–¥–æ–≤
            change = -0.006  # -0.6% –∑–∞ –ø–µ—Ä–∏–æ–¥
        else:
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            change = np.random.normal(0.002, 0.02)  # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
        
        new_price = prices[-1] * (1 + change)
        prices.append(max(new_price, 1.0))
    
    timestamps = [datetime.now() - timedelta(minutes=i) for i in range(periods, 0, -1)]
    
    df = pd.DataFrame({
        'time': timestamps,
        'spot_price': prices,
        'high': [p * 1.01 for p in prices],
        'low': [p * 0.99 for p in prices],
        'open': prices,
        'close': prices,
        'volume': np.random.uniform(5000, 50000, periods),  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º
        'iv': np.random.uniform(1.5, 3.0, periods),  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è IV
        'skew': np.random.uniform(-1.0, 1.0, periods),  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π skew
        'basis_rel': np.random.uniform(-0.2, 0.2, periods)  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π basis
    })
    
    return df

def test_formula_engine_stress(data: pd.DataFrame, scenario_name: str):
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Formula Engine"""
    print(f"\nüîß –°–¢–†–ï–°–°-–¢–ï–°–¢ FORMULA ENGINE: {scenario_name}")
    print("-" * 50)
    
    try:
        from formula_engine import FormulaEngine
        from compatibility import safe_float
        
        engine = FormulaEngine()
        
        # –¢–µ—Å—Ç 1: –†–∞—Å—á–µ—Ç ATR –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        atr = engine.calculate_atr(data)
        valid_atr = atr.dropna()
        
        if len(valid_atr) > 0:
            max_atr = valid_atr.max()
            min_atr = valid_atr.min()
            mean_atr = valid_atr.mean()
            
            print(f"‚úÖ ATR –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:")
            print(f"   –ú–∞–∫—Å–∏–º—É–º: {max_atr:.6f}")
            print(f"   –ú–∏–Ω–∏–º—É–º: {min_atr:.6f}")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ: {mean_atr:.6f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ATR –Ω–µ –≤–∑—Ä—ã–≤–∞–µ—Ç—Å—è
            assert max_atr < 100.0, f"ATR —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {max_atr}"
            assert min_atr > 0.0, f"ATR –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π: {min_atr}"
        
        # –¢–µ—Å—Ç 2: –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        extreme_volatilities = [0.01, 0.05, 0.1, 0.2, 0.5]  # 1% –¥–æ 50%
        
        for vol in extreme_volatilities:
            threshold = engine.calculate_dynamic_threshold(vol)
            assert isinstance(threshold, float), f"–ü–æ—Ä–æ–≥ –Ω–µ float –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {vol}"
            assert threshold > 0, f"–ü–æ—Ä–æ–≥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {vol}"
            assert threshold < 10.0, f"–ü–æ—Ä–æ–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {vol}"
            print(f"‚úÖ –ü–æ—Ä–æ–≥ –¥–ª—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ {vol*100:.1f}%: {threshold:.4f}")
        
        # –¢–µ—Å—Ç 3: –§–æ—Ä–º—É–ª–∞ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        extreme_data_points = [
            {"iv": 0.01, "skew": 0.0, "basis_rel": 0.0},      # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            {"iv": 0.5, "skew": 0.0, "basis_rel": 0.0},       # –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            {"iv": 2.0, "skew": 0.0, "basis_rel": 0.0},       # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            {"iv": 0.5, "skew": -1.0, "basis_rel": 0.0},      # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π skew
            {"iv": 0.5, "skew": 0.0, "basis_rel": 0.2},       # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π basis
            {"iv": 2.0, "skew": -1.0, "basis_rel": 0.2},      # –í—Å–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ
        ]
        
        for i, data_point in enumerate(extreme_data_points):
            Y = (
                0.92 * safe_float(data_point["iv"]) +
                0.65 * safe_float(data_point["skew"]) -
                1.87 * safe_float(data_point["basis_rel"])
            )
            
            assert isinstance(Y, float), f"–§–æ—Ä–º—É–ª–∞ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float –¥–ª—è —Ç–æ—á–∫–∏ {i}"
            assert not np.isnan(Y), f"–§–æ—Ä–º—É–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NaN –¥–ª—è —Ç–æ—á–∫–∏ {i}"
            assert not np.isinf(Y), f"–§–æ—Ä–º—É–ª–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inf –¥–ª—è —Ç–æ—á–∫–∏ {i}"
            print(f"‚úÖ –§–æ—Ä–º—É–ª–∞ –¥–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ {i}: Y={Y:.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ Formula Engine: {e}")
        return False

def test_error_monitor_stress(data: pd.DataFrame, scenario_name: str):
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Error Monitor"""
    print(f"\nüìä –°–¢–†–ï–°–°-–¢–ï–°–¢ ERROR MONITOR: {scenario_name}")
    print("-" * 50)
    
    try:
        from error_monitor import ErrorMonitor
        from datetime import datetime
        
        monitor = ErrorMonitor()
        
        # –¢–µ—Å—Ç 1: –ú–∞—Å—Å–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        start_time = time.time()
        
        for i in range(min(100, len(data))):
            predicted = data['spot_price'].iloc[i] * (1 + np.random.normal(0, 0.1))  # ¬±10% –æ—à–∏–±–∫–∞
            actual = data['spot_price'].iloc[i]
            volatility = data['iv'].iloc[i] if 'iv' in data.columns else 0.02
            
            monitor.update(datetime.now(), predicted, actual, volatility)
        
        update_time = time.time() - start_time
        print(f"‚úÖ –ú–∞—Å—Å–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: 100 –∑–∞–ø–∏—Å–µ–π –∑–∞ {update_time:.3f} —Å–µ–∫")
        
        # –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏
        extreme_errors = [
            (100.0, 200.0, 0.01),  # 100% –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            (200.0, 100.0, 0.01),  # -50% –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            (100.0, 150.0, 0.5),   # 50% –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            (150.0, 100.0, 0.5),   # -33% –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        ]
        
        for predicted, actual, volatility in extreme_errors:
            monitor.update(datetime.now(), predicted, actual, volatility)
        
        print("‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = monitor.calculate_error_statistics()
        
        assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'mae' in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç MAE"
        assert 'rmse' in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç RMSE"
        assert 'max_error' in stats, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É"
        
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö:")
        print(f"   MAE: {stats.get('mae', 0):.4f}")
        print(f"   RMSE: {stats.get('rmse', 0):.4f}")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {stats.get('max_error', 0):.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ Error Monitor: {e}")
        return False

def test_block_detector_stress(data: pd.DataFrame, scenario_name: str):
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Block Detector"""
    print(f"\nüîç –°–¢–†–ï–°–°-–¢–ï–°–¢ BLOCK DETECTOR: {scenario_name}")
    print("-" * 50)
    
    try:
        from block_detector import BlockDetector
        
        detector = BlockDetector()
        
        # –¢–µ—Å—Ç 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        test_data = pd.DataFrame({
            'timestamp': data['time'].head(200),
            'error_absolute': abs(data['spot_price'].head(200) - data['spot_price'].head(200).mean()),
            'volatility': data['iv'].head(200) if 'iv' in data.columns else [0.02] * 200
        })
        
        # –†–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        thresholds = [0.5, 1.0, 2.0, 5.0]
        
        for threshold in thresholds:
            blocks = detector.detect_block_boundaries(test_data, threshold=threshold, window=50)
            
            assert isinstance(blocks, list), f"–ë–ª–æ–∫–∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º –¥–ª—è –ø–æ—Ä–æ–≥–∞ {threshold}"
            print(f"‚úÖ –ü–æ—Ä–æ–≥ {threshold}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤")
            
            if blocks:
                first_block = blocks[0]
                assert hasattr(first_block, 'block_type'), "–ë–ª–æ–∫ –Ω–µ –∏–º–µ–µ—Ç —Ç–∏–ø–∞"
                assert hasattr(first_block, 'confidence'), "–ë–ª–æ–∫ –Ω–µ –∏–º–µ–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
                print(f"   –ü–µ—Ä–≤—ã–π –±–ª–æ–∫: {first_block.block_type} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {first_block.confidence:.3f})")
        
        # –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        extreme_thresholds = [0.1, 10.0, 100.0]
        
        for threshold in extreme_thresholds:
            blocks = detector.detect_block_boundaries(test_data, threshold=threshold, window=50)
            print(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ {threshold}: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(blocks)} –±–ª–æ–∫–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ Block Detector: {e}")
        return False

def test_prediction_layer_stress(data: pd.DataFrame, scenario_name: str):
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prediction Layer"""
    print(f"\nüîÆ –°–¢–†–ï–°–°-–¢–ï–°–¢ PREDICTION LAYER: {scenario_name}")
    print("-" * 50)
    
    try:
        from prediction_layer import PredictionLayer
        
        predictor = PredictionLayer()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
        prices = data['spot_price'].head(50).tolist()
        
        methods = ['simple_moving_average', 'weighted_moving_average', 'exponential_smoothing', 'autoregression']
        
        for method in methods:
            try:
                result = predictor.predict_next_price(prices, method=method)
                
                assert isinstance(result, float), f"{method} –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç float"
                assert not np.isnan(result), f"{method} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç NaN"
                assert not np.isinf(result), f"{method} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç inf"
                assert result > 0, f"{method} –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                
                print(f"‚úÖ {method}: –ø—Ä–æ–≥–Ω–æ–∑={result:.4f}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è {method}: –æ—à–∏–±–∫–∞ - {e}")
        
        # –¢–µ—Å—Ç 2: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        extreme_prices = [
            [1.0, 1.0, 1.0, 1.0, 1.0],  # –í—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
            [1.0, 1000.0, 1.0, 1000.0, 1.0],  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Å–∫–∞—á–∫–∏
            [0.001, 0.001, 0.001, 0.001, 0.001],  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            [1e6, 1e6, 1e6, 1e6, 1e6],  # –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        ]
        
        for i, extreme_price_set in enumerate(extreme_prices):
            try:
                result = predictor.predict_next_price(extreme_price_set, method='simple_moving_average')
                print(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä {i}: –ø—Ä–æ–≥–Ω–æ–∑={result:.4f}")
            except Exception as e:
                print(f"‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä {i}: –æ—à–∏–±–∫–∞ - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ Prediction Layer: {e}")
        return False

def measure_memory_usage():
    """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    try:
        process = psutil.Process(os.getpid())
        memory_usage = process.memory_info().rss / 1024**3
        return memory_usage
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
        return 0.0

def run_stress_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤"""
    print("üî• –ó–ê–ü–£–°–ö –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´")
    print("="*80)
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    initial_memory = measure_memory_usage()
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {initial_memory:.2f} GB")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    scenarios = {
        "–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å": create_high_volatility_data(),
        "–ö—Ä–∞—Ö —Ä—ã–Ω–∫–∞": create_crash_scenario_data()
    }
    
    test_results = []
    
    for scenario_name, data in scenarios.items():
        print(f"\nüéØ –°–¶–ï–ù–ê–†–ò–ô: {scenario_name}")
        print(f"üìä –î–∞–Ω–Ω—ã—Ö: {len(data)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üí∞ –¶–µ–Ω–∞: {data['spot_price'].min():.2f} - {data['spot_price'].max():.2f}")
        print(f"üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {data['iv'].min():.2f} - {data['iv'].max():.2f}")
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_results = []
        
        scenario_results.append(("Formula Engine", test_formula_engine_stress(data, scenario_name)))
        scenario_results.append(("Error Monitor", test_error_monitor_stress(data, scenario_name)))
        scenario_results.append(("Block Detector", test_block_detector_stress(data, scenario_name)))
        scenario_results.append(("Prediction Layer", test_prediction_layer_stress(data, scenario_name)))
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario_passed = sum(1 for _, result in scenario_results if result)
        scenario_total = len(scenario_results)
        scenario_success = (scenario_passed / scenario_total) * 100
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è {scenario_name}:")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ: {scenario_passed}/{scenario_total} ({scenario_success:.1f}%)")
        
        test_results.extend(scenario_results)
    
    # –ò–∑–º–µ—Ä–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
    final_memory = measure_memory_usage()
    memory_increase = final_memory - initial_memory
    
    print("\n" + "="*80)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*80)
    
    # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    total_tests = len(test_results)
    passed_tests = sum(1 for _, result in test_results if result)
    success_rate = (passed_tests / total_tests) * 100
    
    print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed_tests}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total_tests - passed_tests}")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    print(f"\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
    print(f"   –ù–∞—á–∞–ª—å–Ω–æ–µ: {initial_memory:.2f} GB")
    print(f"   –§–∏–Ω–∞–ª—å–Ω–æ–µ: {final_memory:.2f} GB")
    print(f"   –ü—Ä–∏—Ä–æ—Å—Ç: {memory_increase:.2f} GB")
    
    if final_memory < 1.0:
        print("‚úÖ –ü–∞–º—è—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã (< 1.0 GB)")
    else:
        print("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –ø–∞–º—è—Ç–∏ (> 1.0 GB)")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    for test_name, result in test_results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"   {test_name}: {status}")
    
    return success_rate >= 75  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–æ–≤

if __name__ == "__main__":
    success = run_stress_tests()
    
    if success:
        print("\nüéâ –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ô–î–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –£–°–¢–û–ô–ß–ò–í–ê –ö –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–´–ú –£–°–õ–û–í–ò–Ø–ú!")
    else:
        print("\n‚ùå –°–¢–†–ï–°–°-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–í–ê–õ–ï–ù–û!")
        print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –£–õ–£–ß–®–ï–ù–ò–ï –£–°–¢–û–ô–ß–ò–í–û–°–¢–ò!")
    
    exit(0 if success else 1)
