import sqlite3
import pandas as pd
import requests
from datetime import datetime, timedelta
import time
from typing import Optional, List
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
BASE_URL = 'https://api.bybit.com'
SESSION = requests.Session()
SESSION.headers.update({
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
})

def get_funding_rate(symbol: str, start_time: str, end_time: str) -> Optional[List]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö funding rate –∏–∑ API Bybit.
    
    Args:
        symbol (str): –°–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOLUSDT)
        start_time (str): –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ timestamp (–º—Å)
        end_time (str): –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ timestamp (–º—Å)
        
    Returns:
        Optional[List]: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ funding rate –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        url = f"{BASE_URL}/v5/market/funding/history"
        
        params = {
            'category': 'linear',
            'symbol': symbol,
            'startTime': start_time,
            'endTime': end_time,
            'limit': 200
        }
        
        logger.info(f"üì° –ó–∞–ø—Ä–æ—Å funding rate: {symbol} {start_time} - {end_time}")
        
        response = SESSION.get(url, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        
        if data['retCode'] != 0:
            logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {data['retMsg']}")
            return None
        
        return data['result']['list']
        
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ funding rate: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ funding rate: {e}")
        return None

def extract_data():
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ spot_data –∏ futures_data –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤.
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('server_opc.db')
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É 6 –º–µ—Å—è—Ü–µ–≤ –Ω–∞–∑–∞–¥
    six_months_ago = datetime.now() - timedelta(days=6*30)  # –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ 6 –º–µ—Å—è—Ü–µ–≤
    six_months_ago_str = six_months_ago.strftime('%Y-%m-%d %H:%M:%S')
    
    # SQL-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    spot_query = f"""
    SELECT time, close as spot_price
    FROM spot_data
    WHERE timeframe = '1m' AND time >= '{six_months_ago_str}'
    ORDER BY time
    """
    
    futures_query = f"""
    SELECT time, close as futures_price
    FROM futures_data
    WHERE timeframe = '1m' AND time >= '{six_months_ago_str}'
    ORDER BY time
    """
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame
    spot_df = pd.read_sql_query(spot_query, conn)
    futures_df = pd.read_sql_query(futures_query, conn)
    
    conn.close()
    
    print("Spot Data Info:")
    print(spot_df.info())
    print("\nFutures Data Info:")
    print(futures_df.info())
    
    return spot_df, futures_df

def transform_data(spot_df, futures_df):
    """
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≤—ã—á–∏—Å–ª—è–µ—Ç basis_relative –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç funding_rate.
    """
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ DataFrame –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ
    merged_df = pd.merge(spot_df, futures_df, on='time', how='inner')
    
    # –†–∞—Å—á–µ—Ç basis_relative
    merged_df['basis_relative'] = (merged_df['futures_price'] - merged_df['spot_price']) / merged_df['spot_price']
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ funding_rate
    # –°–∏–º–≤–æ–ª —Ñ—å—é—á–µ—Ä—Å–∞ (–∂–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å–ª—É—á–∞–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º)
    symbol = "BTCUSDT"
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ timestamp
    merged_df['timestamp'] = pd.to_datetime(merged_df['time']).astype(int) // 10**9 * 1000  # –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ funding rate
    merged_df['date'] = pd.to_datetime(merged_df['time']).dt.date
    unique_dates = merged_df['date'].unique()
    
    funding_rates = {}
    
    for date in unique_dates:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–Ω—è
        start_dt = pd.Timestamp(date)
        end_dt = start_dt + pd.Timedelta(days=1)
        
        start_ts = int(start_dt.timestamp() * 1000)
        end_ts = int(end_dt.timestamp() * 1000)
        
        # –ü–æ–ª—É—á–∞–µ–º funding rate –¥–ª—è –¥–Ω—è
        funding_data = get_funding_rate(symbol, str(start_ts), str(end_ts))
        
        if funding_data:
            for item in funding_data:
                # –í—Ä–µ–º—è –≤ funding data –æ–±—ã—á–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
                funding_time = int(float(item['fundingRateTimestamp']) * 1000)
                funding_rate = float(item['fundingRate'])
                funding_rates[funding_time] = funding_rate
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö funding rate –¥–ª—è {date}")
        
        # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limit
        time.sleep(0.2)
    
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ funding_rate —Å –∑–∞–ø–∏—Å—è–º–∏
    def get_funding_for_timestamp(ts):
        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π funding rate
        # –¢–∞–∫ –∫–∞–∫ funding rate –æ–±—ã—á–Ω–æ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Ä–∞–∑ –≤ 8 —á–∞—Å–æ–≤,
        # –º—ã –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π funding rate –ø–µ—Ä–µ–¥ –¥–∞–Ω–Ω–æ–π –º–∏–Ω—É—Ç–æ–π
        ts_int = int(ts)
        closest_time = max([t for t in funding_rates.keys() if t <= ts_int], default=None)
        if closest_time is not None:
            return funding_rates[closest_time]
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—â–µ–º –±–ª–∏–∂–∞–π—à–µ–µ —Å–ª–µ–¥—É—é—â–µ–µ
            closest_time = min([t for t in funding_rates.keys() if t > ts_int], default=None)
            return funding_rates.get(closest_time, 0.0)
    
    merged_df['funding_rate'] = merged_df['timestamp'].apply(get_funding_for_timestamp)
    
    # –í—ã–±–æ—Ä –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    final_df = merged_df[['time', 'spot_price', 'futures_price', 'basis_relative', 'funding_rate']]
    
    print("\nTransformed Data Head:")
    print(final_df.head())
    
    return final_df

def load_data(df):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç DataFrame –≤ Parquet-—Ñ–∞–π–ª.
    """
    df.to_parquet('basis_raw_data_1m_btc.parquet', index=False)
    print("\nData loaded to basis_raw_data_1m_btc.parquet")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ETL –ø—Ä–æ—Ü–µ—Å—Å–∞.
    """
    # –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ
    spot_df, futures_df = extract_data()
    
    # –®–∞–≥ 2: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    transformed_df = transform_data(spot_df, futures_df)
    
    # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞
    load_data(transformed_df)

if __name__ == "__main__":
    main()