#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (Grid Search) –¥–ª—è —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
–ó–∞–¥–∞—á–∞ S-10: –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
"""

import numpy as np
import pandas as pd
import yaml
import json
import os
from datetime import datetime
from typing import Dict, List, Tuple, Any
import sys
sys.path.append('..')

from engine.formulas import formula_catalog
from search.coarse_search import CoarseSearch
from logger import get_logger

logger = get_logger()

class FineTune:
    def __init__(self, config_path: str = "config/experiment.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.config = self._load_config(config_path)
        self.results_dir = 'report_s10'
        self.coarse_searcher = CoarseSearch(config_path)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.results_dir, exist_ok=True)
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º seeds –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        np.random.seed(self.config['reproducibility']['numpy_seed'])
        
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def load_coarse_results(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        try:
            coarse_results_path = os.path.join(self.results_dir, 'coarse_search_results.csv')
            
            if not os.path.exists(coarse_results_path):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {coarse_results_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫...")
                return self.coarse_searcher.run_coarse_search()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            df = pd.read_csv(coarse_results_path)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
            results = []
            for _, row in df.iterrows():
                result = {
                    'formula_id': row['formula_id'],
                    'formula_name': row['formula_name'],
                    'params': json.loads(row['params']),
                    'metrics': {
                        'sharpe_ratio': row['sharpe_ratio'],
                        'profit_factor': row['profit_factor'],
                        'win_rate': row['win_rate'],
                        'max_drawdown': row['max_drawdown'],
                        'total_return': row['total_return'],
                        'volatility': row['volatility'],
                        'sortino_ratio': row['sortino_ratio'],
                        'calmar_ratio': row['calmar_ratio']
                    },
                    'score': row['score']
                }
                results.append(result)
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def create_grid_around(self, base_params: Dict[str, float], step: float = 0.05) -> List[Dict[str, float]]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ç–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–∫—Ä—É–≥ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        try:
            grid_params = []
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            for param_name, base_value in base_params.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                formula_id = None
                for fid, formula in formula_catalog.get_all_formulas().items():
                    if param_name in formula['params']:
                        formula_id = fid
                        break
                
                if formula_id:
                    param_range = formula_catalog.get_formula(formula_id)['params'][param_name]
                    min_val, max_val = param_range
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –≤–æ–∫—Ä—É–≥ –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
                    for offset in [-step, -step/2, 0, step/2, step]:
                        new_value = base_value + offset
                        
                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
                        new_value = max(min_val, min(max_val, new_value))
                        
                        new_params = base_params.copy()
                        new_params[param_name] = new_value
                        grid_params.append(new_params)
                else:
                    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º—É–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–µ—Ç–∫—É
                    for offset in [-step, 0, step]:
                        new_value = base_value + offset
                        new_params = base_params.copy()
                        new_params[param_name] = new_value
                        grid_params.append(new_params)
            
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_params = []
            seen = set()
            for params in grid_params:
                param_tuple = tuple(sorted(params.items()))
                if param_tuple not in seen:
                    seen.add(param_tuple)
                    unique_params.append(params)
            
            logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Ç–∫–∞ –∏–∑ {len(unique_params)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–æ–∫—Ä—É–≥ –±–∞–∑–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
            return unique_params
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–∫–∏: {e}")
            return [base_params]
    
    def run_fine_tune(self, top_candidates: int = 20) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        try:
            logger.info("üîß –ù–∞—á–∏–Ω–∞–µ–º —Ç–æ—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞
            coarse_results = self.load_coarse_results()
            
            if not coarse_results:
                logger.error("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return []
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            coarse_results.sort(key=lambda x: x['score'], reverse=True)
            top_results = coarse_results[:top_candidates]
            
            logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–æ {len(top_results)} —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            start_date = self.config['experiment']['start_date']
            end_date = self.config['experiment']['end_date']
            df = self.coarse_searcher.load_historical_data(start_date, end_date)
            
            if df.empty:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                return []
            
            refined_results = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç—É
            for i, candidate in enumerate(top_results):
                logger.info(f"üîç –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ {i+1}/{len(top_results)}: {candidate['formula_id']} - {candidate['formula_name']}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –≤–æ–∫—Ä—É–≥ –ª—É—á—à–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                grid_step = self.config['search']['fine_tune']['grid_step']
                grid_params = self.create_grid_around(candidate['params'], grid_step)
                
                candidate_results = []
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ —Å–µ—Ç–∫–∏
                for j, params in enumerate(grid_params):
                    if j % 10 == 0:
                        logger.info(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {j}/{len(grid_params)}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º backtest
                    metrics = self.coarse_searcher.run_backtest(df, candidate['formula_id'], params)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = {
                        'formula_id': candidate['formula_id'],
                        'formula_name': candidate['formula_name'],
                        'params': params,
                        'metrics': metrics,
                        'score': metrics['sharpe_ratio'],
                        'refinement_level': 'fine_tune'
                    }
                    
                    candidate_results.append(result)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                candidate_results.sort(key=lambda x: x['score'], reverse=True)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                refined_results.append(candidate_results[0])
                
                logger.info(f"‚úÖ {candidate['formula_id']}: –ª—É—á—à–∏–π Sharpe –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ = {candidate_results[0]['metrics']['sharpe_ratio']:.3f}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ score
            refined_results.sort(key=lambda x: x['score'], reverse=True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._save_fine_tune_results(refined_results)
            
            logger.info(f"üéâ –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {len(refined_results)} —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π")
            
            return refined_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
            return []
    
    def _save_fine_tune_results(self, results: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df_results = []
            for result in results:
                row = {
                    'formula_id': result['formula_id'],
                    'formula_name': result['formula_name'],
                    'params': json.dumps(result['params']),
                    'sharpe_ratio': result['metrics']['sharpe_ratio'],
                    'profit_factor': result['metrics']['profit_factor'],
                    'win_rate': result['metrics']['win_rate'],
                    'max_drawdown': result['metrics']['max_drawdown'],
                    'total_return': result['metrics']['total_return'],
                    'volatility': result['metrics']['volatility'],
                    'sortino_ratio': result['metrics']['sortino_ratio'],
                    'calmar_ratio': result['metrics']['calmar_ratio'],
                    'score': result['score'],
                    'refinement_level': result.get('refinement_level', 'fine_tune')
                }
                df_results.append(row)
            
            df = pd.DataFrame(df_results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            output_path = os.path.join(self.results_dir, 'fine_tune_results.csv')
            df.to_csv(output_path, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-10 –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            df_top10 = df.nlargest(10, 'score')
            top10_path = os.path.join(self.results_dir, 'fine_tune_top10.csv')
            df_top10.to_csv(top10_path, index=False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π leaderboard
            self._update_leaderboard(results)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
            logger.info(f"üèÜ –¢–æ–ø-10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {top10_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def _update_leaderboard(self, fine_tune_results: List[Dict[str, Any]]):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—â–∏–π leaderboard —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π leaderboard
            leaderboard_path = os.path.join(self.results_dir, 'leaderboard.csv')
            
            if os.path.exists(leaderboard_path):
                df_leaderboard = pd.read_csv(leaderboard_path)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ DataFrame
                fine_tune_df = []
                for result in fine_tune_results:
                    row = {
                        'formula_id': result['formula_id'],
                        'formula_name': result['formula_name'],
                        'params': json.dumps(result['params']),
                        'sharpe_ratio': result['metrics']['sharpe_ratio'],
                        'profit_factor': result['metrics']['profit_factor'],
                        'win_rate': result['metrics']['win_rate'],
                        'max_drawdown': result['metrics']['max_drawdown'],
                        'total_return': result['metrics']['total_return'],
                        'volatility': result['metrics']['volatility'],
                        'sortino_ratio': result['metrics']['sortino_ratio'],
                        'calmar_ratio': result['metrics']['calmar_ratio'],
                        'score': result['score'],
                        'search_type': 'fine_tune'
                    }
                    fine_tune_df.append(row)
                
                df_fine_tune = pd.DataFrame(fine_tune_df)
                df_fine_tune['search_type'] = 'fine_tune'
                df_leaderboard['search_type'] = 'coarse'
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                df_combined = pd.concat([df_leaderboard, df_fine_tune], ignore_index=True)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º —Ç–æ–ø-20
                df_combined = df_combined.nlargest(20, 'score')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π leaderboard
                df_combined.to_csv(leaderboard_path, index=False)
                
                logger.info(f"üèÜ Leaderboard –æ–±–Ω–æ–≤–ª–µ–Ω —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è leaderboard: {e}")
    
    def get_best_strategy(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ—Å–ª–µ —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        try:
            fine_tune_path = os.path.join(self.results_dir, 'fine_tune_results.csv')
            
            if not os.path.exists(fine_tune_path):
                logger.warning("‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return {}
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            df = pd.read_csv(fine_tune_path)
            
            if df.empty:
                return {}
            
            # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_idx = df['score'].idxmax()
            best_result = df.iloc[best_idx]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_strategy = {
                'formula_id': best_result['formula_id'],
                'formula_name': best_result['formula_name'],
                'params': json.loads(best_result['params']),
                'metrics': {
                    'sharpe_ratio': best_result['sharpe_ratio'],
                    'profit_factor': best_result['profit_factor'],
                    'win_rate': best_result['win_rate'],
                    'max_drawdown': best_result['max_drawdown'],
                    'total_return': best_result['total_return'],
                    'volatility': best_result['volatility'],
                    'sortino_ratio': best_result['sortino_ratio'],
                    'calmar_ratio': best_result['calmar_ratio']
                },
                'score': best_result['score']
            }
            
            return best_strategy
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")
            return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        fine_tuner = FineTune()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—á–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        results = fine_tuner.run_fine_tune(top_candidates=10)
        
        if results:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("\nüèÜ –¢–û–ü-5 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –¢–û–ß–ù–û–ô –ù–ê–°–¢–†–û–ô–ö–ò:")
            print("=" * 80)
            
            for i, result in enumerate(results[:5]):
                print(f"{i+1}. {result['formula_id']} - {result['formula_name']}")
                print(f"   Sharpe: {result['metrics']['sharpe_ratio']:.3f}")
                print(f"   Profit Factor: {result['metrics']['profit_factor']:.3f}")
                print(f"   Win Rate: {result['metrics']['win_rate']:.3f}")
                print(f"   Max DD: {result['metrics']['max_drawdown']:.3f}")
                print()
            
            # –ü–æ–ª—É—á–∞–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            best_strategy = fine_tuner.get_best_strategy()
            if best_strategy:
                print("ü•á –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:")
                print(f"   –§–æ—Ä–º—É–ª–∞: {best_strategy['formula_id']} - {best_strategy['formula_name']}")
                print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_strategy['params']}")
                print(f"   Sharpe Ratio: {best_strategy['metrics']['sharpe_ratio']:.3f}")
                print(f"   Profit Factor: {best_strategy['metrics']['profit_factor']:.3f}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    main()
