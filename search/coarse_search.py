#!/usr/bin/env python3
"""
–°–∏—Å—Ç–µ–º–∞ –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞ (Random Search) –¥–ª—è —Ñ–æ—Ä–º—É–ª F01-F20
–ó–∞–¥–∞—á–∞ S-10: –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ 8-–º–µ—Å—è—á–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
–ó–∞–¥–∞—á–∞ S-13: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
"""

import numpy as np
import pandas as pd
import sqlite3
import yaml
import json
import os
import gc
import psutil
from datetime import datetime, timedelta
from typing import Dict, List, Tuple, Any, Generator
import sys
sys.path.append('..')

from engine.formulas import formula_catalog
from logger import get_logger

logger = get_logger()

# –ò–º–ø–æ—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
try:
    from memory_optimizer import MemoryOptimizer
except ImportError:
    logger.warning("‚ö†Ô∏è MemoryOptimizer –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
    MemoryOptimizer = None

class CoarseSearch:
    def __init__(self, config_path: str = "config/experiment.yaml"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
        self.config = self._load_config(config_path)
        self.db_path = 'data/sol_iv.db'
        self.results_dir = 'report_s10'
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.results_dir, exist_ok=True)
        os.makedirs('data/cache', exist_ok=True)
        os.makedirs('logs', exist_ok=True)
        
        # –§–∏–∫—Å–∏—Ä—É–µ–º seeds –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
        np.random.seed(self.config['reproducibility']['numpy_seed'])
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
        if MemoryOptimizer:
            self.memory_optimizer = MemoryOptimizer(
                chunk_size=self.config.get('memory', {}).get('chunk_size', 50000),
                max_memory_gb=self.config.get('memory', {}).get('max_memory_gb', 2.0)
            )
            logger.info("üîß MemoryOptimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            self.memory_optimizer = None
            logger.warning("‚ö†Ô∏è MemoryOptimizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        # –ö–µ—à –¥–ª—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        self.y_cache = {}
        self.max_cache_size = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NumPy –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        import warnings
        warnings.filterwarnings('ignore', category=RuntimeWarning)
        
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            logger.info(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
            return config
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def load_historical_data(self, start_date: str, end_date: str) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–æ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–Ω–∏ –µ—Å—Ç—å –∑–∞ 2025 –≥–æ–¥)
            query = """
            SELECT 
                time,
                open,
                high,
                low,
                close as spot_price,
                volume
            FROM spot_data 
            WHERE time BETWEEN ? AND ? 
            AND timeframe = '1m'
            ORDER BY time
            """
            
            df = pd.read_sql_query(query, conn, params=[start_date, end_date])
            df['time'] = pd.to_datetime(df['time'])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ IV –¥–∞–Ω–Ω—ã–µ
            iv_query = """
            SELECT 
                time,
                iv_30d,
                skew_30d
            FROM iv_agg_realistic 
            WHERE time BETWEEN ? AND ? 
            AND timeframe = '1m'
            ORDER BY time
            """
            
            iv_df = pd.read_sql_query(iv_query, conn, params=[start_date, end_date])
            iv_df['time'] = pd.to_datetime(iv_df['time'])
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ basis –¥–∞–Ω–Ω—ã–µ
            basis_query = """
            SELECT 
                time,
                basis_rel,
                funding_rate,
                oi_total
            FROM basis_agg_realistic 
            WHERE time BETWEEN ? AND ? 
            AND timeframe = '1m'
            ORDER BY time
            """
            
            basis_df = pd.read_sql_query(basis_query, conn, params=[start_date, end_date])
            basis_df['time'] = pd.to_datetime(basis_df['time'])
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            df = df.merge(iv_df, on='time', how='left')
            df = df.merge(basis_df, on='time', how='left')
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            df = df.ffill().fillna(0)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df = self._add_technical_indicators(df)
            
            conn.close()
            
            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} - {end_date}")
            logger.info(f"üìä IV –¥–∞–Ω–Ω—ã–µ: —Å—Ä–µ–¥–Ω–µ–µ={df['iv_30d'].mean():.3f}, std={df['iv_30d'].std():.3f}")
            logger.info(f"üìä Basis –¥–∞–Ω–Ω—ã–µ: —Å—Ä–µ–¥–Ω–µ–µ={df['basis_rel'].mean():.6f}, std={df['basis_rel'].std():.6f}")
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def _add_technical_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ –¥–∞–Ω–Ω—ã–º"""
        try:
            # Z-score –¥–ª—è IV
            df['iv_z'] = (df['iv_30d'] - df['iv_30d'].rolling(60).mean()) / df['iv_30d'].rolling(60).std()
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ IV
            df['iv_change'] = df['iv_30d'].pct_change()
            
            # Z-score –¥–ª—è skew
            df['skew_z'] = (df['skew_30d'] - df['skew_30d'].rolling(60).mean()) / df['skew_30d'].rolling(60).std()
            
            # Z-score –¥–ª—è basis
            df['basis_z'] = (df['basis_rel'] - df['basis_rel'].rolling(60).mean()) / df['basis_rel'].rolling(60).std()
            
            # –ú–æ–º–µ–Ω—Ç—É–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['momentum_1h'] = df['spot_price'].pct_change(60)  # 1 —á–∞—Å
            df['momentum_4h'] = df['spot_price'].pct_change(240)  # 4 —á–∞—Å–∞
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            df['volatility'] = df['spot_price'].rolling(20).std()
            
            # –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            df['trend_1h'] = df['spot_price'].rolling(60).mean()
            df['trend_4h'] = df['spot_price'].rolling(240).mean()
            
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
            df = df.ffill().fillna(0)
            
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {e}")
            return df
    
    def calculate_formula_value(self, df: pd.DataFrame, formula_id: str, params: Dict[str, float]) -> pd.Series:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ Y –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            formula = formula_catalog.get_formula(formula_id)
            if not formula:
                return pd.Series([0] * len(df), dtype='float32')
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∫–µ—à–∞
            cache_key = f"{formula_id}_{hash(json.dumps(params, sort_keys=True))}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞)
            if cache_key in self.y_cache:
                return self.y_cache[cache_key]
            
            # –û—á–∏—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if len(self.y_cache) > self.max_cache_size:
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                keys_to_remove = list(self.y_cache.keys())[:len(self.y_cache)//2]
                for key in keys_to_remove:
                    del self.y_cache[key]
                gc.collect()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if self.memory_optimizer:
                Y = self.memory_optimizer.optimize_formula_calculation(df, formula_id, params)
            else:
                # –ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
                Y = self._calculate_formula_basic(df, formula_id, params)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            self.y_cache[cache_key] = Y
            
            return Y
            
        except MemoryError as e:
            logger.error(f"‚ùå –ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ñ–æ—Ä–º—É–ª—ã {formula_id}: {e}")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
            gc.collect()
            return pd.Series([0] * len(df), dtype='float32')
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}: {e}")
            return pd.Series([0] * len(df), dtype='float32')
    
    def _calculate_formula_basic(self, df: pd.DataFrame, formula_id: str, params: Dict[str, float]) -> pd.Series:
        """–ë–∞–∑–æ–≤–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—É–ª—ã —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
        try:
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df_opt = df.copy()
            for col in df_opt.select_dtypes(include=['float64']).columns:
                if col in ['iv_z', 'skew_z', 'basis_z', 'momentum_1h', 'momentum_4h', 'volatility']:
                    df_opt[col] = df_opt[col].astype('float32')
            
            # –í—ã—á–∏—Å–ª—è–µ–º Y –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—É–ª—ã
            if formula_id == "F01":  # volatility_focused
                a, b, c, d = params['a'], params['b'], params['c'], params['d']
                Y = (a * df_opt['iv_z'] + 
                     b * df_opt['iv_change'] + 
                     c * (1 / (abs(df_opt['basis_rel']) + 1e-6)) - 
                     d * df_opt['basis_rel'])
            
            elif formula_id == "F02":  # skew_momentum
                a, b, c = params['a'], params['b'], params['c']
                trend_filter = np.where(df_opt['trend_1h'] > df_opt['trend_4h'], 1, -1)
                Y = a * df_opt['skew_z'] + b * df_opt['skew_30d'].pct_change() + c * trend_filter
            
            elif formula_id == "F03":  # basis_reversal
                a, b, c = params['a'], params['b'], params['c']
                vol_filter = np.where(df_opt['volatility'] > df_opt['volatility'].rolling(60).mean(), 1, 0)
                Y = a * df_opt['basis_z'] + b * df_opt['basis_rel'].pct_change() + c * vol_filter
            
            elif formula_id == "F04":  # iv_skew_combo
                a, b, c = params['a'], params['b'], params['c']
                corr_factor = df_opt['iv_30d'].rolling(20).corr(df_opt['skew_30d'])
                Y = a * df_opt['iv_z'] + b * df_opt['skew_z'] + c * corr_factor
            
            elif formula_id == "F05":  # momentum_enhanced
                a, b, c = params['a'], params['b'], params['c']
                vol_ratio = df_opt['volatility'] / df_opt['volatility'].rolling(60).mean()
                Y = a * df_opt['momentum_1h'] + b * df_opt['momentum_4h'] + c * vol_ratio
            
            else:
                # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                Y = self._calculate_generic_formula(df_opt, formula_id, params)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º Y —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏
            rolling_mean = Y.rolling(60, min_periods=1).mean()
            rolling_std = Y.rolling(60, min_periods=1).std()
            Y = (Y - rolling_mean) / (rolling_std + 1e-6)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float32 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            return Y.astype('float32')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—É–ª—ã {formula_id}: {e}")
            return pd.Series([0] * len(df), dtype='float32')
    
    def _calculate_generic_formula(self, df: pd.DataFrame, formula_id: str, params: Dict[str, float]) -> pd.Series:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ–±—â–∏—Ö —Ñ–æ—Ä–º—É–ª"""
        try:
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            components = {
                'iv': df['iv_z'],
                'skew': df['skew_z'],
                'basis': df['basis_z'],
                'momentum': df['momentum_1h'],
                'vol': df['volatility'],
                'trend': np.where(df['trend_1h'] > df['trend_4h'], 1, -1)
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º Y –∫–∞–∫ –≤–∑–≤–µ—à–µ–Ω–Ω—É—é —Å—É–º–º—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            Y = pd.Series([0] * len(df))
            for i, (param_name, value) in enumerate(params.items()):
                if param_name in components:
                    Y += value * components[param_name]
                else:
                    # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                    component_names = list(components.keys())
                    if component_names:
                        random_component = component_names[i % len(component_names)]
                        Y += value * components[random_component]
            
            return Y
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ–±—â–µ–π —Ñ–æ—Ä–º—É–ª—ã: {e}")
            return pd.Series([0] * len(df))
    
    def run_backtest(self, df: pd.DataFrame, formula_id: str, params: Dict[str, float]) -> Dict[str, float]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç backtest –¥–ª—è —Ñ–æ—Ä–º—É–ª—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if self.memory_optimizer:
                memory_before = self.memory_optimizer.get_memory_usage()
                if memory_before['rss_gb'] > self.memory_optimizer.max_memory_gb:
                    logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {memory_before['rss_gb']:.2f}GB")
                    gc.collect()
            
            # –í—ã—á–∏—Å–ª—è–µ–º Y
            Y = self.calculate_formula_value(df, formula_id, params)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥–∏
            th_long = 1.5
            th_short = -1.5
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
            signals = pd.Series([0] * len(df), dtype='int8')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º int8 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            signals[Y > th_long] = 1    # Long
            signals[Y < th_short] = -1  # Short
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤–ª—é
            returns = df['spot_price'].pct_change().astype('float32')
            strategy_returns = signals.shift(1) * returns
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            fees = self.config['backtest']['fees']['taker_bps'] / 10000
            strategy_returns = strategy_returns - fees * abs(signals.diff())
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = self._calculate_metrics(strategy_returns)
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            del Y, signals, returns, strategy_returns
            gc.collect()
            
            return metrics
            
        except MemoryError as e:
            logger.error(f"‚ùå –ù–µ—Ö–≤–∞—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ backtest –¥–ª—è {formula_id}: {e}")
            gc.collect()
            return {
                'sharpe_ratio': 0,
                'profit_factor': 0,
                'win_rate': 0,
                'max_drawdown': 1,
                'total_return': 0,
                'volatility': 1
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ backtest –¥–ª—è {formula_id}: {e}")
            return {
                'sharpe_ratio': 0,
                'profit_factor': 0,
                'win_rate': 0,
                'max_drawdown': 1,
                'total_return': 0,
                'volatility': 1
            }
    
    def _calculate_metrics(self, returns: pd.Series) -> Dict[str, float]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –£–±–∏—Ä–∞–µ–º NaN –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ float32
            returns = returns.dropna().astype('float32')
            
            if len(returns) == 0:
                return {
                    'sharpe_ratio': 0,
                    'profit_factor': 0,
                    'win_rate': 0,
                    'max_drawdown': 1,
                    'total_return': 0,
                    'volatility': 1
                }
            
            # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è)
            total_return = float((1 + returns).prod() - 1)
            volatility = float(returns.std() * np.sqrt(252 * 24 * 60))  # –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            sharpe_ratio = float((returns.mean() * 252 * 24 * 60) / (returns.std() * np.sqrt(252 * 24 * 60))) if returns.std() > 0 else 0.0
            
            # Profit Factor (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
            positive_mask = returns > 0
            negative_mask = returns < 0
            positive_sum = float(returns[positive_mask].sum())
            negative_sum = float(returns[negative_mask].sum())
            profit_factor = abs(positive_sum / negative_sum) if negative_sum != 0 else 0.0
            
            # Win Rate
            win_rate = float(len(returns[positive_mask]) / len(returns)) if len(returns) > 0 else 0.0
            
            # Maximum Drawdown (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
            cumulative = (1 + returns).cumprod().astype('float32')
            running_max = cumulative.expanding().max().astype('float32')
            drawdown = ((cumulative - running_max) / running_max).astype('float32')
            max_drawdown = float(abs(drawdown.min()))
            
            # Sortino Ratio (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ)
            downside_returns = returns[negative_mask]
            downside_vol = float(downside_returns.std() * np.sqrt(252 * 24 * 60)) if len(downside_returns) > 0 else 1.0
            sortino_ratio = float((returns.mean() * 252 * 24 * 60) / downside_vol) if downside_vol > 0 else 0.0
            
            # Calmar Ratio
            calmar_ratio = float(total_return / max_drawdown) if max_drawdown > 0 else 0.0
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            del cumulative, running_max, drawdown, downside_returns
            
            return {
                'sharpe_ratio': sharpe_ratio,
                'profit_factor': profit_factor,
                'win_rate': win_rate,
                'max_drawdown': max_drawdown,
                'total_return': total_return,
                'volatility': volatility,
                'sortino_ratio': sortino_ratio,
                'calmar_ratio': calmar_ratio
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {
                'sharpe_ratio': 0,
                'profit_factor': 0,
                'win_rate': 0,
                'max_drawdown': 1,
                'total_return': 0,
                'volatility': 1
            }
    
    def run_coarse_search(self) -> List[Dict[str, Any]]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ä–º—É–ª"""
        try:
            logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            start_date = self.config['experiment']['start_date']
            end_date = self.config['experiment']['end_date']
            df = self.load_historical_data(start_date, end_date)
            
            if df.empty:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return []
            
            all_results = []
            
            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ñ–æ—Ä–º—É–ª–∞–º
            formulas = formula_catalog.get_all_formulas()
            
            for formula_id, formula in formulas.items():
                logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—É {formula_id}: {formula['name']}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                n_samples = self.config['search']['coarse_search']['n_samples_per_formula']
                params_list = formula_catalog.generate_random_params(formula_id, n_samples)
                
                formula_results = []
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                for i, params in enumerate(params_list):
                    if i % 500 == 0:
                        logger.info(f"  –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(params_list)}")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º backtest
                    metrics = self.run_backtest(df, formula_id, params)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = {
                        'formula_id': formula_id,
                        'formula_name': formula['name'],
                        'params': params,
                        'metrics': metrics,
                        'score': metrics['sharpe_ratio']  # –û—Å–Ω–æ–≤–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞
                    }
                    
                    formula_results.append(result)
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ score –∏ –±–µ—Ä–µ–º —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
                formula_results.sort(key=lambda x: x['score'], reverse=True)
                top_k = self.config['search']['coarse_search']['n_top_candidates']
                top_results = formula_results[:top_k]
                
                all_results.extend(top_results)
                
                logger.info(f"‚úÖ –§–æ—Ä–º—É–ª–∞ {formula_id}: –Ω–∞–π–¥–µ–Ω–æ {len(top_results)} —Ç–æ–ø-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self._save_coarse_results(all_results)
            
            logger.info(f"üéâ –ì—Ä—É–±—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(all_results)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
            
            return all_results
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            return []
    
    def _save_coarse_results(self, results: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥—Ä—É–±–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º DataFrame
            df_results = []
            for result in results:
                row = {
                    'formula_id': result['formula_id'],
                    'formula_name': result['formula_name'],
                    'params': json.dumps(result['params']),
                    'sharpe_ratio': result['metrics']['sharpe_ratio'],
                    'profit_factor': result['metrics']['profit_factor'],
                    'win_rate': result['metrics']['win_rate'],
                    'max_drawdown': result['metrics']['max_drawdown'],
                    'total_return': result['metrics']['total_return'],
                    'volatility': result['metrics']['volatility'],
                    'sortino_ratio': result['metrics']['sortino_ratio'],
                    'calmar_ratio': result['metrics']['calmar_ratio'],
                    'score': result['score']
                }
                df_results.append(row)
            
            df = pd.DataFrame(df_results)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            output_path = os.path.join(self.results_dir, 'coarse_search_results.csv')
            df.to_csv(output_path, index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ø-20 –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            df_top20 = df.nlargest(20, 'score')
            top20_path = os.path.join(self.results_dir, 'leaderboard.csv')
            df_top20.to_csv(top20_path, index=False)
            
            logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_path}")
            logger.info(f"üèÜ –¢–æ–ø-20 —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {top20_path}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∏—Å–∫–∞
        searcher = CoarseSearch()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥—Ä—É–±—ã–π –ø–æ–∏—Å–∫
        results = searcher.run_coarse_search()
        
        if results:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("\nüèÜ –¢–û–ü-5 –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ì–†–£–ë–û–ì–û –ü–û–ò–°–ö–ê:")
            print("=" * 80)
            
            for i, result in enumerate(results[:5]):
                print(f"{i+1}. {result['formula_id']} - {result['formula_name']}")
                print(f"   Sharpe: {result['metrics']['sharpe_ratio']:.3f}")
                print(f"   Profit Factor: {result['metrics']['profit_factor']:.3f}")
                print(f"   Win Rate: {result['metrics']['win_rate']:.3f}")
                print(f"   Max DD: {result['metrics']['max_drawdown']:.3f}")
                print()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main: {e}")

if __name__ == "__main__":
    main()
