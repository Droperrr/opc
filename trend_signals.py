#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ IV –∏ OI
"""

import sqlite3
import pandas as pd
from datetime import datetime
from logger import get_logger
import argparse

logger = get_logger()

def generate_trend_signals(symbol='BTCUSDT', dataset_tag='training_2023', db='server_opc.db', iv_table='iv_agg', timeframe='15m', out_table='trend_signals'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ IV –∏ OI —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ symbol –∏ dataset_tag"""
    logger.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} ({dataset_tag})")
    
    try:
        conn = sqlite3.connect(db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∞–≥—Ä–µ–≥–∞—Ç–æ–≤
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (iv_table,))
        if not cursor.fetchone():
            logger.error(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {iv_table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º—É, symbol –∏ dataset_tag
        df = pd.read_sql_query(f"SELECT * FROM {iv_table} WHERE timeframe = ? AND symbol = ? AND dataset_tag = ?", 
                              conn, params=(timeframe, symbol, dataset_tag), parse_dates=['time'])
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Å—Ç–æ–ª–±–µ—Ü time –≤ timestamp –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        df = df.rename(columns={'time': 'timestamp'})
        
        if df.empty:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ {iv_table} –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ {timeframe}, symbol {symbol}, tag {dataset_tag}")
            return None
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –∞–≥—Ä–µ–≥–∞—Ç–æ–≤")
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ (—Å–º—è–≥—á–µ–Ω–Ω—ã–µ)
        call_put_margin = 0.05  # 5% —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É call –∏ put IV
        iv_momentum_periods = 1  # –ü–µ—Ä–∏–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ momentum
        min_oi_ratio = 0.51     # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π OI ratio –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        max_oi_ratio = 0.49      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π OI ratio –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        df = df.sort_values('timestamp')
        
        # –í—ã—á–∏—Å–ª—è–µ–º IV momentum (–∏–∑–º–µ–Ω–µ–Ω–∏–µ IV –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã)
        df['iv_mom'] = df['iv_30d'].diff(iv_momentum_periods)
        
        signals = []
        
        for _, row in df.iterrows():
            direction = None
            reason = []
            confidence = 0.5
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è IV
            if row['iv_mom'] > 0:
                direction = 'BULLISH'
                reason = f"IV —Ä–∞—Å—Ç–µ—Ç –Ω–∞ {row['iv_mom']:.4f}"
                confidence = min(1.0, abs(row['iv_mom']) * 10 + 0.5)
            elif row['iv_mom'] < 0:
                direction = 'BEARISH'
                reason = f"IV –ø–∞–¥–∞–µ—Ç –Ω–∞ {row['iv_mom']:.4f}"
                confidence = min(1.0, abs(row['iv_mom']) * 10 + 0.5)
            else:
                direction = 'NEUTRAL'
                reason = "IV —Å—Ç–∞–±–∏–ª–µ–Ω"
                confidence = 0.5
            
            if direction:
                signals.append({
                    'timestamp': row['timestamp'].isoformat(),
                    'timeframe': row.get('timeframe', '15m'),
                    'direction': direction,
                    'confidence': round(confidence, 2),
                    'reason': reason,
                    'iv_30d': row['iv_30d'],
                    'skew_30d': row['skew_30d'],
                    'iv_momentum': row['iv_mom'],
                    'symbol': symbol,
                    'dataset_tag': dataset_tag
                })
        
        if signals:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            signals_df = pd.DataFrame(signals)
            signals_df.to_sql(out_table, conn, if_exists='replace', index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            csv_filename = f'trend_signals_{symbol}_{dataset_tag}.csv'
            signals_df.to_csv(csv_filename, index=False)
            
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(signals)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –ë–î –∏ CSV")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            logger.info("üìã –ü—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:")
            print(signals_df.head(5).to_string(index=False))
            
            return signals_df
        else:
            logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º")
            return None
        
        conn.close()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
        return None

def generate_signals_for_all_timeframes(symbol='BTCUSDT', dataset_tag='training_2023'):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
    logger.info(f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤ –¥–ª—è {symbol} ({dataset_tag})")
    
    timeframes = ['15m', '1h']
    all_signals = []
    
    for timeframe in timeframes:
        logger.info(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}")
        
        iv_table = 'iv_agg'
        out_table = f'trend_signals_{timeframe}'
        
        signals = generate_trend_signals(symbol=symbol, dataset_tag=dataset_tag, iv_table=iv_table, timeframe=timeframe, out_table=out_table)
        
        if signals is not None:
            all_signals.append(signals)
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(signals)} —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {timeframe}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è {timeframe}")
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–∏–≥–Ω–∞–ª—ã
    if all_signals:
        combined_signals = pd.concat(all_signals, ignore_index=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Ñ–∞–π–ª
        combined_signals.to_csv(f'trend_signals_all_{symbol}_{dataset_tag}.csv', index=False)
        
        logger.info(f"üíæ –û–±—â–∏–π —Ñ–∞–π–ª: {len(combined_signals)} —Å–∏–≥–Ω–∞–ª–æ–≤")
        
        return combined_signals
    
    return None

def analyze_signal_distribution(symbol='BTCUSDT', dataset_tag='training_2023'):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
    try:
        df = pd.read_csv(f'trend_signals_{symbol}_{dataset_tag}.csv')
        
        if df.empty:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤:")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        direction_counts = df['direction'].value_counts()
        print(f"\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:")
        for direction, count in direction_counts.items():
            print(f"  {direction}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ confidence
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ confidence:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['confidence'].mean():.3f}")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['confidence'].median():.3f}")
        print(f"  –ú–∏–Ω–∏–º—É–º: {df['confidence'].min():.3f}")
        print(f"  –ú–∞–∫—Å–∏–º—É–º: {df['confidence'].max():.3f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ IV 30d
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IV 30d:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['iv_30d'].mean():.4f}")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['iv_30d'].median():.4f}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ skew 30d
        print(f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ skew 30d:")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ: {df['skew_30d'].mean():.4f}")
        print(f"  –ú–µ–¥–∏–∞–Ω–∞: {df['skew_30d'].median():.4f}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")

def run_trend_signals_demo(symbol='BTCUSDT', dataset_tag='training_2023'):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    logger.info(f"üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} ({dataset_tag})")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤
    all_signals = generate_signals_for_all_timeframes(symbol, dataset_tag)
    
    if all_signals is not None:
        logger.info("‚úÖ –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        analyze_signal_distribution(symbol, dataset_tag)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(all_signals)}")
        print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {all_signals['direction'].nunique()}")
        print(f"–¢–∞–π–º—Ñ—Ä–µ–π–º—ã: {all_signals['timeframe'].unique()}")
    
    logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã OPC')
    parser.add_argument('--symbol', default='BTCUSDT',
                       help='–°–∏–º–≤–æ–ª –∞–∫—Ç–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT, SOLUSDT)')
    parser.add_argument('--tag', default='training_2023',
                       help='–¢–µ–≥ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, training_2023, live_2025)')
    
    args = parser.parse_args()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    run_trend_signals_demo(args.symbol, args.tag)

if __name__ == "__main__":
    main()
