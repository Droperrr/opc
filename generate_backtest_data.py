#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è backtesting
–ó–∞–¥–∞—á–∞ S-04: –°–æ–∑–¥–∞–Ω–∏–µ 6-–º–µ—Å—è—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import sqlite3
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
from logger import get_logger

logger = get_logger()

class BacktestDataGenerator:
    def __init__(self):
        self.db_path = 'data/sol_iv.db'
        
    def create_backtest_tables(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è backtesting"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ iv_agg (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–ø—Ü–∏–æ–Ω–∞–º)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS iv_agg (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    spot_price REAL NOT NULL,
                    iv_30d REAL,
                    skew_30d REAL,
                    basis_rel REAL,
                    oi_total REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ basis_agg (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ basis)
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS basis_agg (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    time TEXT NOT NULL,
                    timeframe TEXT NOT NULL,
                    basis_rel REAL,
                    funding_rate REAL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
            conn.close()
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã –¥–ª—è backtesting —Å–æ–∑–¥–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def generate_synthetic_data(self, start_date='2024-03-01', end_date='2024-09-01'):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ä—è–¥ (1 –º–∏–Ω—É—Ç–∞)
            start_dt = datetime.strptime(start_date, '%Y-%m-%d')
            end_dt = datetime.strptime(end_date, '%Y-%m-%d')
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)
            timestamps = pd.date_range(start=start_dt, end=end_dt, freq='1min')
            
            logger.info(f"üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {len(timestamps)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫")
            
            # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            base_price = 100.0
            base_iv = 0.5
            base_skew = 0.0
            base_basis = 0.0
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            data = []
            
            for i, ts in enumerate(timestamps):
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥ –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                trend_factor = np.sin(i / (24 * 60 * 30)) * 0.1  # –ú–µ—Å—è—á–Ω—ã–π —Ü–∏–∫–ª
                volatility_factor = np.abs(np.sin(i / (24 * 60 * 7))) * 0.3  # –ù–µ–¥–µ–ª—å–Ω—ã–π —Ü–∏–∫–ª
                
                # –¶–µ–Ω–∞ —Å–ø–æ—Ç–∞ —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ —à—É–º–æ–º
                price_change = trend_factor + np.random.normal(0, 0.001)
                spot_price = base_price * (1 + price_change)
                
                # IV —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
                iv_30d = base_iv + volatility_factor + np.random.normal(0, 0.05)
                iv_30d = max(0.1, min(1.5, iv_30d))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º IV
                
                # Skew —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π —Å IV
                skew_30d = np.random.normal(0, 0.2) + (iv_30d - base_iv) * 0.5
                skew_30d = max(-1.0, min(1.0, skew_30d))
                
                # Basis —Å –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–µ–π —Å —Ü–µ–Ω–æ–π
                basis_rel = np.random.normal(0, 0.01) + price_change * 0.1
                basis_rel = max(-0.05, min(0.05, basis_rel))
                
                # Open Interest
                oi_total = np.random.uniform(1000, 10000)
                
                # Funding Rate
                funding_rate = np.random.normal(0, 0.0001)
                
                data.append({
                    'time': ts.strftime('%Y-%m-%d %H:%M:%S'),
                    'timeframe': '1m',
                    'spot_price': spot_price,
                    'iv_30d': iv_30d,
                    'skew_30d': skew_30d,
                    'basis_rel': basis_rel,
                    'oi_total': oi_total,
                    'funding_rate': funding_rate
                })
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                base_price = spot_price
                base_iv = iv_30d * 0.99 + 0.5 * 0.01  # –ü–ª–∞–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            
            return pd.DataFrame(data)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def save_to_database(self, df):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect(self.db_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ iv_agg
            iv_data = df[['time', 'timeframe', 'spot_price', 'iv_30d', 'skew_30d', 'basis_rel', 'oi_total']].copy()
            iv_data.to_sql('iv_agg', conn, if_exists='replace', index=False)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ basis_agg
            basis_data = df[['time', 'timeframe', 'basis_rel', 'funding_rate']].copy()
            basis_data.to_sql('basis_agg', conn, if_exists='replace', index=False)
            
            conn.close()
            
            logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
    
    def create_sample_data(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 1 –Ω–µ–¥–µ–ª—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            start_date = '2024-08-01'
            end_date = '2024-08-08'
            
            logger.info("üîß –°–æ–∑–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 1 –Ω–µ–¥–µ–ª—é")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self.create_backtest_tables()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.generate_synthetic_data(start_date, end_date)
            
            if not df.empty:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                self.save_to_database(df)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                df.to_csv('data/backtests/sample_data.csv', index=False)
                
                logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def create_full_data(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤"""
        try:
            logger.info("üîß –°–æ–∑–¥–∞—é –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ 6 –º–µ—Å—è—Ü–µ–≤")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self.create_backtest_tables()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            df = self.generate_synthetic_data()
            
            if not df.empty:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                self.save_to_database(df)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º CSV –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                df.to_csv('data/backtests/full_data.csv', index=False)
                
                logger.info(f"‚úÖ –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    generator = BacktestDataGenerator()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (1 –Ω–µ–¥–µ–ª—è)
    success = generator.create_sample_data()
    
    if success:
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–æ—Ç–æ–≤—ã –¥–ª—è backtesting")
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")

if __name__ == "__main__":
    main()
